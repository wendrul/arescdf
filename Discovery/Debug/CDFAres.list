
CDFAres.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008794  08008794  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800879c  0800879c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087a0  080087a0  000187a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080087a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d0  2000006c  08008810  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000063c  08008810  0002063c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e35  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004c03  00000000  00000000  00041ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b20  00000000  00000000  00046ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a8  00000000  00000000  000485f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a279  00000000  00000000  00049ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001aea2  00000000  00000000  00074119  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e72c8  00000000  00000000  0008efbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078f4  00000000  00000000  00176300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008398 	.word	0x08008398

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08008398 	.word	0x08008398

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_CRC_Init+0x20>)
 80005b6:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <MX_CRC_Init+0x24>)
 80005b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_CRC_Init+0x20>)
 80005bc:	f001 fde8 	bl	8002190 <HAL_CRC_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005c6:	f000 fda1 	bl	800110c <Error_Handler>
  }

}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000098 	.word	0x20000098
 80005d4:	40023000 	.word	0x40023000

080005d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <HAL_CRC_MspInit+0x3c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d10d      	bne.n	8000606 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <HAL_CRC_MspInit+0x40>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a09      	ldr	r2, [pc, #36]	; (8000618 <HAL_CRC_MspInit+0x40>)
 80005f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b07      	ldr	r3, [pc, #28]	; (8000618 <HAL_CRC_MspInit+0x40>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023000 	.word	0x40023000
 8000618:	40023800 	.word	0x40023800

0800061c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000622:	4a16      	ldr	r2, [pc, #88]	; (800067c <MX_DMA2D_Init+0x60>)
 8000624:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_DMA2D_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_DMA2D_Init+0x5c>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_DMA2D_Init+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000652:	f001 fdde 	bl	8002212 <HAL_DMA2D_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800065c:	f000 fd56 	bl	800110c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000660:	2101      	movs	r1, #1
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_DMA2D_Init+0x5c>)
 8000664:	f001 ff2e 	bl	80024c4 <HAL_DMA2D_ConfigLayer>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800066e:	f000 fd4d 	bl	800110c <Error_Handler>
  }

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000a0 	.word	0x200000a0
 800067c:	4002b000 	.word	0x4002b000

08000680 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_DMA2D_MspInit+0x48>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d115      	bne.n	80006be <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <HAL_DMA2D_MspInit+0x4c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <HAL_DMA2D_MspInit+0x4c>)
 800069c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_DMA2D_MspInit+0x4c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2105      	movs	r1, #5
 80006b2:	205a      	movs	r0, #90	; 0x5a
 80006b4:	f001 fd42 	bl	800213c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80006b8:	205a      	movs	r0, #90	; 0x5a
 80006ba:	f001 fd5b 	bl	8002174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	4002b000 	.word	0x4002b000
 80006cc:	40023800 	.word	0x40023800

080006d0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]
 80006e6:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_FMC_Init+0x98>)
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <MX_FMC_Init+0x9c>)
 80006ec:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_FMC_Init+0x98>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_FMC_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_FMC_Init+0x98>)
 80006fc:	2204      	movs	r2, #4
 80006fe:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_FMC_Init+0x98>)
 8000702:	2210      	movs	r2, #16
 8000704:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_FMC_Init+0x98>)
 8000708:	2240      	movs	r2, #64	; 0x40
 800070a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_FMC_Init+0x98>)
 800070e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000712:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_FMC_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_FMC_Init+0x98>)
 800071c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000720:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_FMC_Init+0x98>)
 8000724:	2200      	movs	r2, #0
 8000726:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_FMC_Init+0x98>)
 800072a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000734:	2307      	movs	r3, #7
 8000736:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000738:	2304      	movs	r3, #4
 800073a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000740:	2303      	movs	r3, #3
 8000742:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000744:	2302      	movs	r3, #2
 8000746:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_FMC_Init+0x98>)
 8000752:	f004 fe0f 	bl	8005374 <HAL_SDRAM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800075c:	f000 fcd6 	bl	800110c <Error_Handler>
  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	200000e0 	.word	0x200000e0
 800076c:	a0000140 	.word	0xa0000140

08000770 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000784:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <HAL_FMC_MspInit+0x104>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d16f      	bne.n	800086c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800078c:	4b39      	ldr	r3, [pc, #228]	; (8000874 <HAL_FMC_MspInit+0x104>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b38      	ldr	r3, [pc, #224]	; (8000878 <HAL_FMC_MspInit+0x108>)
 8000798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800079a:	4a37      	ldr	r2, [pc, #220]	; (8000878 <HAL_FMC_MspInit+0x108>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6393      	str	r3, [r2, #56]	; 0x38
 80007a2:	4b35      	ldr	r3, [pc, #212]	; (8000878 <HAL_FMC_MspInit+0x108>)
 80007a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80007ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80007b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c0:	230c      	movs	r3, #12
 80007c2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	4619      	mov	r1, r3
 80007c8:	482c      	ldr	r0, [pc, #176]	; (800087c <HAL_FMC_MspInit+0x10c>)
 80007ca:	f001 ff0d 	bl	80025e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007da:	2303      	movs	r3, #3
 80007dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007de:	230c      	movs	r3, #12
 80007e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	4826      	ldr	r0, [pc, #152]	; (8000880 <HAL_FMC_MspInit+0x110>)
 80007e8:	f001 fefe 	bl	80025e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5 
 80007ec:	f248 1333 	movw	r3, #33075	; 0x8133
 80007f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007fe:	230c      	movs	r3, #12
 8000800:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	481f      	ldr	r0, [pc, #124]	; (8000884 <HAL_FMC_MspInit+0x114>)
 8000808:	f001 feee 	bl	80025e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10 
 800080c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000810:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000812:	2302      	movs	r3, #2
 8000814:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081a:	2303      	movs	r3, #3
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800081e:	230c      	movs	r3, #12
 8000820:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4818      	ldr	r0, [pc, #96]	; (8000888 <HAL_FMC_MspInit+0x118>)
 8000828:	f001 fede 	bl	80025e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14 
 800082c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000830:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000832:	2302      	movs	r3, #2
 8000834:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800083a:	2303      	movs	r3, #3
 800083c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800083e:	230c      	movs	r3, #12
 8000840:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <HAL_FMC_MspInit+0x11c>)
 8000848:	f001 fece 	bl	80025e8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800084c:	2360      	movs	r3, #96	; 0x60
 800084e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800085c:	230c      	movs	r3, #12
 800085e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	480a      	ldr	r0, [pc, #40]	; (8000890 <HAL_FMC_MspInit+0x120>)
 8000866:	f001 febf 	bl	80025e8 <HAL_GPIO_Init>
 800086a:	e000      	b.n	800086e <HAL_FMC_MspInit+0xfe>
    return;
 800086c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000088 	.word	0x20000088
 8000878:	40023800 	.word	0x40023800
 800087c:	40021400 	.word	0x40021400
 8000880:	40020800 	.word	0x40020800
 8000884:	40021800 	.word	0x40021800
 8000888:	40021000 	.word	0x40021000
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40020400 	.word	0x40020400

08000894 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800089c:	f7ff ff68 	bl	8000770 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
 80008c2:	4b7a      	ldr	r3, [pc, #488]	; (8000aac <MX_GPIO_Init+0x204>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a79      	ldr	r2, [pc, #484]	; (8000aac <MX_GPIO_Init+0x204>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b77      	ldr	r3, [pc, #476]	; (8000aac <MX_GPIO_Init+0x204>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
 80008de:	4b73      	ldr	r3, [pc, #460]	; (8000aac <MX_GPIO_Init+0x204>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a72      	ldr	r2, [pc, #456]	; (8000aac <MX_GPIO_Init+0x204>)
 80008e4:	f043 0320 	orr.w	r3, r3, #32
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b70      	ldr	r3, [pc, #448]	; (8000aac <MX_GPIO_Init+0x204>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0320 	and.w	r3, r3, #32
 80008f2:	61fb      	str	r3, [r7, #28]
 80008f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	4b6c      	ldr	r3, [pc, #432]	; (8000aac <MX_GPIO_Init+0x204>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a6b      	ldr	r2, [pc, #428]	; (8000aac <MX_GPIO_Init+0x204>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <MX_GPIO_Init+0x204>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090e:	61bb      	str	r3, [r7, #24]
 8000910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	4b65      	ldr	r3, [pc, #404]	; (8000aac <MX_GPIO_Init+0x204>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a64      	ldr	r2, [pc, #400]	; (8000aac <MX_GPIO_Init+0x204>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b62      	ldr	r3, [pc, #392]	; (8000aac <MX_GPIO_Init+0x204>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b5e      	ldr	r3, [pc, #376]	; (8000aac <MX_GPIO_Init+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a5d      	ldr	r2, [pc, #372]	; (8000aac <MX_GPIO_Init+0x204>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <MX_GPIO_Init+0x204>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b57      	ldr	r3, [pc, #348]	; (8000aac <MX_GPIO_Init+0x204>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a56      	ldr	r2, [pc, #344]	; (8000aac <MX_GPIO_Init+0x204>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b54      	ldr	r3, [pc, #336]	; (8000aac <MX_GPIO_Init+0x204>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	4b50      	ldr	r3, [pc, #320]	; (8000aac <MX_GPIO_Init+0x204>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a4f      	ldr	r2, [pc, #316]	; (8000aac <MX_GPIO_Init+0x204>)
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <MX_GPIO_Init+0x204>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0310 	and.w	r3, r3, #16
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b49      	ldr	r3, [pc, #292]	; (8000aac <MX_GPIO_Init+0x204>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a48      	ldr	r2, [pc, #288]	; (8000aac <MX_GPIO_Init+0x204>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b46      	ldr	r3, [pc, #280]	; (8000aac <MX_GPIO_Init+0x204>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2116      	movs	r1, #22
 80009a2:	4843      	ldr	r0, [pc, #268]	; (8000ab0 <MX_GPIO_Init+0x208>)
 80009a4:	f001 ffca 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	4841      	ldr	r0, [pc, #260]	; (8000ab4 <MX_GPIO_Init+0x20c>)
 80009ae:	f001 ffc5 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009b8:	483f      	ldr	r0, [pc, #252]	; (8000ab8 <MX_GPIO_Init+0x210>)
 80009ba:	f001 ffbf 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009c4:	483d      	ldr	r0, [pc, #244]	; (8000abc <MX_GPIO_Init+0x214>)
 80009c6:	f001 ffb9 	bl	800293c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80009ca:	2316      	movs	r3, #22
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009de:	4619      	mov	r1, r3
 80009e0:	4833      	ldr	r0, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x208>)
 80009e2:	f001 fe01 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 80009e6:	f248 0307 	movw	r3, #32775	; 0x8007
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	4b34      	ldr	r3, [pc, #208]	; (8000ac0 <MX_GPIO_Init+0x218>)
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	482e      	ldr	r0, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0x20c>)
 80009fc:	f001 fdf4 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a14:	4619      	mov	r1, r3
 8000a16:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x20c>)
 8000a18:	f001 fde6 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0x218>)
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4820      	ldr	r0, [pc, #128]	; (8000ab0 <MX_GPIO_Init+0x208>)
 8000a30:	f001 fdda 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a34:	2304      	movs	r3, #4
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	481f      	ldr	r0, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0x21c>)
 8000a48:	f001 fdce 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000a62:	f001 fdc1 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480e      	ldr	r0, [pc, #56]	; (8000ab8 <MX_GPIO_Init+0x210>)
 8000a80:	f001 fdb2 	bl	80025e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000a84:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	; (8000abc <MX_GPIO_Init+0x214>)
 8000a9e:	f001 fda3 	bl	80025e8 <HAL_GPIO_Init>

}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	; 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_I2C3_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_I2C3_Init+0x7c>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b06:	f003 f923 	bl	8003d50 <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fafc 	bl	800110c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b18:	f003 fa42 	bl	8003fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b22:	f000 faf3 	bl	800110c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_I2C3_Init+0x74>)
 8000b2a:	f003 fa75 	bl	8004018 <HAL_I2CEx_ConfigDigitalFilter>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b34:	f000 faea 	bl	800110c <Error_Handler>
  }

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000114 	.word	0x20000114
 8000b40:	40005c00 	.word	0x40005c00
 8000b44:	000186a0 	.word	0x000186a0

08000b48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a29      	ldr	r2, [pc, #164]	; (8000c0c <HAL_I2C_MspInit+0xc4>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d14b      	bne.n	8000c02 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a27      	ldr	r2, [pc, #156]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b74:	f043 0304 	orr.w	r3, r3, #4
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0304 	and.w	r3, r3, #4
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba8:	2312      	movs	r3, #18
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bb4:	2304      	movs	r3, #4
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4815      	ldr	r0, [pc, #84]	; (8000c14 <HAL_I2C_MspInit+0xcc>)
 8000bc0:	f001 fd12 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bca:	2312      	movs	r3, #18
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd6:	2304      	movs	r3, #4
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <HAL_I2C_MspInit+0xd0>)
 8000be2:	f001 fd01 	bl	80025e8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000bf0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_I2C_MspInit+0xc8>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	; 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005c00 	.word	0x40005c00
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020000 	.word	0x40020000

08000c1c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	; 0x38
 8000c20:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2234      	movs	r2, #52	; 0x34
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f006 fa8b 	bl	8007144 <memset>

  hltdc.Instance = LTDC;
 8000c2e:	4b39      	ldr	r3, [pc, #228]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c30:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <MX_LTDC_Init+0xfc>)
 8000c32:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c34:	4b37      	ldr	r3, [pc, #220]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c3a:	4b36      	ldr	r3, [pc, #216]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c40:	4b34      	ldr	r3, [pc, #208]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c4c:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c4e:	2209      	movs	r2, #9
 8000c50:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c52:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c5a:	221d      	movs	r2, #29
 8000c5c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c60:	2203      	movs	r2, #3
 8000c62:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c66:	f240 120d 	movw	r2, #269	; 0x10d
 8000c6a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c6c:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c6e:	f240 1243 	movw	r2, #323	; 0x143
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c76:	f240 1217 	movw	r2, #279	; 0x117
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c7e:	f240 1247 	movw	r2, #327	; 0x147
 8000c82:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c9c:	481d      	ldr	r0, [pc, #116]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000c9e:	f003 f9fb 	bl	8004098 <HAL_LTDC_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ca8:	f000 fa30 	bl	800110c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000cb0:	23f0      	movs	r3, #240	; 0xf0
 8000cb2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000cb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cbc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000cc2:	23ff      	movs	r3, #255	; 0xff
 8000cc4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cce:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000cd4:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000cda:	23f0      	movs	r3, #240	; 0xf0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000cde:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_LTDC_Init+0xf8>)
 8000cfe:	f003 fb5d 	bl	80043bc <HAL_LTDC_ConfigLayer>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000d08:	f000 fa00 	bl	800110c <Error_Handler>
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3738      	adds	r7, #56	; 0x38
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000168 	.word	0x20000168
 8000d18:	40016800 	.word	0x40016800

08000d1c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a7b      	ldr	r2, [pc, #492]	; (8000f28 <HAL_LTDC_MspInit+0x20c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	f040 80f0 	bne.w	8000f20 <HAL_LTDC_MspInit+0x204>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
 8000d44:	4b79      	ldr	r3, [pc, #484]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d48:	4a78      	ldr	r2, [pc, #480]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d50:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	4b72      	ldr	r3, [pc, #456]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d64:	4a71      	ldr	r2, [pc, #452]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d66:	f043 0320 	orr.w	r3, r3, #32
 8000d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6c:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	f003 0320 	and.w	r3, r3, #32
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	4b6b      	ldr	r3, [pc, #428]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	4b64      	ldr	r3, [pc, #400]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9c:	4a63      	ldr	r2, [pc, #396]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6313      	str	r3, [r2, #48]	; 0x30
 8000da4:	4b61      	ldr	r3, [pc, #388]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db8:	4a5c      	ldr	r2, [pc, #368]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b56      	ldr	r3, [pc, #344]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	4a55      	ldr	r2, [pc, #340]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	6313      	str	r3, [r2, #48]	; 0x30
 8000ddc:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000df2:	f043 0308 	orr.w	r3, r3, #8
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
 8000df8:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_LTDC_MspInit+0x210>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfc:	f003 0308 	and.w	r3, r3, #8
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e16:	230e      	movs	r3, #14
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4843      	ldr	r0, [pc, #268]	; (8000f30 <HAL_LTDC_MspInit+0x214>)
 8000e22:	f001 fbe1 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8000e26:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e38:	230e      	movs	r3, #14
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	483c      	ldr	r0, [pc, #240]	; (8000f34 <HAL_LTDC_MspInit+0x218>)
 8000e44:	f001 fbd0 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e58:	2309      	movs	r3, #9
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4835      	ldr	r0, [pc, #212]	; (8000f38 <HAL_LTDC_MspInit+0x21c>)
 8000e64:	f001 fbc0 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000e68:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e7a:	230e      	movs	r3, #14
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e82:	4619      	mov	r1, r3
 8000e84:	482c      	ldr	r0, [pc, #176]	; (8000f38 <HAL_LTDC_MspInit+0x21c>)
 8000e86:	f001 fbaf 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000e8a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e9c:	230e      	movs	r3, #14
 8000e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4825      	ldr	r0, [pc, #148]	; (8000f3c <HAL_LTDC_MspInit+0x220>)
 8000ea8:	f001 fb9e 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000eac:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ebe:	230e      	movs	r3, #14
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481d      	ldr	r0, [pc, #116]	; (8000f40 <HAL_LTDC_MspInit+0x224>)
 8000eca:	f001 fb8d 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000ece:	2348      	movs	r3, #72	; 0x48
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ede:	230e      	movs	r3, #14
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4816      	ldr	r0, [pc, #88]	; (8000f44 <HAL_LTDC_MspInit+0x228>)
 8000eea:	f001 fb7d 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000eee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f00:	2309      	movs	r3, #9
 8000f02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_LTDC_MspInit+0x220>)
 8000f0c:	f001 fb6c 	bl	80025e8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2105      	movs	r1, #5
 8000f14:	2058      	movs	r0, #88	; 0x58
 8000f16:	f001 f911 	bl	800213c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f1a:	2058      	movs	r0, #88	; 0x58
 8000f1c:	f001 f92a 	bl	8002174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f20:	bf00      	nop
 8000f22:	3738      	adds	r7, #56	; 0x38
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40016800 	.word	0x40016800
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f000 ffda 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f820 	bl	8000f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f7ff fca8 	bl	80008a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f58:	f7ff fb2a 	bl	80005b0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f5c:	f7ff fb5e 	bl	800061c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f60:	f7ff fbb6 	bl	80006d0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f64:	f7ff fdb0 	bl	8000ac8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f68:	f7ff fe58 	bl	8000c1c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000f6c:	f000 f8d6 	bl	800111c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000f70:	f000 fb08 	bl	8001584 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000f74:	f000 fbe0 	bl	8001738 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000f78:	f000 fc58 	bl	800182c <MX_USB_OTG_HS_HCD_Init>
  MX_TIM5_Init();
 8000f7c:	f000 fb52 	bl	8001624 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim5);
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <main+0x48>)
 8000f82:	f004 faba 	bl	80054fa <HAL_TIM_Base_Start_IT>
  init_shell();
 8000f86:	f000 fcdb 	bl	8001940 <init_shell>
  shell_loop();
 8000f8a:	f000 fdff 	bl	8001b8c <shell_loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x46>
 8000f90:	200002b0 	.word	0x200002b0

08000f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0a0      	sub	sp, #128	; 0x80
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f9e:	2230      	movs	r2, #48	; 0x30
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 f8ce 	bl	8007144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2230      	movs	r2, #48	; 0x30
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f006 f8bf 	bl	8007144 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	4b31      	ldr	r3, [pc, #196]	; (8001090 <SystemClock_Config+0xfc>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a30      	ldr	r2, [pc, #192]	; (8001090 <SystemClock_Config+0xfc>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	; (8001090 <SystemClock_Config+0xfc>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b2b      	ldr	r3, [pc, #172]	; (8001094 <SystemClock_Config+0x100>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <SystemClock_Config+0x100>)
 8000fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b28      	ldr	r3, [pc, #160]	; (8001094 <SystemClock_Config+0x100>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001006:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800100c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001010:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001012:	2304      	movs	r3, #4
 8001014:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001016:	23a8      	movs	r3, #168	; 0xa8
 8001018:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800101a:	2302      	movs	r3, #2
 800101c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800101e:	2307      	movs	r3, #7
 8001020:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001022:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001026:	4618      	mov	r0, r3
 8001028:	f003 fb9e 	bl	8004768 <HAL_RCC_OscConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001032:	f000 f86b 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001036:	230f      	movs	r3, #15
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103a:	2302      	movs	r3, #2
 800103c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001046:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800104e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001052:	2105      	movs	r1, #5
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fdc9 	bl	8004bec <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001060:	f000 f854 	bl	800110c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001064:	2308      	movs	r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001068:	2332      	movs	r3, #50	; 0x32
 800106a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001070:	2300      	movs	r3, #0
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4618      	mov	r0, r3
 800107a:	f003 ffd7 	bl	800502c <HAL_RCCEx_PeriphCLKConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001084:	f000 f842 	bl	800110c <Error_Handler>
  }
}
 8001088:	bf00      	nop
 800108a:	3780      	adds	r7, #128	; 0x80
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)&ch, 1, 0xFFFF);
 80010a0:	1d39      	adds	r1, r7, #4
 80010a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010a6:	2201      	movs	r2, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <__io_putchar+0x20>)
 80010aa:	f004 fe11 	bl	8005cd0 <HAL_UART_Transmit>

  return ch;
 80010ae:	687b      	ldr	r3, [r7, #4]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000330 	.word	0x20000330

080010bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart) {
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
         if (huart->Instance == USART1) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <HAL_UART_RxCpltCallback+0x24>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d102      	bne.n	80010d4 <HAL_UART_RxCpltCallback+0x18>
                 dataReady = 1;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x28>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]
         }
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40011000 	.word	0x40011000
 80010e4:	20000214 	.word	0x20000214

080010e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010fa:	f000 ff25 	bl	8001f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40001000 	.word	0x40001000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8001120:	4b17      	ldr	r3, [pc, #92]	; (8001180 <MX_SPI5_Init+0x64>)
 8001122:	4a18      	ldr	r2, [pc, #96]	; (8001184 <MX_SPI5_Init+0x68>)
 8001124:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <MX_SPI5_Init+0x64>)
 8001128:	f44f 7282 	mov.w	r2, #260	; 0x104
 800112c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <MX_SPI5_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <MX_SPI5_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <MX_SPI5_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <MX_SPI5_Init+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <MX_SPI5_Init+0x64>)
 8001148:	f44f 7200 	mov.w	r2, #512	; 0x200
 800114c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <MX_SPI5_Init+0x64>)
 8001150:	2218      	movs	r2, #24
 8001152:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <MX_SPI5_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <MX_SPI5_Init+0x64>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001160:	4b07      	ldr	r3, [pc, #28]	; (8001180 <MX_SPI5_Init+0x64>)
 8001162:	2200      	movs	r2, #0
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <MX_SPI5_Init+0x64>)
 8001168:	220a      	movs	r2, #10
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_SPI5_Init+0x64>)
 800116e:	f004 f935 	bl	80053dc <HAL_SPI_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001178:	f7ff ffc8 	bl	800110c <Error_Handler>
  }

}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000218 	.word	0x20000218
 8001184:	40015000 	.word	0x40015000

08001188 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <HAL_SPI_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011b8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <HAL_SPI_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011e2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011f4:	2305      	movs	r3, #5
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 8001200:	f001 f9f2 	bl	80025e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	; 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40015000 	.word	0x40015000
 8001210:	40023800 	.word	0x40023800
 8001214:	40021400 	.word	0x40021400

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	4b10      	ldr	r3, [pc, #64]	; (8001264 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <HAL_MspInit+0x4c>)
 8001228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <HAL_MspInit+0x4c>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_MspInit+0x4c>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_MspInit+0x4c>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001278:	2200      	movs	r2, #0
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2036      	movs	r0, #54	; 0x36
 800127e:	f000 ff5d 	bl	800213c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001282:	2036      	movs	r0, #54	; 0x36
 8001284:	f000 ff76 	bl	8002174 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <HAL_InitTick+0xa4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a1e      	ldr	r2, [pc, #120]	; (800130c <HAL_InitTick+0xa4>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_InitTick+0xa4>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012a4:	f107 0210 	add.w	r2, r7, #16
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fe8a 	bl	8004fc8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012b4:	f003 fe60 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80012b8:	4603      	mov	r3, r0
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_InitTick+0xa8>)
 80012c2:	fba2 2303 	umull	r2, r3, r2, r3
 80012c6:	0c9b      	lsrs	r3, r3, #18
 80012c8:	3b01      	subs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_InitTick+0xac>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <HAL_InitTick+0xb0>)
 80012d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <HAL_InitTick+0xac>)
 80012d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012da:	4a0e      	ldr	r2, [pc, #56]	; (8001314 <HAL_InitTick+0xac>)
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <HAL_InitTick+0xac>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_InitTick+0xac>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <HAL_InitTick+0xac>)
 80012ee:	f004 f8d9 	bl	80054a4 <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d104      	bne.n	8001302 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <HAL_InitTick+0xac>)
 80012fa:	f004 f8fe 	bl	80054fa <HAL_TIM_Base_Start_IT>
 80012fe:	4603      	mov	r3, r0
 8001300:	e000      	b.n	8001304 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	3730      	adds	r7, #48	; 0x30
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	431bde83 	.word	0x431bde83
 8001314:	20000270 	.word	0x20000270
 8001318:	40001000 	.word	0x40001000

0800131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <MemManage_Handler+0x4>

08001336 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <BusFault_Handler+0x4>

0800133c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler+0x4>

08001342 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <USART1_IRQHandler+0x10>)
 8001372:	f004 fd9b 	bl	8005eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000330 	.word	0x20000330

08001380 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM5_IRQHandler+0x10>)
 8001386:	f004 f8dc 	bl	8005542 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002b0 	.word	0x200002b0

08001394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <TIM6_DAC_IRQHandler+0x10>)
 800139a:	f004 f8d2 	bl	8005542 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000270 	.word	0x20000270

080013a8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <OTG_HS_IRQHandler+0x10>)
 80013ae:	f001 fb40 	bl	8002a32 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000370 	.word	0x20000370

080013bc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013c0:	4802      	ldr	r0, [pc, #8]	; (80013cc <LTDC_IRQHandler+0x10>)
 80013c2:	f002 ff39 	bl	8004238 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000168 	.word	0x20000168

080013d0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <DMA2D_IRQHandler+0x10>)
 80013d6:	f000 ff65 	bl	80022a4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200000a0 	.word	0x200000a0

080013e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe2d 	bl	8001098 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
	}
	return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x50>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x16>
		heap_end = &end;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <_sbrk+0x50>)
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <_sbrk+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <_sbrk+0x50>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <_sbrk+0x50>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	466a      	mov	r2, sp
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d907      	bls.n	80014fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014ea:	f005 fdf9 	bl	80070e0 <__errno>
 80014ee:	4602      	mov	r2, r0
 80014f0:	230c      	movs	r3, #12
 80014f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	e006      	b.n	8001508 <_sbrk+0x48>
	}

	heap_end += incr;
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <_sbrk+0x50>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <_sbrk+0x50>)
 8001504:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000008c 	.word	0x2000008c
 8001514:	20000640 	.word	0x20000640

08001518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <SystemInit+0x60>)
 800151e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001522:	4a15      	ldr	r2, [pc, #84]	; (8001578 <SystemInit+0x60>)
 8001524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <SystemInit+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a12      	ldr	r2, [pc, #72]	; (800157c <SystemInit+0x64>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001538:	4b10      	ldr	r3, [pc, #64]	; (800157c <SystemInit+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <SystemInit+0x64>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <SystemInit+0x64>)
 8001544:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800154c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <SystemInit+0x64>)
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <SystemInit+0x68>)
 8001552:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <SystemInit+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <SystemInit+0x64>)
 800155a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800155e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SystemInit+0x60>)
 8001568:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800156c:	609a      	str	r2, [r3, #8]
#endif
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	40023800 	.word	0x40023800
 8001580:	24003010 	.word	0x24003010

08001584 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM1_Init+0x98>)
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <MX_TIM1_Init+0x9c>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <MX_TIM1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <MX_TIM1_Init+0x98>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <MX_TIM1_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015be:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM1_Init+0x98>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_TIM1_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ca:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM1_Init+0x98>)
 80015cc:	f003 ff6a 	bl	80054a4 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80015d6:	f7ff fd99 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e0:	f107 0308 	add.w	r3, r7, #8
 80015e4:	4619      	mov	r1, r3
 80015e6:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM1_Init+0x98>)
 80015e8:	f004 f8b3 	bl	8005752 <HAL_TIM_ConfigClockSource>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80015f2:	f7ff fd8b 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	4619      	mov	r1, r3
 8001602:	4806      	ldr	r0, [pc, #24]	; (800161c <MX_TIM1_Init+0x98>)
 8001604:	f004 fabe 	bl	8005b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800160e:	f7ff fd7d 	bl	800110c <Error_Handler>
  }

}
 8001612:	bf00      	nop
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002f0 	.word	0x200002f0
 8001620:	40010000 	.word	0x40010000

08001624 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0308 	add.w	r3, r7, #8
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]

  htim5.Instance = TIM5;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <MX_TIM5_Init+0x94>)
 8001644:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_TIM5_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_TIM5_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001666:	f003 ff1d 	bl	80054a4 <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM5_Init+0x50>
  {
    Error_Handler();
 8001670:	f7ff fd4c 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4619      	mov	r1, r3
 8001680:	480c      	ldr	r0, [pc, #48]	; (80016b4 <MX_TIM5_Init+0x90>)
 8001682:	f004 f866 	bl	8005752 <HAL_TIM_ConfigClockSource>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM5_Init+0x6c>
  {
    Error_Handler();
 800168c:	f7ff fd3e 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_TIM5_Init+0x90>)
 800169e:	f004 fa71 	bl	8005b84 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM5_Init+0x88>
  {
    Error_Handler();
 80016a8:	f7ff fd30 	bl	800110c <Error_Handler>
  }

}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200002b0 	.word	0x200002b0
 80016b8:	40000c00 	.word	0x40000c00

080016bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_TIM_Base_MspInit+0x70>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d10e      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80016ea:	e01a      	b.n	8001722 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM5)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_TIM_Base_MspInit+0x78>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d115      	bne.n	8001722 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_TIM_Base_MspInit+0x74>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2100      	movs	r1, #0
 8001716:	2032      	movs	r0, #50	; 0x32
 8001718:	f000 fd10 	bl	800213c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800171c:	2032      	movs	r0, #50	; 0x32
 800171e:	f000 fd29 	bl	8002174 <HAL_NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40010000 	.word	0x40010000
 8001730:	40023800 	.word	0x40023800
 8001734:	40000c00 	.word	0x40000c00

08001738 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART1_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART1_UART_Init+0x4c>)
 8001770:	f004 fa61 	bl	8005c36 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f7ff fcc7 	bl	800110c <Error_Handler>
  }

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000330 	.word	0x20000330
 8001788:	40011000 	.word	0x40011000

0800178c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_UART_MspInit+0x94>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d134      	bne.n	8001818 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a1b      	ldr	r2, [pc, #108]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017b8:	f043 0310 	orr.w	r3, r3, #16
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f003 0310 	and.w	r3, r3, #16
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_UART_MspInit+0x98>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f8:	2307      	movs	r3, #7
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4809      	ldr	r0, [pc, #36]	; (8001828 <HAL_UART_MspInit+0x9c>)
 8001804:	f000 fef0 	bl	80025e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	2100      	movs	r1, #0
 800180c:	2025      	movs	r0, #37	; 0x25
 800180e:	f000 fc95 	bl	800213c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001812:	2025      	movs	r0, #37	; 0x25
 8001814:	f000 fcae 	bl	8002174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40011000 	.word	0x40011000
 8001824:	40023800 	.word	0x40023800
 8001828:	40020000 	.word	0x40020000

0800182c <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001832:	4a13      	ldr	r2, [pc, #76]	; (8001880 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001834:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001838:	220c      	movs	r2, #12
 800183a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800183e:	2201      	movs	r2, #1
 8001840:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800184a:	2202      	movs	r2, #2
 800184c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001868:	f001 f881 	bl	800296e <HAL_HCD_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001872:	f7ff fc4b 	bl	800110c <Error_Handler>
  }

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000370 	.word	0x20000370
 8001880:	40040000 	.word	0x40040000

08001884 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a24      	ldr	r2, [pc, #144]	; (8001934 <HAL_HCD_MspInit+0xb0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d141      	bne.n	800192a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80018c2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80018c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80018d4:	230c      	movs	r3, #12
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	4619      	mov	r1, r3
 80018de:	4817      	ldr	r0, [pc, #92]	; (800193c <HAL_HCD_MspInit+0xb8>)
 80018e0:	f000 fe82 	bl	80025e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <HAL_HCD_MspInit+0xb8>)
 80018fa:	f000 fe75 	bl	80025e8 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a0c      	ldr	r2, [pc, #48]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 8001908:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <HAL_HCD_MspInit+0xb4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2100      	movs	r1, #0
 800191e:	204d      	movs	r0, #77	; 0x4d
 8001920:	f000 fc0c 	bl	800213c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001924:	204d      	movs	r0, #77	; 0x4d
 8001926:	f000 fc25 	bl	8002174 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40040000 	.word	0x40040000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020400 	.word	0x40020400

08001940 <init_shell>:
 */

#include "shell/shell.h"

int	init_shell()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	func_start = NULL;
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <init_shell+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]

	/*Function `help` */
	add_sh_fun("help", sh_help, "Lists all available functions along with their descriptions.");
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <init_shell+0x44>)
 800194c:	490e      	ldr	r1, [pc, #56]	; (8001988 <init_shell+0x48>)
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <init_shell+0x4c>)
 8001950:	f000 f862 	bl	8001a18 <add_sh_fun>
	add_man_desc("help", "HELP:\r\n\t- help :\t\t\tList functions\r\n\t- help [FUNC] : \tShow man entry for func\r\n");
 8001954:	490e      	ldr	r1, [pc, #56]	; (8001990 <init_shell+0x50>)
 8001956:	480d      	ldr	r0, [pc, #52]	; (800198c <init_shell+0x4c>)
 8001958:	f000 f82e 	bl	80019b8 <add_man_desc>

	add_sh_fun("ascii", sh_print_char, "Shows ascii code of characters passed in argument.");
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <init_shell+0x54>)
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <init_shell+0x58>)
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <init_shell+0x5c>)
 8001962:	f000 f859 	bl	8001a18 <add_sh_fun>

	add_sh_fun("args", sh_print_args, "Prints the arguments of the function.");
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <init_shell+0x60>)
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <init_shell+0x64>)
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <init_shell+0x68>)
 800196c:	f000 f854 	bl	8001a18 <add_sh_fun>

	add_sh_fun("exit", sh_exit, "exits the shell");
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <init_shell+0x6c>)
 8001972:	490f      	ldr	r1, [pc, #60]	; (80019b0 <init_shell+0x70>)
 8001974:	480f      	ldr	r0, [pc, #60]	; (80019b4 <init_shell+0x74>)
 8001976:	f000 f84f 	bl	8001a18 <add_sh_fun>

	return (0);
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000210 	.word	0x20000210
 8001984:	080083b0 	.word	0x080083b0
 8001988:	08001d41 	.word	0x08001d41
 800198c:	080083f0 	.word	0x080083f0
 8001990:	080083f8 	.word	0x080083f8
 8001994:	08008448 	.word	0x08008448
 8001998:	08001e0d 	.word	0x08001e0d
 800199c:	0800847c 	.word	0x0800847c
 80019a0:	08008484 	.word	0x08008484
 80019a4:	08001e71 	.word	0x08001e71
 80019a8:	080084ac 	.word	0x080084ac
 80019ac:	080084b4 	.word	0x080084b4
 80019b0:	08001df5 	.word	0x08001df5
 80019b4:	080084c4 	.word	0x080084c4

080019b8 <add_man_desc>:
 */

#include "shell/shell.h"

int add_man_desc(const char *name, const char *man_desc)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	t_sh_func fun;
	for (fun = func_start; fun && strcmp(fun->name, name) != 0; fun = fun->next);
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <add_man_desc+0x58>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e002      	b.n	80019d0 <add_man_desc+0x18>
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <add_man_desc+0x30>
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fc07 	bl	80001f0 <strcmp>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <add_man_desc+0x12>
	if (fun)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d007      	beq.n	80019fe <add_man_desc+0x46>
		strlcpy(fun->man_desc, man_desc, MAN_FT_SIZE);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	330c      	adds	r3, #12
 80019f2:	2264      	movs	r2, #100	; 0x64
 80019f4:	6839      	ldr	r1, [r7, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f005 fd00 	bl	80073fc <strlcpy>
 80019fc:	e003      	b.n	8001a06 <add_man_desc+0x4e>
	else
		printf("adding man_desc: No such function '%s'\r\n", name);
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <add_man_desc+0x5c>)
 8001a02:	f005 fc4f 	bl	80072a4 <iprintf>
	return (0);
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000210 	.word	0x20000210
 8001a14:	080084cc 	.word	0x080084cc

08001a18 <add_sh_fun>:

int	add_sh_fun(char *name, int (*ptr_fun)(int argc, char **argv), char *description)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
	t_sh_func new;
	new = (t_sh_func)malloc(sizeof(*new));
 8001a24:	2074      	movs	r0, #116	; 0x74
 8001a26:	f005 fb85 	bl	8007134 <malloc>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	613b      	str	r3, [r7, #16]
	if(new == NULL)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d106      	bne.n	8001a42 <add_sh_fun+0x2a>
	{
		printf("MEMORY PROBLEM ADDING %s FUNCTION (malloc failed) Said function will not be available\r\n", name);
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	481b      	ldr	r0, [pc, #108]	; (8001aa4 <add_sh_fun+0x8c>)
 8001a38:	f005 fc34 	bl	80072a4 <iprintf>
		return (-1);
 8001a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a40:	e02c      	b.n	8001a9c <add_sh_fun+0x84>
	}
	t_sh_func fun;
	for (fun = func_start; fun && fun->next; fun = fun->next);
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <add_sh_fun+0x90>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e002      	b.n	8001a50 <add_sh_fun+0x38>
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <add_sh_fun+0x46>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f5      	bne.n	8001a4a <add_sh_fun+0x32>
	if (func_start)
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <add_sh_fun+0x90>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <add_sh_fun+0x56>
		fun->next = new;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	671a      	str	r2, [r3, #112]	; 0x70
 8001a6c:	e002      	b.n	8001a74 <add_sh_fun+0x5c>
	else
		func_start = new;
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <add_sh_fun+0x90>)
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	6013      	str	r3, [r2, #0]
	new->name = name;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	601a      	str	r2, [r3, #0]
	new->func = ptr_fun;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	605a      	str	r2, [r3, #4]
	new->description = description;
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	609a      	str	r2, [r3, #8]
	sprintf(new->man_desc, "There is no entry for %s.\r\n", name);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <add_sh_fun+0x94>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f005 fc94 	bl	80073bc <siprintf>
	new->next = NULL;
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	2200      	movs	r2, #0
 8001a98:	671a      	str	r2, [r3, #112]	; 0x70
	return (0);
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	080084f8 	.word	0x080084f8
 8001aa8:	20000210 	.word	0x20000210
 8001aac:	08008550 	.word	0x08008550

08001ab0 <exec_shell_fun>:

int	exec_shell_fun(char *buf)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08c      	sub	sp, #48	; 0x30
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	char	*argv[MAX_ARG_COUNT];
	int	argc = 1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62fb      	str	r3, [r7, #44]	; 0x2c

	argv[0] = buf;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	60bb      	str	r3, [r7, #8]
	if (!*buf)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <exec_shell_fun+0x1c>
		return (0);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e055      	b.n	8001b78 <exec_shell_fun+0xc8>
	uart_write("\r\n", 2);
 8001acc:	2102      	movs	r1, #2
 8001ace:	482c      	ldr	r0, [pc, #176]	; (8001b80 <exec_shell_fun+0xd0>)
 8001ad0:	f000 f8ee 	bl	8001cb0 <uart_write>
	while (*buf && argc < MAX_ARG_COUNT)
 8001ad4:	e026      	b.n	8001b24 <exec_shell_fun+0x74>
	{
		if (is_whitespace(*buf))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f916 	bl	8001d0c <is_whitespace>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01b      	beq.n	8001b1e <exec_shell_fun+0x6e>
		{
			*(buf++) = '\0';
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1c5a      	adds	r2, r3, #1
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
			while (is_whitespace(*buf))
 8001af0:	e002      	b.n	8001af8 <exec_shell_fun+0x48>
				buf++;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3301      	adds	r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
			while (is_whitespace(*buf))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f905 	bl	8001d0c <is_whitespace>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f4      	bne.n	8001af2 <exec_shell_fun+0x42>
			argv[argc] = buf;
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b10:	4413      	add	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	f843 2c28 	str.w	r2, [r3, #-40]
			argc++;
 8001b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		buf++;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3301      	adds	r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
	while (*buf && argc < MAX_ARG_COUNT)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <exec_shell_fun+0x82>
 8001b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2e:	2b07      	cmp	r3, #7
 8001b30:	ddd1      	ble.n	8001ad6 <exec_shell_fun+0x26>
	}
	for (t_sh_func fun = func_start; fun; fun = fun->next)
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <exec_shell_fun+0xd4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b38:	e015      	b.n	8001b66 <exec_shell_fun+0xb6>
	{
		if (strcmp(argv[0], fun->name) == 0)
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4619      	mov	r1, r3
 8001b42:	4610      	mov	r0, r2
 8001b44:	f7fe fb54 	bl	80001f0 <strcmp>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <exec_shell_fun+0xb0>
		{
			return (fun->func(argc, argv));
 8001b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f107 0208 	add.w	r2, r7, #8
 8001b56:	4611      	mov	r1, r2
 8001b58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001b5a:	4798      	blx	r3
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	e00b      	b.n	8001b78 <exec_shell_fun+0xc8>
	for (t_sh_func fun = func_start; fun; fun = fun->next)
 8001b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1e6      	bne.n	8001b3a <exec_shell_fun+0x8a>

		}
	}
	printf ("No command named '%s'.\r\n", argv[0]);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <exec_shell_fun+0xd8>)
 8001b72:	f005 fb97 	bl	80072a4 <iprintf>
	return (0);
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	0800856c 	.word	0x0800856c
 8001b84:	20000210 	.word	0x20000210
 8001b88:	08008570 	.word	0x08008570

08001b8c <shell_loop>:

int	shell_loop()
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b098      	sub	sp, #96	; 0x60
 8001b90:	af00      	add	r7, sp, #0
	char	buf[75];
	char 	c;
	int	shell_running, error_code;
	int pos;

	printf("\r\n\r\n========= Awkward Shell v0.0.0.0.0.0... =========\r\n\r\n");
 8001b92:	4841      	ldr	r0, [pc, #260]	; (8001c98 <shell_loop+0x10c>)
 8001b94:	f005 fbfa 	bl	800738c <puts>
	shell_running = 1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	65bb      	str	r3, [r7, #88]	; 0x58
	while (shell_running)
 8001b9c:	e073      	b.n	8001c86 <shell_loop+0xfa>
	{
		uart_write("\r\n$> ", 5);
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	483e      	ldr	r0, [pc, #248]	; (8001c9c <shell_loop+0x110>)
 8001ba2:	f000 f885 	bl	8001cb0 <uart_write>
		pos = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
		while(1)
		{
			c = uart_read();
 8001baa:	f000 f895 	bl	8001cd8 <uart_read>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	71fb      	strb	r3, [r7, #7]
			if (c == '\b')
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d10f      	bne.n	8001bda <shell_loop+0x4e>
			{
				if (pos > 0)
 8001bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	dd07      	ble.n	8001bd0 <shell_loop+0x44>
				{
					uart_write("\b \b", 3);
 8001bc0:	2103      	movs	r1, #3
 8001bc2:	4837      	ldr	r0, [pc, #220]	; (8001ca0 <shell_loop+0x114>)
 8001bc4:	f000 f874 	bl	8001cb0 <uart_write>
					pos--;
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bce:	e7ec      	b.n	8001baa <shell_loop+0x1e>
				}
				else
				{
					uart_write("\a", 1);
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	4834      	ldr	r0, [pc, #208]	; (8001ca4 <shell_loop+0x118>)
 8001bd4:	f000 f86c 	bl	8001cb0 <uart_write>
 8001bd8:	e7e7      	b.n	8001baa <shell_loop+0x1e>
				}
			}
			else if (c == '\r')
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	2b0d      	cmp	r3, #13
 8001bde:	d10d      	bne.n	8001bfc <shell_loop+0x70>
			{
				buf[pos++] = '\0';
 8001be0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001be6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001bea:	4413      	add	r3, r2
 8001bec:	2200      	movs	r2, #0
 8001bee:	f803 2c58 	strb.w	r2, [r3, #-88]
				break ;
 8001bf2:	bf00      	nop
					uart_write("\a", 1);
			}
			else
				uart_write("\a",1);
		}
		if (pos != 0)
 8001bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d045      	beq.n	8001c86 <shell_loop+0xfa>
 8001bfa:	e029      	b.n	8001c50 <shell_loop+0xc4>
			else if (c != 127 && (is_whitespace(c) || c >= 32))
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001c00:	d021      	beq.n	8001c46 <shell_loop+0xba>
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 f881 	bl	8001d0c <is_whitespace>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <shell_loop+0x8a>
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b1f      	cmp	r3, #31
 8001c14:	d917      	bls.n	8001c46 <shell_loop+0xba>
				if (pos < sizeof(buf) - 1)
 8001c16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c18:	2b49      	cmp	r3, #73	; 0x49
 8001c1a:	d80f      	bhi.n	8001c3c <shell_loop+0xb0>
					uart_write(&c, 1);
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f845 	bl	8001cb0 <uart_write>
					buf[pos] = c;
 8001c26:	79f9      	ldrb	r1, [r7, #7]
 8001c28:	f107 0208 	add.w	r2, r7, #8
 8001c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c2e:	4413      	add	r3, r2
 8001c30:	460a      	mov	r2, r1
 8001c32:	701a      	strb	r2, [r3, #0]
					pos++;
 8001c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c36:	3301      	adds	r3, #1
 8001c38:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (pos < sizeof(buf) - 1)
 8001c3a:	e008      	b.n	8001c4e <shell_loop+0xc2>
					uart_write("\a", 1);
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4819      	ldr	r0, [pc, #100]	; (8001ca4 <shell_loop+0x118>)
 8001c40:	f000 f836 	bl	8001cb0 <uart_write>
				if (pos < sizeof(buf) - 1)
 8001c44:	e003      	b.n	8001c4e <shell_loop+0xc2>
				uart_write("\a",1);
 8001c46:	2101      	movs	r1, #1
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <shell_loop+0x118>)
 8001c4a:	f000 f831 	bl	8001cb0 <uart_write>
			c = uart_read();
 8001c4e:	e7ac      	b.n	8001baa <shell_loop+0x1e>
		{
			if ((error_code = exec_shell_fun(buf)) < 0)
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff2b 	bl	8001ab0 <exec_shell_fun>
 8001c5a:	6578      	str	r0, [r7, #84]	; 0x54
 8001c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da06      	bge.n	8001c70 <shell_loop+0xe4>
				printf("Error running %s. Error code: %d\r\n", buf, error_code);
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c68:	4619      	mov	r1, r3
 8001c6a:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <shell_loop+0x11c>)
 8001c6c:	f005 fb1a 	bl	80072a4 <iprintf>
			if (error_code == 1)
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d107      	bne.n	8001c86 <shell_loop+0xfa>
			{
				printf("Exiting shell...\r\n");
 8001c76:	480d      	ldr	r0, [pc, #52]	; (8001cac <shell_loop+0x120>)
 8001c78:	f005 fb88 	bl	800738c <puts>
				shell_running = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	65bb      	str	r3, [r7, #88]	; 0x58
				return (-1);
 8001c80:	f04f 33ff 	mov.w	r3, #4294967295
 8001c84:	e003      	b.n	8001c8e <shell_loop+0x102>
	while (shell_running)
 8001c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d188      	bne.n	8001b9e <shell_loop+0x12>
			}

		}
	}
	return (0);
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3760      	adds	r7, #96	; 0x60
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800858c 	.word	0x0800858c
 8001c9c:	080085c8 	.word	0x080085c8
 8001ca0:	080085d0 	.word	0x080085d0
 8001ca4:	080085d4 	.word	0x080085d4
 8001ca8:	080085d8 	.word	0x080085d8
 8001cac:	080085fc 	.word	0x080085fc

08001cb0 <uart_write>:
#include "usart.h"
#include "gpio.h"
#include "shell/shell.h"

int uart_write(char * s, uint16_t size)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, 0xFFFF);
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <uart_write+0x24>)
 8001cc6:	f004 f803 	bl	8005cd0 <HAL_UART_Transmit>
 	return size;
 8001cca:	887b      	ldrh	r3, [r7, #2]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20000330 	.word	0x20000330

08001cd8 <uart_read>:

int	uart_read()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8001cde:	1dfb      	adds	r3, r7, #7
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <uart_read+0x2c>)
 8001ce6:	f004 f88c 	bl	8005e02 <HAL_UART_Receive_IT>
	while (!dataReady);
 8001cea:	bf00      	nop
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <uart_read+0x30>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0fb      	beq.n	8001cec <uart_read+0x14>
	dataReady = 0;
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <uart_read+0x30>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
	return (c);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	20000330 	.word	0x20000330
 8001d08:	20000214 	.word	0x20000214

08001d0c <is_whitespace>:

int	is_whitespace(char c)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	return (c == '\f' || c == '\n' ||
			c == '\r' || c == ' ');
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b0c      	cmp	r3, #12
 8001d1a:	d008      	beq.n	8001d2e <is_whitespace+0x22>
	return (c == '\f' || c == '\n' ||
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d005      	beq.n	8001d2e <is_whitespace+0x22>
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b0d      	cmp	r3, #13
 8001d26:	d002      	beq.n	8001d2e <is_whitespace+0x22>
			c == '\r' || c == ' ');
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d101      	bne.n	8001d32 <is_whitespace+0x26>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <is_whitespace+0x28>
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <sh_help>:

#include <stdio.h>
#include "shell/shell.h"

int	sh_help(int argc, char **argv)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
	uart_write("\r\n", 2);
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4823      	ldr	r0, [pc, #140]	; (8001ddc <sh_help+0x9c>)
 8001d4e:	f7ff ffaf 	bl	8001cb0 <uart_write>
	if (argc == 1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d115      	bne.n	8001d84 <sh_help+0x44>
	{
		for (t_sh_func fun = func_start; fun != NULL; fun = fun->next)
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <sh_help+0xa0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	e00a      	b.n	8001d76 <sh_help+0x36>
			printf("- %s:  \t%s\r\n", fun->name, fun->description);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6819      	ldr	r1, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	481e      	ldr	r0, [pc, #120]	; (8001de4 <sh_help+0xa4>)
 8001d6c:	f005 fa9a 	bl	80072a4 <iprintf>
		for (t_sh_func fun = func_start; fun != NULL; fun = fun->next)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f1      	bne.n	8001d60 <sh_help+0x20>
		printf("\r\n\r\nFor more information about a command type `help foo`\r\n");
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <sh_help+0xa8>)
 8001d7e:	f005 fb05 	bl	800738c <puts>
 8001d82:	e026      	b.n	8001dd2 <sh_help+0x92>
	}
	else
	{
		t_sh_func fun;
		for (fun = func_start; fun && strcmp(fun->name, argv[1]) != 0; fun = fun->next);
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <sh_help+0xa0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	e002      	b.n	8001d92 <sh_help+0x52>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00b      	beq.n	8001db0 <sh_help+0x70>
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4619      	mov	r1, r3
 8001da4:	4610      	mov	r0, r2
 8001da6:	f7fe fa23 	bl	80001f0 <strcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ed      	bne.n	8001d8c <sh_help+0x4c>
		if (fun != NULL)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <sh_help+0x84>
			printf("%s\r\n", fun->man_desc);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	330c      	adds	r3, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <sh_help+0xac>)
 8001dbe:	f005 fa71 	bl	80072a4 <iprintf>
 8001dc2:	e006      	b.n	8001dd2 <sh_help+0x92>
		else
			printf("help: There is no such function '%s'\r\n", argv[1]);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4808      	ldr	r0, [pc, #32]	; (8001df0 <sh_help+0xb0>)
 8001dce:	f005 fa69 	bl	80072a4 <iprintf>
	}
	return (0);
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	08008610 	.word	0x08008610
 8001de0:	20000210 	.word	0x20000210
 8001de4:	08008614 	.word	0x08008614
 8001de8:	08008624 	.word	0x08008624
 8001dec:	08008660 	.word	0x08008660
 8001df0:	08008668 	.word	0x08008668

08001df4 <sh_exit>:

int sh_exit(int argc, char **argv)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
	return (1);
 8001dfe:	2301      	movs	r3, #1
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <sh_print_char>:
 */

#include <stdio.h>

int	sh_print_char(int argc, char **argv)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
	int i;

	if (argc == 1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <sh_print_char+0x1a>
	{
		printf("Put some character as an argument\r\n");
 8001e1c:	4812      	ldr	r0, [pc, #72]	; (8001e68 <sh_print_char+0x5c>)
 8001e1e:	f005 fab5 	bl	800738c <puts>
		return (0);
 8001e22:	2300      	movs	r3, #0
 8001e24:	e01b      	b.n	8001e5e <sh_print_char+0x52>
	}
	i = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	60fb      	str	r3, [r7, #12]
	while (argc > i)
 8001e2a:	e013      	b.n	8001e54 <sh_print_char+0x48>
	{
		printf("character '%c' ascii code: %d\r\n", argv[i][0], argv[i][0]);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	4413      	add	r3, r2
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4808      	ldr	r0, [pc, #32]	; (8001e6c <sh_print_char+0x60>)
 8001e4a:	f005 fa2b 	bl	80072a4 <iprintf>
		i++;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3301      	adds	r3, #1
 8001e52:	60fb      	str	r3, [r7, #12]
	while (argc > i)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dce7      	bgt.n	8001e2c <sh_print_char+0x20>
	}
	return (0);
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08008690 	.word	0x08008690
 8001e6c:	080086b4 	.word	0x080086b4

08001e70 <sh_print_args>:

int	sh_print_args(int argc, char **argv)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	int i = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
	while(i < argc)
 8001e7e:	e00c      	b.n	8001e9a <sh_print_args+0x2a>
	{
		printf("argv[%d]: %s\r\n", i, argv[i]);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	4413      	add	r3, r2
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4807      	ldr	r0, [pc, #28]	; (8001eac <sh_print_args+0x3c>)
 8001e90:	f005 fa08 	bl	80072a4 <iprintf>
		i++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3301      	adds	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
	while(i < argc)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbee      	blt.n	8001e80 <sh_print_args+0x10>
	}
	return (0);
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	080086d4 	.word	0x080086d4

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eb6:	e003      	b.n	8001ec0 <LoopCopyDataInit>

08001eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ebe:	3104      	adds	r1, #4

08001ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec8:	d3f6      	bcc.n	8001eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ecc:	e002      	b.n	8001ed4 <LoopFillZerobss>

08001ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed0:	f842 3b04 	str.w	r3, [r2], #4

08001ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed8:	d3f9      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eda:	f7ff fb1d 	bl	8001518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f005 f905 	bl	80070ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7ff f831 	bl	8000f48 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ee8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001eec:	080087a4 	.word	0x080087a4
  ldr  r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef4:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001ef8:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8001efc:	2000063c 	.word	0x2000063c

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f8fa 	bl	8002126 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff f998 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff f96e 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	20000634 	.word	0x20000634

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000634 	.word	0x20000634

08001f88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f90:	f7ff ffee 	bl	8001f70 <HAL_GetTick>
 8001f94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa0:	d005      	beq.n	8001fae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <HAL_Delay+0x40>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4413      	add	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fae:	bf00      	nop
 8001fb0:	f7ff ffde 	bl	8001f70 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d8f7      	bhi.n	8001fb0 <HAL_Delay+0x28>
  {
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000004 	.word	0x20000004

08001fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffe:	4a04      	ldr	r2, [pc, #16]	; (8002010 <__NVIC_SetPriorityGrouping+0x44>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	60d3      	str	r3, [r2, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <__NVIC_GetPriorityGrouping+0x18>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	f003 0307 	and.w	r3, r3, #7
}
 8002022:	4618      	mov	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	2b00      	cmp	r3, #0
 8002040:	db0b      	blt.n	800205a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	f003 021f 	and.w	r2, r3, #31
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <__NVIC_EnableIRQ+0x38>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2001      	movs	r0, #1
 8002052:	fa00 f202 	lsl.w	r2, r0, r2
 8002056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	; (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	; (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	; 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ff4c 	bl	8001fcc <__NVIC_SetPriorityGrouping>
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214e:	f7ff ff61 	bl	8002014 <__NVIC_GetPriorityGrouping>
 8002152:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	6978      	ldr	r0, [r7, #20]
 800215a:	f7ff ffb1 	bl	80020c0 <NVIC_EncodePriority>
 800215e:	4602      	mov	r2, r0
 8002160:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff80 	bl	800206c <__NVIC_SetPriority>
}
 800216c:	bf00      	nop
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff ff54 	bl	8002030 <__NVIC_EnableIRQ>
}
 8002188:	bf00      	nop
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e011      	b.n	80021c6 <HAL_CRC_Init+0x36>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	795b      	ldrb	r3, [r3, #5]
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d105      	bne.n	80021b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7fe fa10 	bl	80005d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	715a      	strb	r2, [r3, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d004      	beq.n	80021ec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2280      	movs	r2, #128	; 0x80
 80021e6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e00c      	b.n	8002206 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2205      	movs	r2, #5
 80021f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0201 	bic.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e03b      	b.n	800229c <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7fe fa21 	bl	8000680 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2202      	movs	r2, #2
 8002242:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002262:	f023 0107 	bic.w	r1, r3, #7
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800227c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	68d1      	ldr	r1, [r2, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	430b      	orrs	r3, r1
 800228a:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3708      	adds	r7, #8
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d026      	beq.n	8002314 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d021      	beq.n	8002314 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022de:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2201      	movs	r2, #1
 80022f2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2204      	movs	r2, #4
 80022f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d026      	beq.n	800236c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d021      	beq.n	800236c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002336:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2220      	movs	r2, #32
 800233e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2204      	movs	r2, #4
 8002350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d026      	beq.n	80023c4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237c:	2b00      	cmp	r3, #0
 800237e:	d021      	beq.n	80023c4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2208      	movs	r2, #8
 8002396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	f043 0204 	orr.w	r2, r3, #4
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2204      	movs	r2, #4
 80023a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d013      	beq.n	80023f6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2204      	movs	r2, #4
 80023ee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f853 	bl	800249c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d024      	beq.n	800244a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002406:	2b00      	cmp	r3, #0
 8002408:	d01f      	beq.n	800244a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002418:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01f      	beq.n	8002494 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800246c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2210      	movs	r2, #16
 8002474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f80e 	bl	80024b0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002494:	bf00      	nop
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d101      	bne.n	80024e4 <HAL_DMA2D_ConfigLayer+0x20>
 80024e0:	2302      	movs	r3, #2
 80024e2:	e079      	b.n	80025d8 <HAL_DMA2D_ConfigLayer+0x114>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2202      	movs	r2, #2
 80024f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	3318      	adds	r3, #24
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800250e:	4b35      	ldr	r3, [pc, #212]	; (80025e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8002510:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b0a      	cmp	r3, #10
 8002518:	d003      	beq.n	8002522 <HAL_DMA2D_ConfigLayer+0x5e>
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b09      	cmp	r3, #9
 8002520:	d107      	bne.n	8002532 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	e005      	b.n	800253e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	061b      	lsls	r3, r3, #24
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d120      	bne.n	8002586 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	ea02 0103 	and.w	r1, r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	430a      	orrs	r2, r1
 800255a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b0a      	cmp	r3, #10
 800256c:	d003      	beq.n	8002576 <HAL_DMA2D_ConfigLayer+0xb2>
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b09      	cmp	r3, #9
 8002574:	d127      	bne.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
 8002584:	e01f      	b.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43db      	mvns	r3, r3
 8002590:	ea02 0103 	and.w	r1, r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	430a      	orrs	r2, r1
 800259c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b0a      	cmp	r3, #10
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b09      	cmp	r3, #9
 80025b6:	d106      	bne.n	80025c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025c4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	371c      	adds	r7, #28
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	ff03000f 	.word	0xff03000f

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e177      	b.n	80028f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002604:	2201      	movs	r2, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	429a      	cmp	r2, r3
 800261e:	f040 8166 	bne.w	80028ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x4a>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b12      	cmp	r3, #18
 8002630:	d123      	bne.n	800267a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	08da      	lsrs	r2, r3, #3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	3208      	adds	r2, #8
 800263a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	220f      	movs	r2, #15
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	08da      	lsrs	r2, r3, #3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3208      	adds	r2, #8
 8002674:	69b9      	ldr	r1, [r7, #24]
 8002676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d00b      	beq.n	80026ce <HAL_GPIO_Init+0xe6>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d007      	beq.n	80026ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c2:	2b11      	cmp	r3, #17
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b12      	cmp	r3, #18
 80026cc:	d130      	bne.n	8002730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80c0 	beq.w	80028ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a64      	ldr	r2, [pc, #400]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_GPIO_Init+0x320>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278a:	4a60      	ldr	r2, [pc, #384]	; (800290c <HAL_GPIO_Init+0x324>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a57      	ldr	r2, [pc, #348]	; (8002910 <HAL_GPIO_Init+0x328>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d037      	beq.n	8002826 <HAL_GPIO_Init+0x23e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a56      	ldr	r2, [pc, #344]	; (8002914 <HAL_GPIO_Init+0x32c>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_GPIO_Init+0x23a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a55      	ldr	r2, [pc, #340]	; (8002918 <HAL_GPIO_Init+0x330>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x236>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_GPIO_Init+0x334>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x232>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_GPIO_Init+0x338>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x33c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x22a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a51      	ldr	r2, [pc, #324]	; (8002928 <HAL_GPIO_Init+0x340>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a50      	ldr	r2, [pc, #320]	; (800292c <HAL_GPIO_Init+0x344>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4f      	ldr	r2, [pc, #316]	; (8002930 <HAL_GPIO_Init+0x348>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4e      	ldr	r2, [pc, #312]	; (8002934 <HAL_GPIO_Init+0x34c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x21a>
 80027fe:	2309      	movs	r3, #9
 8002800:	e012      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002802:	230a      	movs	r3, #10
 8002804:	e010      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002806:	2308      	movs	r3, #8
 8002808:	e00e      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280a:	2307      	movs	r3, #7
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280e:	2306      	movs	r3, #6
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4934      	ldr	r1, [pc, #208]	; (800290c <HAL_GPIO_Init+0x324>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002846:	4b3c      	ldr	r3, [pc, #240]	; (8002938 <HAL_GPIO_Init+0x350>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800286a:	4a33      	ldr	r2, [pc, #204]	; (8002938 <HAL_GPIO_Init+0x350>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <HAL_GPIO_Init+0x350>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002894:	4a28      	ldr	r2, [pc, #160]	; (8002938 <HAL_GPIO_Init+0x350>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289a:	4b27      	ldr	r3, [pc, #156]	; (8002938 <HAL_GPIO_Init+0x350>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028be:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <HAL_GPIO_Init+0x350>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c4:	4b1c      	ldr	r3, [pc, #112]	; (8002938 <HAL_GPIO_Init+0x350>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028e8:	4a13      	ldr	r2, [pc, #76]	; (8002938 <HAL_GPIO_Init+0x350>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae84 	bls.w	8002604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	3724      	adds	r7, #36	; 0x24
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	40023800 	.word	0x40023800
 800290c:	40013800 	.word	0x40013800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400
 8002918:	40020800 	.word	0x40020800
 800291c:	40020c00 	.word	0x40020c00
 8002920:	40021000 	.word	0x40021000
 8002924:	40021400 	.word	0x40021400
 8002928:	40021800 	.word	0x40021800
 800292c:	40021c00 	.word	0x40021c00
 8002930:	40022000 	.word	0x40022000
 8002934:	40022400 	.word	0x40022400
 8002938:	40013c00 	.word	0x40013c00

0800293c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
 8002948:	4613      	mov	r3, r2
 800294a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800294c:	787b      	ldrb	r3, [r7, #1]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002952:	887a      	ldrh	r2, [r7, #2]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002958:	e003      	b.n	8002962 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	041a      	lsls	r2, r3, #16
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	619a      	str	r2, [r3, #24]
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800296e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002970:	b08f      	sub	sp, #60	; 0x3c
 8002972:	af0a      	add	r7, sp, #40	; 0x28
 8002974:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e054      	b.n	8002a2a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fe ff72 	bl	8001884 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 f84d 	bl	8006a5e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	603b      	str	r3, [r7, #0]
 80029ca:	687e      	ldr	r6, [r7, #4]
 80029cc:	466d      	mov	r5, sp
 80029ce:	f106 0410 	add.w	r4, r6, #16
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029de:	e885 0003 	stmia.w	r5, {r0, r1}
 80029e2:	1d33      	adds	r3, r6, #4
 80029e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e6:	6838      	ldr	r0, [r7, #0]
 80029e8:	f003 ffd8 	bl	800699c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 f844 	bl	8006a80 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	603b      	str	r3, [r7, #0]
 80029fe:	687e      	ldr	r6, [r7, #4]
 8002a00:	466d      	mov	r5, sp
 8002a02:	f106 0410 	add.w	r4, r6, #16
 8002a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a12:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a16:	1d33      	adds	r3, r6, #4
 8002a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a1a:	6838      	ldr	r0, [r7, #0]
 8002a1c:	f004 f920 	bl	8006c60 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a32 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b086      	sub	sp, #24
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f004 f8c7 	bl	8006bdc <USB_GetMode>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f040 80f1 	bne.w	8002c38 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f004 f8ab 	bl	8006bb6 <USB_ReadInterrupts>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80e7 	beq.w	8002c36 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 f8a2 	bl	8006bb6 <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a7c:	d104      	bne.n	8002a88 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 f892 	bl	8006bb6 <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9c:	d104      	bne.n	8002aa8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 f882 	bl	8006bb6 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002abc:	d104      	bne.n	8002ac8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 f872 	bl	8006bb6 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d103      	bne.n	8002ae4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 f864 	bl	8006bb6 <USB_ReadInterrupts>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002af4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002af8:	d117      	bne.n	8002b2a <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002b08:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b0c:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8a9 	bl	8002c66 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f004 f95c 	bl	8006dd8 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 f841 	bl	8006bb6 <USB_ReadInterrupts>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b3e:	d102      	bne.n	8002b46 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f001 f875 	bl	8003c30 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 f833 	bl	8006bb6 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d106      	bne.n	8002b68 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f86f 	bl	8002c3e <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2208      	movs	r2, #8
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f004 f822 	bl	8006bb6 <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b7c:	d138      	bne.n	8002bf0 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f99b 	bl	8006ebe <USB_HC_ReadInterrupt>
 8002b88:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e025      	b.n	8002bdc <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d018      	beq.n	8002bd6 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bba:	d106      	bne.n	8002bca <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f87b 	bl	8002cbe <HCD_HC_IN_IRQHandler>
 8002bc8:	e005      	b.n	8002bd6 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4619      	mov	r1, r3
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fc0b 	bl	80033ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3d4      	bcc.n	8002b90 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 ffde 	bl	8006bb6 <USB_ReadInterrupts>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d101      	bne.n	8002c08 <HAL_HCD_IRQHandler+0x1d6>
 8002c04:	2301      	movs	r3, #1
 8002c06:	e000      	b.n	8002c0a <HAL_HCD_IRQHandler+0x1d8>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d014      	beq.n	8002c38 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0210 	bic.w	r2, r2, #16
 8002c1c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 ff5a 	bl	8003ad8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0210 	orr.w	r2, r2, #16
 8002c32:	619a      	str	r2, [r3, #24]
 8002c34:	e000      	b.n	8002c38 <HAL_HCD_IRQHandler+0x206>
      return;
 8002c36:	bf00      	nop
    }
  }
}
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
 8002caa:	460b      	mov	r3, r1
 8002cac:	70fb      	strb	r3, [r7, #3]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b086      	sub	sp, #24
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d119      	bne.n	8002d22 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	0151      	lsls	r1, r2, #5
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	440a      	add	r2, r1
 8002d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	60d3      	str	r3, [r2, #12]
 8002d20:	e095      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d109      	bne.n	8002d4c <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d44:	461a      	mov	r2, r3
 8002d46:	2320      	movs	r3, #32
 8002d48:	6093      	str	r3, [r2, #8]
 8002d4a:	e080      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d134      	bne.n	8002dcc <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	0151      	lsls	r1, r2, #5
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	440a      	add	r2, r1
 8002d78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d7c:	f043 0302 	orr.w	r3, r3, #2
 8002d80:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	335d      	adds	r3, #93	; 0x5d
 8002d92:	2205      	movs	r2, #5
 8002d94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2310      	movs	r3, #16
 8002da6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	2308      	movs	r3, #8
 8002db8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f004 f88b 	bl	8006ee0 <USB_HC_Halt>
 8002dca:	e040      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	015a      	lsls	r2, r3, #5
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de2:	d134      	bne.n	8002e4e <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	0151      	lsls	r1, r2, #5
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	440a      	add	r2, r1
 8002dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f004 f866 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2310      	movs	r3, #16
 8002e24:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	335d      	adds	r3, #93	; 0x5d
 8002e36:	2208      	movs	r2, #8
 8002e38:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	015a      	lsls	r2, r3, #5
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e46:	461a      	mov	r2, r3
 8002e48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e4c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e64:	d122      	bne.n	8002eac <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	0151      	lsls	r1, r2, #5
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 f825 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002eaa:	e29b      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	f040 80c1 	bne.w	8003046 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	440b      	add	r3, r1
 8002eda:	3348      	adds	r3, #72	; 0x48
 8002edc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	0159      	lsls	r1, r3, #5
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	440b      	add	r3, r1
 8002ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002ef0:	1ad1      	subs	r1, r2, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4403      	add	r3, r0
 8002f00:	334c      	adds	r3, #76	; 0x4c
 8002f02:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	335d      	adds	r3, #93	; 0x5d
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	440b      	add	r3, r1
 8002f26:	3358      	adds	r3, #88	; 0x58
 8002f28:	2200      	movs	r2, #0
 8002f2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	440b      	add	r3, r1
 8002f4c:	333f      	adds	r3, #63	; 0x3f
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	440b      	add	r3, r1
 8002f62:	333f      	adds	r3, #63	; 0x3f
 8002f64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d121      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 ffa3 	bl	8006ee0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2310      	movs	r3, #16
 8002faa:	6093      	str	r3, [r2, #8]
 8002fac:	e034      	b.n	8003018 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	333f      	adds	r3, #63	; 0x3f
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d129      	bne.n	8003018 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	335c      	adds	r3, #92	; 0x5c
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b2d8      	uxtb	r0, r3
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	335c      	adds	r3, #92	; 0x5c
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	461a      	mov	r2, r3
 8003010:	4601      	mov	r1, r0
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fe45 	bl	8002ca2 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	3350      	adds	r3, #80	; 0x50
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	f083 0301 	eor.w	r3, r3, #1
 800302e:	b2d8      	uxtb	r0, r3
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	3350      	adds	r3, #80	; 0x50
 8003040:	4602      	mov	r2, r0
 8003042:	701a      	strb	r2, [r3, #0]
}
 8003044:	e1ce      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b02      	cmp	r3, #2
 800305a:	f040 80f1 	bne.w	8003240 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	0151      	lsls	r1, r2, #5
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	440a      	add	r2, r1
 8003074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003078:	f023 0302 	bic.w	r3, r3, #2
 800307c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	440b      	add	r3, r1
 800308c:	335d      	adds	r3, #93	; 0x5d
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10a      	bne.n	80030aa <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	440b      	add	r3, r1
 80030a2:	335c      	adds	r3, #92	; 0x5c
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	e0b0      	b.n	800320c <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	440b      	add	r3, r1
 80030b8:	335d      	adds	r3, #93	; 0x5d
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b05      	cmp	r3, #5
 80030be:	d10a      	bne.n	80030d6 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	440b      	add	r3, r1
 80030ce:	335c      	adds	r3, #92	; 0x5c
 80030d0:	2205      	movs	r2, #5
 80030d2:	701a      	strb	r2, [r3, #0]
 80030d4:	e09a      	b.n	800320c <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	440b      	add	r3, r1
 80030e4:	335d      	adds	r3, #93	; 0x5d
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b06      	cmp	r3, #6
 80030ea:	d00a      	beq.n	8003102 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	440b      	add	r3, r1
 80030fa:	335d      	adds	r3, #93	; 0x5d
 80030fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d156      	bne.n	80031b0 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4613      	mov	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	4413      	add	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	440b      	add	r3, r1
 8003110:	3358      	adds	r3, #88	; 0x58
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	1c59      	adds	r1, r3, #1
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4613      	mov	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4403      	add	r3, r0
 8003124:	3358      	adds	r3, #88	; 0x58
 8003126:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	440b      	add	r3, r1
 8003136:	3358      	adds	r3, #88	; 0x58
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d914      	bls.n	8003168 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	4613      	mov	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	440b      	add	r3, r1
 800314c:	3358      	adds	r3, #88	; 0x58
 800314e:	2200      	movs	r2, #0
 8003150:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	335c      	adds	r3, #92	; 0x5c
 8003162:	2204      	movs	r2, #4
 8003164:	701a      	strb	r2, [r3, #0]
 8003166:	e009      	b.n	800317c <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	335c      	adds	r3, #92	; 0x5c
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003192:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800319a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e02d      	b.n	800320c <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	440b      	add	r3, r1
 80031be:	335d      	adds	r3, #93	; 0x5d
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d122      	bne.n	800320c <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	335c      	adds	r3, #92	; 0x5c
 80031d6:	2202      	movs	r2, #2
 80031d8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	015a      	lsls	r2, r3, #5
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	4413      	add	r3, r2
 80031e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031f0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031f8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	461a      	mov	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	461a      	mov	r2, r3
 800321a:	2302      	movs	r3, #2
 800321c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	b2d8      	uxtb	r0, r3
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	440b      	add	r3, r1
 8003230:	335c      	adds	r3, #92	; 0x5c
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	4601      	mov	r1, r0
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fd32 	bl	8002ca2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800323e:	e0d1      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b80      	cmp	r3, #128	; 0x80
 8003254:	d13e      	bne.n	80032d4 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	0151      	lsls	r1, r2, #5
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	440a      	add	r2, r1
 800326c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003270:	f043 0302 	orr.w	r3, r3, #2
 8003274:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	440b      	add	r3, r1
 8003284:	3358      	adds	r3, #88	; 0x58
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4403      	add	r3, r0
 8003298:	3358      	adds	r3, #88	; 0x58
 800329a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	335d      	adds	r3, #93	; 0x5d
 80032ac:	2206      	movs	r2, #6
 80032ae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	4611      	mov	r1, r2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f003 fe10 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032cc:	461a      	mov	r2, r3
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	6093      	str	r3, [r2, #8]
}
 80032d2:	e087      	b.n	80033e4 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b10      	cmp	r3, #16
 80032e8:	d17c      	bne.n	80033e4 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	333f      	adds	r3, #63	; 0x3f
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d122      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	3358      	adds	r3, #88	; 0x58
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4413      	add	r3, r2
 800331c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	440a      	add	r2, r1
 800332a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800332e:	f043 0302 	orr.w	r3, r3, #2
 8003332:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f003 fdce 	bl	8006ee0 <USB_HC_Halt>
 8003344:	e045      	b.n	80033d2 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	440b      	add	r3, r1
 8003354:	333f      	adds	r3, #63	; 0x3f
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	333f      	adds	r3, #63	; 0x3f
 800336c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800336e:	2b02      	cmp	r3, #2
 8003370:	d12f      	bne.n	80033d2 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	3358      	adds	r3, #88	; 0x58
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d121      	bne.n	80033d2 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	335d      	adds	r3, #93	; 0x5d
 800339e:	2203      	movs	r2, #3
 80033a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	0151      	lsls	r1, r2, #5
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	440a      	add	r2, r1
 80033b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f003 fd87 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	461a      	mov	r2, r3
 80033e0:	2310      	movs	r3, #16
 80033e2:	6093      	str	r3, [r2, #8]
}
 80033e4:	bf00      	nop
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4413      	add	r3, r2
 800340e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b04      	cmp	r3, #4
 800341a:	d119      	bne.n	8003450 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	2304      	movs	r3, #4
 800342c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	440a      	add	r2, r1
 8003444:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003448:	f043 0302 	orr.w	r3, r3, #2
 800344c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800344e:	e33e      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0320 	and.w	r3, r3, #32
 8003462:	2b20      	cmp	r3, #32
 8003464:	d141      	bne.n	80034ea <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	015a      	lsls	r2, r3, #5
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4413      	add	r3, r2
 800346e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003472:	461a      	mov	r2, r3
 8003474:	2320      	movs	r3, #32
 8003476:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	440b      	add	r3, r1
 8003486:	333d      	adds	r3, #61	; 0x3d
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	f040 831f 	bne.w	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	333d      	adds	r3, #61	; 0x3d
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4613      	mov	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4413      	add	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	440b      	add	r3, r1
 80034b2:	335c      	adds	r3, #92	; 0x5c
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d2:	f043 0302 	orr.w	r3, r3, #2
 80034d6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f003 fcfc 	bl	8006ee0 <USB_HC_Halt>
}
 80034e8:	e2f1      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fc:	2b40      	cmp	r3, #64	; 0x40
 80034fe:	d13f      	bne.n	8003580 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	335d      	adds	r3, #93	; 0x5d
 8003510:	2204      	movs	r2, #4
 8003512:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fa      	ldr	r2, [r7, #12]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	440b      	add	r3, r1
 8003522:	333d      	adds	r3, #61	; 0x3d
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3358      	adds	r3, #88	; 0x58
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4413      	add	r3, r2
 8003544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	0151      	lsls	r1, r2, #5
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	440a      	add	r2, r1
 8003552:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003556:	f043 0302 	orr.w	r3, r3, #2
 800355a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f003 fcba 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2340      	movs	r3, #64	; 0x40
 800357c:	6093      	str	r3, [r2, #8]
}
 800357e:	e2a6      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003596:	d122      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035b2:	f043 0302 	orr.w	r3, r3, #2
 80035b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fc8c 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	461a      	mov	r2, r3
 80035d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035da:	6093      	str	r3, [r2, #8]
}
 80035dc:	e277      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d135      	bne.n	8003660 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	3358      	adds	r3, #88	; 0x58
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	440a      	add	r2, r1
 800361e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	b2d2      	uxtb	r2, r2
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fc54 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	2301      	movs	r3, #1
 8003648:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	440b      	add	r3, r1
 8003658:	335d      	adds	r3, #93	; 0x5d
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
}
 800365e:	e236      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b08      	cmp	r3, #8
 8003674:	d12b      	bne.n	80036ce <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	015a      	lsls	r2, r3, #5
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4413      	add	r3, r2
 800367e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003682:	461a      	mov	r2, r3
 8003684:	2308      	movs	r3, #8
 8003686:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	440a      	add	r2, r1
 800369e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	b2d2      	uxtb	r2, r2
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fc14 	bl	8006ee0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	440b      	add	r3, r1
 80036c6:	335d      	adds	r3, #93	; 0x5d
 80036c8:	2205      	movs	r2, #5
 80036ca:	701a      	strb	r2, [r3, #0]
}
 80036cc:	e1ff      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d155      	bne.n	8003790 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4613      	mov	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4413      	add	r3, r2
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	440b      	add	r3, r1
 80036f2:	3358      	adds	r3, #88	; 0x58
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	440b      	add	r3, r1
 8003706:	335d      	adds	r3, #93	; 0x5d
 8003708:	2203      	movs	r2, #3
 800370a:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	440b      	add	r3, r1
 800371a:	333d      	adds	r3, #61	; 0x3d
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d114      	bne.n	800374c <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	440b      	add	r3, r1
 8003730:	333c      	adds	r3, #60	; 0x3c
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	333d      	adds	r3, #61	; 0x3d
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	4413      	add	r3, r2
 8003754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	0151      	lsls	r1, r2, #5
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	440a      	add	r2, r1
 8003762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003766:	f043 0302 	orr.w	r3, r3, #2
 800376a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f003 fbb2 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	461a      	mov	r2, r3
 800378a:	2310      	movs	r3, #16
 800378c:	6093      	str	r3, [r2, #8]
}
 800378e:	e19e      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4413      	add	r3, r2
 8003798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a2:	2b80      	cmp	r3, #128	; 0x80
 80037a4:	d12b      	bne.n	80037fe <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fb85 	bl	8006ee0 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	335d      	adds	r3, #93	; 0x5d
 80037e6:	2206      	movs	r2, #6
 80037e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2380      	movs	r3, #128	; 0x80
 80037fa:	6093      	str	r3, [r2, #8]
}
 80037fc:	e167      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003814:	d135      	bne.n	8003882 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	0151      	lsls	r1, r2, #5
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	440a      	add	r2, r1
 800382c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fb4d 	bl	8006ee0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	461a      	mov	r2, r3
 8003854:	2310      	movs	r3, #16
 8003856:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	4413      	add	r3, r2
 8003860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003864:	461a      	mov	r2, r3
 8003866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	335d      	adds	r3, #93	; 0x5d
 800387c:	2208      	movs	r2, #8
 800387e:	701a      	strb	r2, [r3, #0]
}
 8003880:	e125      	b.n	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	f040 811a 	bne.w	8003ace <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	0151      	lsls	r1, r2, #5
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	440a      	add	r2, r1
 80038b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b4:	f023 0302 	bic.w	r3, r3, #2
 80038b8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	4613      	mov	r3, r2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	440b      	add	r3, r1
 80038c8:	335d      	adds	r3, #93	; 0x5d
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d137      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4613      	mov	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	335c      	adds	r3, #92	; 0x5c
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4613      	mov	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	440b      	add	r3, r1
 80038f2:	333f      	adds	r3, #63	; 0x3f
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d00b      	beq.n	8003912 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	333f      	adds	r3, #63	; 0x3f
 800390a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800390c:	2b03      	cmp	r3, #3
 800390e:	f040 80c5 	bne.w	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	440b      	add	r3, r1
 8003920:	3351      	adds	r3, #81	; 0x51
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	f083 0301 	eor.w	r3, r3, #1
 8003928:	b2d8      	uxtb	r0, r3
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	3351      	adds	r3, #81	; 0x51
 800393a:	4602      	mov	r2, r0
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e0ad      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	335d      	adds	r3, #93	; 0x5d
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d10a      	bne.n	800396c <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	335c      	adds	r3, #92	; 0x5c
 8003966:	2202      	movs	r2, #2
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e097      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	440b      	add	r3, r1
 800397a:	335d      	adds	r3, #93	; 0x5d
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b04      	cmp	r3, #4
 8003980:	d10a      	bne.n	8003998 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4613      	mov	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	4413      	add	r3, r2
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	440b      	add	r3, r1
 8003990:	335c      	adds	r3, #92	; 0x5c
 8003992:	2202      	movs	r2, #2
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e081      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	440b      	add	r3, r1
 80039a6:	335d      	adds	r3, #93	; 0x5d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d10a      	bne.n	80039c4 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	335c      	adds	r3, #92	; 0x5c
 80039be:	2205      	movs	r2, #5
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e06b      	b.n	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	335d      	adds	r3, #93	; 0x5d
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d00a      	beq.n	80039f0 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	335d      	adds	r3, #93	; 0x5d
 80039ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d155      	bne.n	8003a9c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	3358      	adds	r3, #88	; 0x58
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4403      	add	r3, r0
 8003a12:	3358      	adds	r3, #88	; 0x58
 8003a14:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	3358      	adds	r3, #88	; 0x58
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d914      	bls.n	8003a56 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	440b      	add	r3, r1
 8003a3a:	3358      	adds	r3, #88	; 0x58
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	2204      	movs	r2, #4
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	e009      	b.n	8003a6a <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	440b      	add	r3, r1
 8003a64:	335c      	adds	r3, #92	; 0x5c
 8003a66:	2202      	movs	r2, #2
 8003a68:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a80:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a88:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a96:	461a      	mov	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2302      	movs	r3, #2
 8003aac:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	b2d8      	uxtb	r0, r3
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	335c      	adds	r3, #92	; 0x5c
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff f8ea 	bl	8002ca2 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
	...

08003ad8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	; 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	0c5b      	lsrs	r3, r3, #17
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b0c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d003      	beq.n	8003b1c <HCD_RXQLVL_IRQHandler+0x44>
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	f000 8082 	beq.w	8003c1e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003b1a:	e083      	b.n	8003c24 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d07f      	beq.n	8003c22 <HCD_RXQLVL_IRQHandler+0x14a>
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	3344      	adds	r3, #68	; 0x44
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d074      	beq.n	8003c22 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	440b      	add	r3, r1
 8003b4a:	3344      	adds	r3, #68	; 0x44
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	b292      	uxth	r2, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f003 f806 	bl	8006b64 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	440b      	add	r3, r1
 8003b66:	3344      	adds	r3, #68	; 0x44
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	18d1      	adds	r1, r2, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4403      	add	r3, r0
 8003b7c:	3344      	adds	r3, #68	; 0x44
 8003b7e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	440b      	add	r3, r1
 8003b8e:	334c      	adds	r3, #76	; 0x4c
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	18d1      	adds	r1, r2, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4403      	add	r3, r0
 8003ba4:	334c      	adds	r3, #76	; 0x4c
 8003ba6:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <HCD_RXQLVL_IRQHandler+0x154>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d031      	beq.n	8003c22 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003bd4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bdc:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3350      	adds	r3, #80	; 0x50
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	f083 0301 	eor.w	r3, r3, #1
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	440b      	add	r3, r1
 8003c16:	3350      	adds	r3, #80	; 0x50
 8003c18:	4602      	mov	r2, r0
 8003c1a:	701a      	strb	r2, [r3, #0]
      break;
 8003c1c:	e001      	b.n	8003c22 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8003c22:	bf00      	nop
  }
}
 8003c24:	bf00      	nop
 8003c26:	3728      	adds	r7, #40	; 0x28
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	1ff80000 	.word	0x1ff80000

08003c30 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c5c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d113      	bne.n	8003c90 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d10a      	bne.n	8003c88 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699a      	ldr	r2, [r3, #24]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003c80:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fe ffe5 	bl	8002c52 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d147      	bne.n	8003d2a <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f043 0308 	orr.w	r3, r3, #8
 8003ca0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d129      	bne.n	8003d00 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d113      	bne.n	8003cdc <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003cba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cbe:	d106      	bne.n	8003cce <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2102      	movs	r1, #2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 f886 	bl	8006dd8 <USB_InitFSLSPClkSel>
 8003ccc:	e011      	b.n	8003cf2 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f003 f87f 	bl	8006dd8 <USB_InitFSLSPClkSel>
 8003cda:	e00a      	b.n	8003cf2 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d106      	bne.n	8003cf2 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cea:	461a      	mov	r2, r3
 8003cec:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003cf0:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fe ffc1 	bl	8002c7a <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7fe ffaa 	bl	8002c52 <HAL_HCD_Connect_Callback>
 8003cfe:	e014      	b.n	8003d2a <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fe ffc4 	bl	8002c8e <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003d14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d18:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699a      	ldr	r2, [r3, #24]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003d28:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d103      	bne.n	8003d3c <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d42:	461a      	mov	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	6013      	str	r3, [r2, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e10f      	b.n	8003f82 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fc fee6 	bl	8000b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2224      	movs	r2, #36	; 0x24
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0201 	bic.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d94:	f001 f8f0 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8003d98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	4a7b      	ldr	r2, [pc, #492]	; (8003f8c <HAL_I2C_Init+0x23c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d807      	bhi.n	8003db4 <HAL_I2C_Init+0x64>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4a7a      	ldr	r2, [pc, #488]	; (8003f90 <HAL_I2C_Init+0x240>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	bf94      	ite	ls
 8003dac:	2301      	movls	r3, #1
 8003dae:	2300      	movhi	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e006      	b.n	8003dc2 <HAL_I2C_Init+0x72>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a77      	ldr	r2, [pc, #476]	; (8003f94 <HAL_I2C_Init+0x244>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bf94      	ite	ls
 8003dbc:	2301      	movls	r3, #1
 8003dbe:	2300      	movhi	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0db      	b.n	8003f82 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4a72      	ldr	r2, [pc, #456]	; (8003f98 <HAL_I2C_Init+0x248>)
 8003dce:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd2:	0c9b      	lsrs	r3, r3, #18
 8003dd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	4a64      	ldr	r2, [pc, #400]	; (8003f8c <HAL_I2C_Init+0x23c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d802      	bhi.n	8003e04 <HAL_I2C_Init+0xb4>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	3301      	adds	r3, #1
 8003e02:	e009      	b.n	8003e18 <HAL_I2C_Init+0xc8>
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_I2C_Init+0x24c>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	099b      	lsrs	r3, r3, #6
 8003e16:	3301      	adds	r3, #1
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4956      	ldr	r1, [pc, #344]	; (8003f8c <HAL_I2C_Init+0x23c>)
 8003e34:	428b      	cmp	r3, r1
 8003e36:	d80d      	bhi.n	8003e54 <HAL_I2C_Init+0x104>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1e59      	subs	r1, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	bf38      	it	cc
 8003e50:	2304      	movcc	r3, #4
 8003e52:	e04f      	b.n	8003ef4 <HAL_I2C_Init+0x1a4>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <HAL_I2C_Init+0x130>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1e58      	subs	r0, r3, #1
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	440b      	add	r3, r1
 8003e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e6e:	3301      	adds	r3, #1
 8003e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf0c      	ite	eq
 8003e78:	2301      	moveq	r3, #1
 8003e7a:	2300      	movne	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e012      	b.n	8003ea6 <HAL_I2C_Init+0x156>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e58      	subs	r0, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf0c      	ite	eq
 8003ea0:	2301      	moveq	r3, #1
 8003ea2:	2300      	movne	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Init+0x15e>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e022      	b.n	8003ef4 <HAL_I2C_Init+0x1a4>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_I2C_Init+0x184>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	1e58      	subs	r0, r3, #1
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6859      	ldr	r1, [r3, #4]
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	440b      	add	r3, r1
 8003ec4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed2:	e00f      	b.n	8003ef4 <HAL_I2C_Init+0x1a4>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	1e58      	subs	r0, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6859      	ldr	r1, [r3, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	0099      	lsls	r1, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	6809      	ldr	r1, [r1, #0]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69da      	ldr	r2, [r3, #28]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6911      	ldr	r1, [r2, #16]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	68d2      	ldr	r2, [r2, #12]
 8003f2e:	4311      	orrs	r1, r2
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	6812      	ldr	r2, [r2, #0]
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695a      	ldr	r2, [r3, #20]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	000186a0 	.word	0x000186a0
 8003f90:	001e847f 	.word	0x001e847f
 8003f94:	003d08ff 	.word	0x003d08ff
 8003f98:	431bde83 	.word	0x431bde83
 8003f9c:	10624dd3 	.word	0x10624dd3

08003fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b20      	cmp	r3, #32
 8003fb4:	d129      	bne.n	800400a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0210 	bic.w	r2, r2, #16
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f042 0201 	orr.w	r2, r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	e000      	b.n	800400c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800400a:	2302      	movs	r3, #2
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004022:	2300      	movs	r3, #0
 8004024:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b20      	cmp	r3, #32
 8004030:	d12a      	bne.n	8004088 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2224      	movs	r2, #36	; 0x24
 8004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0201 	bic.w	r2, r2, #1
 8004048:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004052:	89fb      	ldrh	r3, [r7, #14]
 8004054:	f023 030f 	bic.w	r3, r3, #15
 8004058:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	b29a      	uxth	r2, r3
 800405e:	89fb      	ldrh	r3, [r7, #14]
 8004060:	4313      	orrs	r3, r2
 8004062:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	89fa      	ldrh	r2, [r7, #14]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	e000      	b.n	800408a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004088:	2302      	movs	r3, #2
  }
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e0bf      	b.n	800422a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fc fe2c 	bl	8000d1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699a      	ldr	r2, [r3, #24]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80040da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6999      	ldr	r1, [r3, #24]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	430a      	orrs	r2, r1
 80040fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <HAL_LTDC_Init+0x19c>)
 800410c:	400b      	ands	r3, r1
 800410e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68d9      	ldr	r1, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b3e      	ldr	r3, [pc, #248]	; (8004234 <HAL_LTDC_Init+0x19c>)
 800413a:	400b      	ands	r3, r1
 800413c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	041b      	lsls	r3, r3, #16
 8004144:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68d9      	ldr	r1, [r3, #12]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_LTDC_Init+0x19c>)
 8004168:	400b      	ands	r3, r1
 800416a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6919      	ldr	r1, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6959      	ldr	r1, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b27      	ldr	r3, [pc, #156]	; (8004234 <HAL_LTDC_Init+0x19c>)
 8004196:	400b      	ands	r3, r1
 8004198:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6959      	ldr	r1, [r3, #20]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041be:	021b      	lsls	r3, r3, #8
 80041c0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041c8:	041b      	lsls	r3, r3, #16
 80041ca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80041da:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f042 0206 	orr.w	r2, r2, #6
 8004206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 0201 	orr.w	r2, r2, #1
 8004216:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	f000f800 	.word	0xf000f800

08004238 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d023      	beq.n	80042a2 <HAL_LTDC_IRQHandler+0x6a>
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01e      	beq.n	80042a2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0204 	bic.w	r2, r2, #4
 8004272:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004282:	f043 0201 	orr.w	r2, r3, #1
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2204      	movs	r2, #4
 8004290:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f86f 	bl	8004380 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d023      	beq.n	80042f4 <HAL_LTDC_IRQHandler+0xbc>
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01e      	beq.n	80042f4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f022 0202 	bic.w	r2, r2, #2
 80042c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2202      	movs	r2, #2
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042d4:	f043 0202 	orr.w	r2, r3, #2
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2204      	movs	r2, #4
 80042e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f846 	bl	8004380 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d01b      	beq.n	8004336 <HAL_LTDC_IRQHandler+0xfe>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0201 	bic.w	r2, r2, #1
 8004316:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f82f 	bl	8004394 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <HAL_LTDC_IRQHandler+0x140>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d016      	beq.n	8004378 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0208 	bic.w	r2, r2, #8
 8004358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2208      	movs	r2, #8
 8004360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f818 	bl	80043a8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800439c:	bf00      	nop
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_LTDC_ConfigLayer+0x1a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e02c      	b.n	8004430 <HAL_LTDC_ConfigLayer+0x74>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2134      	movs	r1, #52	; 0x34
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4614      	mov	r4, r2
 80043fa:	461d      	mov	r5, r3
 80043fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004408:	682b      	ldr	r3, [r5, #0]
 800440a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 f811 	bl	8004438 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2201      	movs	r2, #1
 800441c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bdb0      	pop	{r4, r5, r7, pc}

08004438 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004438:	b480      	push	{r7}
 800443a:	b089      	sub	sp, #36	; 0x24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0c1b      	lsrs	r3, r3, #16
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	4413      	add	r3, r2
 8004456:	041b      	lsls	r3, r3, #16
 8004458:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	4413      	add	r3, r2
 8004466:	3384      	adds	r3, #132	; 0x84
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	4611      	mov	r1, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	01d2      	lsls	r2, r2, #7
 8004474:	440a      	add	r2, r1
 8004476:	3284      	adds	r2, #132	; 0x84
 8004478:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800447c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448e:	4413      	add	r3, r2
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	01db      	lsls	r3, r3, #7
 800449c:	440b      	add	r3, r1
 800449e:	3384      	adds	r3, #132	; 0x84
 80044a0:	4619      	mov	r1, r3
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044b6:	4413      	add	r3, r2
 80044b8:	041b      	lsls	r3, r3, #16
 80044ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	01db      	lsls	r3, r3, #7
 80044c6:	4413      	add	r3, r2
 80044c8:	3384      	adds	r3, #132	; 0x84
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	4611      	mov	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	01d2      	lsls	r2, r2, #7
 80044d6:	440a      	add	r2, r1
 80044d8:	3284      	adds	r2, #132	; 0x84
 80044da:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80044de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044ee:	4413      	add	r3, r2
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4619      	mov	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	01db      	lsls	r3, r3, #7
 80044fc:	440b      	add	r3, r1
 80044fe:	3384      	adds	r3, #132	; 0x84
 8004500:	4619      	mov	r1, r3
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4313      	orrs	r3, r2
 8004506:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	4611      	mov	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	01d2      	lsls	r2, r2, #7
 8004522:	440a      	add	r2, r1
 8004524:	3284      	adds	r2, #132	; 0x84
 8004526:	f023 0307 	bic.w	r3, r3, #7
 800452a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	01db      	lsls	r3, r3, #7
 8004536:	4413      	add	r3, r2
 8004538:	3384      	adds	r3, #132	; 0x84
 800453a:	461a      	mov	r2, r3
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004548:	021b      	lsls	r3, r3, #8
 800454a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004552:	041b      	lsls	r3, r3, #16
 8004554:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	061b      	lsls	r3, r3, #24
 800455c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	01db      	lsls	r3, r3, #7
 8004568:	4413      	add	r3, r2
 800456a:	3384      	adds	r3, #132	; 0x84
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4413      	add	r3, r2
 800457a:	3384      	adds	r3, #132	; 0x84
 800457c:	461a      	mov	r2, r3
 800457e:	2300      	movs	r3, #0
 8004580:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004588:	461a      	mov	r2, r3
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	431a      	orrs	r2, r3
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4619      	mov	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	01db      	lsls	r3, r3, #7
 800459c:	440b      	add	r3, r1
 800459e:	3384      	adds	r3, #132	; 0x84
 80045a0:	4619      	mov	r1, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	4413      	add	r3, r2
 80045b4:	3384      	adds	r3, #132	; 0x84
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	4611      	mov	r1, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	01d2      	lsls	r2, r2, #7
 80045c2:	440a      	add	r2, r1
 80045c4:	3284      	adds	r2, #132	; 0x84
 80045c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	01db      	lsls	r3, r3, #7
 80045d6:	4413      	add	r3, r2
 80045d8:	3384      	adds	r3, #132	; 0x84
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	461a      	mov	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	01db      	lsls	r3, r3, #7
 80045ec:	4413      	add	r3, r2
 80045ee:	3384      	adds	r3, #132	; 0x84
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4611      	mov	r1, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	01d2      	lsls	r2, r2, #7
 80045fc:	440a      	add	r2, r1
 80045fe:	3284      	adds	r2, #132	; 0x84
 8004600:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004604:	f023 0307 	bic.w	r3, r3, #7
 8004608:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	69da      	ldr	r2, [r3, #28]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	68f9      	ldr	r1, [r7, #12]
 8004614:	6809      	ldr	r1, [r1, #0]
 8004616:	4608      	mov	r0, r1
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	01c9      	lsls	r1, r1, #7
 800461c:	4401      	add	r1, r0
 800461e:	3184      	adds	r1, #132	; 0x84
 8004620:	4313      	orrs	r3, r2
 8004622:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	01db      	lsls	r3, r3, #7
 800462e:	4413      	add	r3, r2
 8004630:	3384      	adds	r3, #132	; 0x84
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4413      	add	r3, r2
 8004640:	3384      	adds	r3, #132	; 0x84
 8004642:	461a      	mov	r2, r3
 8004644:	2300      	movs	r3, #0
 8004646:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	01db      	lsls	r3, r3, #7
 8004652:	4413      	add	r3, r2
 8004654:	3384      	adds	r3, #132	; 0x84
 8004656:	461a      	mov	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004666:	2304      	movs	r3, #4
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e01b      	b.n	80046a4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d102      	bne.n	800467a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004674:	2303      	movs	r3, #3
 8004676:	61fb      	str	r3, [r7, #28]
 8004678:	e014      	b.n	80046a4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d00b      	beq.n	800469a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004686:	2b02      	cmp	r3, #2
 8004688:	d007      	beq.n	800469a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800468e:	2b03      	cmp	r3, #3
 8004690:	d003      	beq.n	800469a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004696:	2b07      	cmp	r3, #7
 8004698:	d102      	bne.n	80046a0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800469a:	2302      	movs	r3, #2
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e001      	b.n	80046a4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80046a0:	2301      	movs	r3, #1
 80046a2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	01db      	lsls	r3, r3, #7
 80046ae:	4413      	add	r3, r2
 80046b0:	3384      	adds	r3, #132	; 0x84
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	4611      	mov	r1, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	01d2      	lsls	r2, r2, #7
 80046be:	440a      	add	r2, r1
 80046c0:	3284      	adds	r2, #132	; 0x84
 80046c2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80046c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	041a      	lsls	r2, r3, #16
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1acb      	subs	r3, r1, r3
 80046de:	69f9      	ldr	r1, [r7, #28]
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	3303      	adds	r3, #3
 80046e6:	68f9      	ldr	r1, [r7, #12]
 80046e8:	6809      	ldr	r1, [r1, #0]
 80046ea:	4608      	mov	r0, r1
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	01c9      	lsls	r1, r1, #7
 80046f0:	4401      	add	r1, r0
 80046f2:	3184      	adds	r1, #132	; 0x84
 80046f4:	4313      	orrs	r3, r2
 80046f6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	01db      	lsls	r3, r3, #7
 8004702:	4413      	add	r3, r2
 8004704:	3384      	adds	r3, #132	; 0x84
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	6812      	ldr	r2, [r2, #0]
 800470c:	4611      	mov	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	01d2      	lsls	r2, r2, #7
 8004712:	440a      	add	r2, r1
 8004714:	3284      	adds	r2, #132	; 0x84
 8004716:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800471a:	f023 0307 	bic.w	r3, r3, #7
 800471e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	01db      	lsls	r3, r3, #7
 800472a:	4413      	add	r3, r2
 800472c:	3384      	adds	r3, #132	; 0x84
 800472e:	461a      	mov	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	01db      	lsls	r3, r3, #7
 8004740:	4413      	add	r3, r2
 8004742:	3384      	adds	r3, #132	; 0x84
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	4611      	mov	r1, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	01d2      	lsls	r2, r2, #7
 8004750:	440a      	add	r2, r1
 8004752:	3284      	adds	r2, #132	; 0x84
 8004754:	f043 0301 	orr.w	r3, r3, #1
 8004758:	6013      	str	r3, [r2, #0]
}
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
	...

08004768 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e22d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d075      	beq.n	8004872 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004786:	4ba3      	ldr	r3, [pc, #652]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b04      	cmp	r3, #4
 8004790:	d00c      	beq.n	80047ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004792:	4ba0      	ldr	r3, [pc, #640]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800479a:	2b08      	cmp	r3, #8
 800479c:	d112      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800479e:	4b9d      	ldr	r3, [pc, #628]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	4b99      	ldr	r3, [pc, #612]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d05b      	beq.n	8004870 <HAL_RCC_OscConfig+0x108>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d157      	bne.n	8004870 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e208      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d106      	bne.n	80047dc <HAL_RCC_OscConfig+0x74>
 80047ce:	4b91      	ldr	r3, [pc, #580]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a90      	ldr	r2, [pc, #576]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e01d      	b.n	8004818 <HAL_RCC_OscConfig+0xb0>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e4:	d10c      	bne.n	8004800 <HAL_RCC_OscConfig+0x98>
 80047e6:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a8a      	ldr	r2, [pc, #552]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047f0:	6013      	str	r3, [r2, #0]
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a87      	ldr	r2, [pc, #540]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e00b      	b.n	8004818 <HAL_RCC_OscConfig+0xb0>
 8004800:	4b84      	ldr	r3, [pc, #528]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a83      	ldr	r2, [pc, #524]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800480a:	6013      	str	r3, [r2, #0]
 800480c:	4b81      	ldr	r3, [pc, #516]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a80      	ldr	r2, [pc, #512]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004816:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d013      	beq.n	8004848 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004820:	f7fd fba6 	bl	8001f70 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004828:	f7fd fba2 	bl	8001f70 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b64      	cmp	r3, #100	; 0x64
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e1cd      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0xc0>
 8004846:	e014      	b.n	8004872 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fd fb92 	bl	8001f70 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004850:	f7fd fb8e 	bl	8001f70 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e1b9      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0xe8>
 800486e:	e000      	b.n	8004872 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d063      	beq.n	8004946 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800488a:	4b62      	ldr	r3, [pc, #392]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004892:	2b08      	cmp	r3, #8
 8004894:	d11c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004896:	4b5f      	ldr	r3, [pc, #380]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d116      	bne.n	80048d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a2:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d005      	beq.n	80048ba <HAL_RCC_OscConfig+0x152>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d001      	beq.n	80048ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e18d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ba:	4b56      	ldr	r3, [pc, #344]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4952      	ldr	r1, [pc, #328]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ce:	e03a      	b.n	8004946 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d020      	beq.n	800491a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d8:	4b4f      	ldr	r3, [pc, #316]	; (8004a18 <HAL_RCC_OscConfig+0x2b0>)
 80048da:	2201      	movs	r2, #1
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fd fb47 	bl	8001f70 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048e6:	f7fd fb43 	bl	8001f70 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e16e      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f8:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d0f0      	beq.n	80048e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4940      	ldr	r1, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]
 8004918:	e015      	b.n	8004946 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491a:	4b3f      	ldr	r3, [pc, #252]	; (8004a18 <HAL_RCC_OscConfig+0x2b0>)
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004920:	f7fd fb26 	bl	8001f70 <HAL_GetTick>
 8004924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004928:	f7fd fb22 	bl	8001f70 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e14d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800493a:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d030      	beq.n	80049b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495a:	4b30      	ldr	r3, [pc, #192]	; (8004a1c <HAL_RCC_OscConfig+0x2b4>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004960:	f7fd fb06 	bl	8001f70 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004968:	f7fd fb02 	bl	8001f70 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e12d      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x200>
 8004986:	e015      	b.n	80049b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_OscConfig+0x2b4>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7fd faef 	bl	8001f70 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004994:	e008      	b.n	80049a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004996:	f7fd faeb 	bl	8001f70 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e116      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b1a      	ldr	r3, [pc, #104]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f0      	bne.n	8004996 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a0 	beq.w	8004b02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049c2:	2300      	movs	r3, #0
 80049c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c6:	4b13      	ldr	r3, [pc, #76]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10f      	bne.n	80049f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	4a0e      	ldr	r2, [pc, #56]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e0:	6413      	str	r3, [r2, #64]	; 0x40
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80049ee:	2301      	movs	r3, #1
 80049f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_OscConfig+0x2b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d121      	bne.n	8004a42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_RCC_OscConfig+0x2b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <HAL_RCC_OscConfig+0x2b8>)
 8004a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a0a:	f7fd fab1 	bl	8001f70 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a10:	e011      	b.n	8004a36 <HAL_RCC_OscConfig+0x2ce>
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	42470000 	.word	0x42470000
 8004a1c:	42470e80 	.word	0x42470e80
 8004a20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a24:	f7fd faa4 	bl	8001f70 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0cf      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a36:	4b6a      	ldr	r3, [pc, #424]	; (8004be0 <HAL_RCC_OscConfig+0x478>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d0f0      	beq.n	8004a24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <HAL_RCC_OscConfig+0x2f0>
 8004a4a:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	4a65      	ldr	r2, [pc, #404]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6713      	str	r3, [r2, #112]	; 0x70
 8004a56:	e01c      	b.n	8004a92 <HAL_RCC_OscConfig+0x32a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d10c      	bne.n	8004a7a <HAL_RCC_OscConfig+0x312>
 8004a60:	4b60      	ldr	r3, [pc, #384]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a5f      	ldr	r2, [pc, #380]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a66:	f043 0304 	orr.w	r3, r3, #4
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6c:	4b5d      	ldr	r3, [pc, #372]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a5c      	ldr	r2, [pc, #368]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	e00b      	b.n	8004a92 <HAL_RCC_OscConfig+0x32a>
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7e:	4a59      	ldr	r2, [pc, #356]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a80:	f023 0301 	bic.w	r3, r3, #1
 8004a84:	6713      	str	r3, [r2, #112]	; 0x70
 8004a86:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8a:	4a56      	ldr	r2, [pc, #344]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d015      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fa69 	bl	8001f70 <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa0:	e00a      	b.n	8004ab8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aa2:	f7fd fa65 	bl	8001f70 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e08e      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ab8:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ee      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x33a>
 8004ac4:	e014      	b.n	8004af0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fd fa53 	bl	8001f70 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004acc:	e00a      	b.n	8004ae4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ace:	f7fd fa4f 	bl	8001f70 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e078      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ae4:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1ee      	bne.n	8004ace <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d105      	bne.n	8004b02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	4a3a      	ldr	r2, [pc, #232]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d064      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b0a:	4b36      	ldr	r3, [pc, #216]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d05c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d141      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b1e:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <HAL_RCC_OscConfig+0x480>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b24:	f7fd fa24 	bl	8001f70 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd fa20 	bl	8001f70 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e04b      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b3e:	4b29      	ldr	r3, [pc, #164]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1f0      	bne.n	8004b2c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69da      	ldr	r2, [r3, #28]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	061b      	lsls	r3, r3, #24
 8004b6e:	491d      	ldr	r1, [pc, #116]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b1c      	ldr	r3, [pc, #112]	; (8004be8 <HAL_RCC_OscConfig+0x480>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7a:	f7fd f9f9 	bl	8001f70 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b82:	f7fd f9f5 	bl	8001f70 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e020      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x41a>
 8004ba0:	e018      	b.n	8004bd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <HAL_RCC_OscConfig+0x480>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd f9e2 	bl	8001f70 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb0:	f7fd f9de 	bl	8001f70 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e009      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCC_OscConfig+0x47c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x448>
 8004bce:	e001      	b.n	8004bd4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40007000 	.word	0x40007000
 8004be4:	40023800 	.word	0x40023800
 8004be8:	42470060 	.word	0x42470060

08004bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d101      	bne.n	8004c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0ca      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c00:	4b67      	ldr	r3, [pc, #412]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d90c      	bls.n	8004c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b64      	ldr	r3, [pc, #400]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b62      	ldr	r3, [pc, #392]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e0b6      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c40:	4b58      	ldr	r3, [pc, #352]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c58:	4b52      	ldr	r3, [pc, #328]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	4a51      	ldr	r2, [pc, #324]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c64:	4b4f      	ldr	r3, [pc, #316]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	494c      	ldr	r1, [pc, #304]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d044      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d107      	bne.n	8004c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8a:	4b46      	ldr	r3, [pc, #280]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d119      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e07d      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d003      	beq.n	8004caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004caa:	4b3e      	ldr	r3, [pc, #248]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d109      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e06d      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cba:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e065      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cca:	4b36      	ldr	r3, [pc, #216]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f023 0203 	bic.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4933      	ldr	r1, [pc, #204]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cdc:	f7fd f948 	bl	8001f70 <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce2:	e00a      	b.n	8004cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce4:	f7fd f944 	bl	8001f70 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e04d      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f003 020c 	and.w	r2, r3, #12
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d1eb      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d0c:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d20c      	bcs.n	8004d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d1c:	683a      	ldr	r2, [r7, #0]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <HAL_RCC_ClockConfig+0x1b4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e030      	b.n	8004d96 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4915      	ldr	r1, [pc, #84]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0308 	and.w	r3, r3, #8
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	490d      	ldr	r1, [pc, #52]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d72:	f000 f81d 	bl	8004db0 <HAL_RCC_GetSysClockFreq>
 8004d76:	4601      	mov	r1, r0
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	091b      	lsrs	r3, r3, #4
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	4a09      	ldr	r2, [pc, #36]	; (8004da8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	5cd3      	ldrb	r3, [r2, r3]
 8004d86:	fa21 f303 	lsr.w	r3, r1, r3
 8004d8a:	4a08      	ldr	r2, [pc, #32]	; (8004dac <HAL_RCC_ClockConfig+0x1c0>)
 8004d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fc fa6a 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40023c00 	.word	0x40023c00
 8004da4:	40023800 	.word	0x40023800
 8004da8:	080086e4 	.word	0x080086e4
 8004dac:	20000000 	.word	0x20000000

08004db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dc6:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 030c 	and.w	r3, r3, #12
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d007      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x32>
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d008      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0x38>
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	f040 80b4 	bne.w	8004f44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ddc:	4b5e      	ldr	r3, [pc, #376]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004dde:	60bb      	str	r3, [r7, #8]
       break;
 8004de0:	e0b3      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004de2:	4b5e      	ldr	r3, [pc, #376]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004de4:	60bb      	str	r3, [r7, #8]
      break;
 8004de6:	e0b0      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de8:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004df2:	4b58      	ldr	r3, [pc, #352]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04a      	beq.n	8004e94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfe:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	f04f 0400 	mov.w	r4, #0
 8004e08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	ea03 0501 	and.w	r5, r3, r1
 8004e14:	ea04 0602 	and.w	r6, r4, r2
 8004e18:	4629      	mov	r1, r5
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	0154      	lsls	r4, r2, #5
 8004e26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e2a:	014b      	lsls	r3, r1, #5
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4622      	mov	r2, r4
 8004e30:	1b49      	subs	r1, r1, r5
 8004e32:	eb62 0206 	sbc.w	r2, r2, r6
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f04f 0400 	mov.w	r4, #0
 8004e3e:	0194      	lsls	r4, r2, #6
 8004e40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e44:	018b      	lsls	r3, r1, #6
 8004e46:	1a5b      	subs	r3, r3, r1
 8004e48:	eb64 0402 	sbc.w	r4, r4, r2
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	00e2      	lsls	r2, r4, #3
 8004e56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e5a:	00d9      	lsls	r1, r3, #3
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4614      	mov	r4, r2
 8004e60:	195b      	adds	r3, r3, r5
 8004e62:	eb44 0406 	adc.w	r4, r4, r6
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	0262      	lsls	r2, r4, #9
 8004e70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e74:	0259      	lsls	r1, r3, #9
 8004e76:	460b      	mov	r3, r1
 8004e78:	4614      	mov	r4, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f04f 0400 	mov.w	r4, #0
 8004e84:	461a      	mov	r2, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	f7fb fa12 	bl	80002b0 <__aeabi_uldivmod>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e049      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e94:	4b2f      	ldr	r3, [pc, #188]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	099b      	lsrs	r3, r3, #6
 8004e9a:	f04f 0400 	mov.w	r4, #0
 8004e9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	ea03 0501 	and.w	r5, r3, r1
 8004eaa:	ea04 0602 	and.w	r6, r4, r2
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4632      	mov	r2, r6
 8004eb2:	f04f 0300 	mov.w	r3, #0
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	0154      	lsls	r4, r2, #5
 8004ebc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ec0:	014b      	lsls	r3, r1, #5
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	1b49      	subs	r1, r1, r5
 8004ec8:	eb62 0206 	sbc.w	r2, r2, r6
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	f04f 0400 	mov.w	r4, #0
 8004ed4:	0194      	lsls	r4, r2, #6
 8004ed6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004eda:	018b      	lsls	r3, r1, #6
 8004edc:	1a5b      	subs	r3, r3, r1
 8004ede:	eb64 0402 	sbc.w	r4, r4, r2
 8004ee2:	f04f 0100 	mov.w	r1, #0
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	00e2      	lsls	r2, r4, #3
 8004eec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ef0:	00d9      	lsls	r1, r3, #3
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	195b      	adds	r3, r3, r5
 8004ef8:	eb44 0406 	adc.w	r4, r4, r6
 8004efc:	f04f 0100 	mov.w	r1, #0
 8004f00:	f04f 0200 	mov.w	r2, #0
 8004f04:	02a2      	lsls	r2, r4, #10
 8004f06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004f0a:	0299      	lsls	r1, r3, #10
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4614      	mov	r4, r2
 8004f10:	4618      	mov	r0, r3
 8004f12:	4621      	mov	r1, r4
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f04f 0400 	mov.w	r4, #0
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	f7fb f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	3301      	adds	r3, #1
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f40:	60bb      	str	r3, [r7, #8]
      break;
 8004f42:	e002      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b04      	ldr	r3, [pc, #16]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f46:	60bb      	str	r3, [r7, #8]
      break;
 8004f48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f54:	40023800 	.word	0x40023800
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f64:	4b03      	ldr	r3, [pc, #12]	; (8004f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f66:	681b      	ldr	r3, [r3, #0]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	20000000 	.word	0x20000000

08004f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f7c:	f7ff fff0 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004f80:	4601      	mov	r1, r0
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	0a9b      	lsrs	r3, r3, #10
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4a03      	ldr	r2, [pc, #12]	; (8004f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f8e:	5cd3      	ldrb	r3, [r2, r3]
 8004f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40023800 	.word	0x40023800
 8004f9c:	080086f4 	.word	0x080086f4

08004fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fa4:	f7ff ffdc 	bl	8004f60 <HAL_RCC_GetHCLKFreq>
 8004fa8:	4601      	mov	r1, r0
 8004faa:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	0b5b      	lsrs	r3, r3, #13
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	4a03      	ldr	r2, [pc, #12]	; (8004fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fb6:	5cd3      	ldrb	r3, [r2, r3]
 8004fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	080086f4 	.word	0x080086f4

08004fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	220f      	movs	r2, #15
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fd8:	4b12      	ldr	r3, [pc, #72]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0203 	and.w	r2, r3, #3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ff0:	4b0c      	ldr	r3, [pc, #48]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ffc:	4b09      	ldr	r3, [pc, #36]	; (8005024 <HAL_RCC_GetClockConfig+0x5c>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	08db      	lsrs	r3, r3, #3
 8005002:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800500a:	4b07      	ldr	r3, [pc, #28]	; (8005028 <HAL_RCC_GetClockConfig+0x60>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 020f 	and.w	r2, r3, #15
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40023800 	.word	0x40023800
 8005028:	40023c00 	.word	0x40023c00

0800502c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d105      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005050:	2b00      	cmp	r3, #0
 8005052:	d061      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005054:	4ba3      	ldr	r3, [pc, #652]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005056:	2200      	movs	r2, #0
 8005058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800505a:	f7fc ff89 	bl	8001f70 <HAL_GetTick>
 800505e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005060:	e008      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005062:	f7fc ff85 	bl	8001f70 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e177      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005074:	4b9c      	ldr	r3, [pc, #624]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x36>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d009      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	019a      	lsls	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	071b      	lsls	r3, r3, #28
 8005098:	4993      	ldr	r1, [pc, #588]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d01f      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050ac:	4b8e      	ldr	r3, [pc, #568]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b2:	0f1b      	lsrs	r3, r3, #28
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	019a      	lsls	r2, r3, #6
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	061b      	lsls	r3, r3, #24
 80050c6:	431a      	orrs	r2, r3
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	071b      	lsls	r3, r3, #28
 80050cc:	4986      	ldr	r1, [pc, #536]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050da:	f023 021f 	bic.w	r2, r3, #31
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4980      	ldr	r1, [pc, #512]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050ec:	4b7d      	ldr	r3, [pc, #500]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050f2:	f7fc ff3d 	bl	8001f70 <HAL_GetTick>
 80050f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050fa:	f7fc ff39 	bl	8001f70 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e12b      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800510c:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xce>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d105      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x104>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800512c:	2b00      	cmp	r3, #0
 800512e:	d079      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005130:	4b6e      	ldr	r3, [pc, #440]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005136:	f7fc ff1b 	bl	8001f70 <HAL_GetTick>
 800513a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800513e:	f7fc ff17 	bl	8001f70 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x124>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e109      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005150:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800515c:	d0ef      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x112>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b00      	cmp	r3, #0
 8005168:	d020      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800516a:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800516c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005170:	0f1b      	lsrs	r3, r3, #28
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	019a      	lsls	r2, r3, #6
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	431a      	orrs	r2, r3
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	071b      	lsls	r3, r3, #28
 800518a:	4957      	ldr	r1, [pc, #348]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005192:	4b55      	ldr	r3, [pc, #340]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005198:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	3b01      	subs	r3, #1
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	4950      	ldr	r1, [pc, #320]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01e      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	0e1b      	lsrs	r3, r3, #24
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	019a      	lsls	r2, r3, #6
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	071b      	lsls	r3, r3, #28
 80051d8:	4943      	ldr	r1, [pc, #268]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051e0:	4b41      	ldr	r3, [pc, #260]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ee:	493e      	ldr	r1, [pc, #248]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fc feb8 	bl	8001f70 <HAL_GetTick>
 8005200:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005202:	e008      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005204:	f7fc feb4 	bl	8001f70 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	2b02      	cmp	r3, #2
 8005210:	d901      	bls.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e0a6      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005216:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005222:	d1ef      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	f000 808d 	beq.w	800534c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800523c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800524e:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005258:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800525a:	f7fc fe89 	bl	8001f70 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005260:	e008      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005262:	f7fc fe85 	bl	8001f70 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x248>
      {
        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e077      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x236>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005284:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005288:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d039      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d032      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a8:	4b12      	ldr	r3, [pc, #72]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052b4:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052ba:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80052bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d11e      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052c6:	f7fc fe53 	bl	8001f70 <HAL_GetTick>
 80052ca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052cc:	e014      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ce:	f7fc fe4f 	bl	8001f70 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	4293      	cmp	r3, r2
 80052de:	d90b      	bls.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e03f      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x338>
 80052e4:	42470068 	.word	0x42470068
 80052e8:	40023800 	.word	0x40023800
 80052ec:	42470070 	.word	0x42470070
 80052f0:	40007000 	.word	0x40007000
 80052f4:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	4b1c      	ldr	r3, [pc, #112]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0e4      	beq.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800530c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005310:	d10d      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x302>
 8005312:	4b16      	ldr	r3, [pc, #88]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	4911      	ldr	r1, [pc, #68]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005328:	4313      	orrs	r3, r2
 800532a:	608b      	str	r3, [r1, #8]
 800532c:	e005      	b.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	4a0e      	ldr	r2, [pc, #56]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005334:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005338:	6093      	str	r3, [r2, #8]
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800533c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005346:	4909      	ldr	r1, [pc, #36]	; (800536c <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005348:	4313      	orrs	r3, r2
 800534a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d004      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x336>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005360:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	40023800 	.word	0x40023800
 8005370:	424711e0 	.word	0x424711e0

08005374 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e025      	b.n	80053d4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fb fa79 	bl	8000894 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3304      	adds	r3, #4
 80053b2:	4619      	mov	r1, r3
 80053b4:	4610      	mov	r0, r2
 80053b6:	f001 f9ff 	bl	80067b8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	461a      	mov	r2, r3
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	f001 fa6a 	bl	800689e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e056      	b.n	800549c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7fb febd 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005424:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	431a      	orrs	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	431a      	orrs	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800544a:	431a      	orrs	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	ea42 0103 	orr.w	r1, r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	0c1b      	lsrs	r3, r3, #16
 800546c:	f003 0104 	and.w	r1, r3, #4
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	430a      	orrs	r2, r1
 800547a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e01d      	b.n	80054f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7fc f8f6 	bl	80016bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f000 fa14 	bl	8005910 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b085      	sub	sp, #20
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f042 0201 	orr.w	r2, r2, #1
 8005510:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d007      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b082      	sub	sp, #8
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d122      	bne.n	800559e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b02      	cmp	r3, #2
 8005564:	d11b      	bne.n	800559e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f06f 0202 	mvn.w	r2, #2
 800556e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9a5 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 800558a:	e005      	b.n	8005598 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f997 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9a8 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d122      	bne.n	80055f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f003 0304 	and.w	r3, r3, #4
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d11b      	bne.n	80055f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f06f 0204 	mvn.w	r2, #4
 80055c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f97b 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 80055de:	e005      	b.n	80055ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f96d 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f97e 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d122      	bne.n	8005646 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b08      	cmp	r3, #8
 800560c:	d11b      	bne.n	8005646 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0208 	mvn.w	r2, #8
 8005616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2204      	movs	r2, #4
 800561c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f951 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005632:	e005      	b.n	8005640 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f943 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f954 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d122      	bne.n	800569a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b10      	cmp	r3, #16
 8005660:	d11b      	bne.n	800569a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0210 	mvn.w	r2, #16
 800566a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2208      	movs	r2, #8
 8005670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f927 	bl	80058d4 <HAL_TIM_IC_CaptureCallback>
 8005686:	e005      	b.n	8005694 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 f919 	bl	80058c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f92a 	bl	80058e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10e      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d107      	bne.n	80056c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f06f 0201 	mvn.w	r2, #1
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fb fd11 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d10e      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b80      	cmp	r3, #128	; 0x80
 80056e0:	d107      	bne.n	80056f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa98 	bl	8005c22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d10e      	bne.n	800571e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b40      	cmp	r3, #64	; 0x40
 800570c:	d107      	bne.n	800571e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f8ef 	bl	80058fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d10e      	bne.n	800574a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b20      	cmp	r3, #32
 8005738:	d107      	bne.n	800574a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f06f 0220 	mvn.w	r2, #32
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa62 	bl	8005c0e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574a:	bf00      	nop
 800574c:	3708      	adds	r7, #8
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d101      	bne.n	800576a <HAL_TIM_ConfigClockSource+0x18>
 8005766:	2302      	movs	r3, #2
 8005768:	e0a6      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x166>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005788:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005790:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b40      	cmp	r3, #64	; 0x40
 80057a0:	d067      	beq.n	8005872 <HAL_TIM_ConfigClockSource+0x120>
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d80b      	bhi.n	80057be <HAL_TIM_ConfigClockSource+0x6c>
 80057a6:	2b10      	cmp	r3, #16
 80057a8:	d073      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x140>
 80057aa:	2b10      	cmp	r3, #16
 80057ac:	d802      	bhi.n	80057b4 <HAL_TIM_ConfigClockSource+0x62>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d06f      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80057b2:	e078      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d06c      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x140>
 80057b8:	2b30      	cmp	r3, #48	; 0x30
 80057ba:	d06a      	beq.n	8005892 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80057bc:	e073      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057be:	2b70      	cmp	r3, #112	; 0x70
 80057c0:	d00d      	beq.n	80057de <HAL_TIM_ConfigClockSource+0x8c>
 80057c2:	2b70      	cmp	r3, #112	; 0x70
 80057c4:	d804      	bhi.n	80057d0 <HAL_TIM_ConfigClockSource+0x7e>
 80057c6:	2b50      	cmp	r3, #80	; 0x50
 80057c8:	d033      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0xe0>
 80057ca:	2b60      	cmp	r3, #96	; 0x60
 80057cc:	d041      	beq.n	8005852 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80057ce:	e06a      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80057d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d4:	d066      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x152>
 80057d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057da:	d017      	beq.n	800580c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80057dc:	e063      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6899      	ldr	r1, [r3, #8]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f000 f9a9 	bl	8005b44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005800:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	609a      	str	r2, [r3, #8]
      break;
 800580a:	e04c      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	6899      	ldr	r1, [r3, #8]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f000 f992 	bl	8005b44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800582e:	609a      	str	r2, [r3, #8]
      break;
 8005830:	e039      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6859      	ldr	r1, [r3, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	461a      	mov	r2, r3
 8005840:	f000 f906 	bl	8005a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2150      	movs	r1, #80	; 0x50
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f95f 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005850:	e029      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	6859      	ldr	r1, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	461a      	mov	r2, r3
 8005860:	f000 f925 	bl	8005aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2160      	movs	r1, #96	; 0x60
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f94f 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005870:	e019      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	461a      	mov	r2, r3
 8005880:	f000 f8e6 	bl	8005a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2140      	movs	r1, #64	; 0x40
 800588a:	4618      	mov	r0, r3
 800588c:	f000 f93f 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005890:	e009      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4619      	mov	r1, r3
 800589c:	4610      	mov	r0, r2
 800589e:	f000 f936 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80058a2:	e000      	b.n	80058a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80058a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a40      	ldr	r2, [pc, #256]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800592e:	d00f      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3d      	ldr	r2, [pc, #244]	; (8005a28 <TIM_Base_SetConfig+0x118>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00b      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a3c      	ldr	r2, [pc, #240]	; (8005a2c <TIM_Base_SetConfig+0x11c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d007      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a3b      	ldr	r2, [pc, #236]	; (8005a30 <TIM_Base_SetConfig+0x120>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d003      	beq.n	8005950 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2f      	ldr	r2, [pc, #188]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d02b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005970:	d027      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a2c      	ldr	r2, [pc, #176]	; (8005a28 <TIM_Base_SetConfig+0x118>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d023      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a2b      	ldr	r2, [pc, #172]	; (8005a2c <TIM_Base_SetConfig+0x11c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d01f      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2a      	ldr	r2, [pc, #168]	; (8005a30 <TIM_Base_SetConfig+0x120>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a29      	ldr	r2, [pc, #164]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d017      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a28      	ldr	r2, [pc, #160]	; (8005a38 <TIM_Base_SetConfig+0x128>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a27      	ldr	r2, [pc, #156]	; (8005a3c <TIM_Base_SetConfig+0x12c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a26      	ldr	r2, [pc, #152]	; (8005a40 <TIM_Base_SetConfig+0x130>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <TIM_Base_SetConfig+0x134>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	; (8005a48 <TIM_Base_SetConfig+0x138>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a23      	ldr	r2, [pc, #140]	; (8005a4c <TIM_Base_SetConfig+0x13c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <TIM_Base_SetConfig+0x114>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d003      	beq.n	8005a08 <TIM_Base_SetConfig+0xf8>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a0c      	ldr	r2, [pc, #48]	; (8005a34 <TIM_Base_SetConfig+0x124>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d103      	bne.n	8005a10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	615a      	str	r2, [r3, #20]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40010000 	.word	0x40010000
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40010400 	.word	0x40010400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40014400 	.word	0x40014400
 8005a40:	40014800 	.word	0x40014800
 8005a44:	40001800 	.word	0x40001800
 8005a48:	40001c00 	.word	0x40001c00
 8005a4c:	40002000 	.word	0x40002000

08005a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0201 	bic.w	r2, r3, #1
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 030a 	bic.w	r3, r3, #10
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b087      	sub	sp, #28
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	60f8      	str	r0, [r7, #12]
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005aea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	621a      	str	r2, [r3, #32]
}
 8005b02:	bf00      	nop
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f043 0307 	orr.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	021a      	lsls	r2, r3, #8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	431a      	orrs	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d101      	bne.n	8005b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	e032      	b.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b082      	sub	sp, #8
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e03f      	b.n	8005cc8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb fd95 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2224      	movs	r2, #36	; 0x24
 8005c66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c78:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fb92 	bl	80063a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695a      	ldr	r2, [r3, #20]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c9e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cae:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b088      	sub	sp, #32
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	603b      	str	r3, [r7, #0]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	f040 8083 	bne.w	8005df8 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_UART_Transmit+0x2e>
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e07b      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_UART_Transmit+0x40>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e074      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2221      	movs	r2, #33	; 0x21
 8005d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005d26:	f7fc f923 	bl	8001f70 <HAL_GetTick>
 8005d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	88fa      	ldrh	r2, [r7, #6]
 8005d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d38:	e042      	b.n	8005dc0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d122      	bne.n	8005d98 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2180      	movs	r1, #128	; 0x80
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 f9b5 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e046      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	461a      	mov	r2, r3
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d7e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d103      	bne.n	8005d90 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	e017      	b.n	8005dc0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60bb      	str	r3, [r7, #8]
 8005d96:	e013      	b.n	8005dc0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2180      	movs	r1, #128	; 0x80
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f992 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e023      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	60ba      	str	r2, [r7, #8]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1b7      	bne.n	8005d3a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2140      	movs	r1, #64	; 0x40
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f979 	bl	80060cc <UART_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e00a      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d140      	bne.n	8005e9e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <HAL_UART_Receive_IT+0x26>
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e039      	b.n	8005ea0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Receive_IT+0x38>
 8005e36:	2302      	movs	r3, #2
 8005e38:	e032      	b.n	8005ea0 <HAL_UART_Receive_IT+0x9e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	88fa      	ldrh	r2, [r7, #6]
 8005e52:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2222      	movs	r2, #34	; 0x22
 8005e5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e78:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0201 	orr.w	r2, r2, #1
 8005e88:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0220 	orr.w	r2, r2, #32
 8005e98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	e000      	b.n	8005ea0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e9e:	2302      	movs	r3, #2
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b088      	sub	sp, #32
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10d      	bne.n	8005efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0320 	and.w	r3, r3, #32
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d008      	beq.n	8005efe <HAL_UART_IRQHandler+0x52>
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	f003 0320 	and.w	r3, r3, #32
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9d2 	bl	80062a0 <UART_Receive_IT>
      return;
 8005efc:	e0cc      	b.n	8006098 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80ab 	beq.w	800605c <HAL_UART_IRQHandler+0x1b0>
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d105      	bne.n	8005f1c <HAL_UART_IRQHandler+0x70>
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 80a0 	beq.w	800605c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_UART_IRQHandler+0x90>
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	f043 0201 	orr.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0304 	and.w	r3, r3, #4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_UART_IRQHandler+0xb0>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0301 	and.w	r3, r3, #1
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d005      	beq.n	8005f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	f043 0202 	orr.w	r2, r3, #2
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <HAL_UART_IRQHandler+0xd0>
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f74:	f043 0204 	orr.w	r2, r3, #4
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_UART_IRQHandler+0xf0>
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d005      	beq.n	8005f9c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	f043 0208 	orr.w	r2, r3, #8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d078      	beq.n	8006096 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d007      	beq.n	8005fbe <HAL_UART_IRQHandler+0x112>
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f971 	bl	80062a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd8:	f003 0308 	and.w	r3, r3, #8
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_UART_IRQHandler+0x13a>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d031      	beq.n	800604a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8ba 	bl	8006160 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d123      	bne.n	8006042 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006008:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	d013      	beq.n	800603a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <HAL_UART_IRQHandler+0x1f4>)
 8006018:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601e:	4618      	mov	r0, r3
 8006020:	f7fc f8d5 	bl	80021ce <HAL_DMA_Abort_IT>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d016      	beq.n	8006058 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006034:	4610      	mov	r0, r2
 8006036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006038:	e00e      	b.n	8006058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f83c 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e00a      	b.n	8006058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f838 	bl	80060b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	e006      	b.n	8006058 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f834 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006056:	e01e      	b.n	8006096 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	bf00      	nop
    return;
 800605a:	e01c      	b.n	8006096 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006062:	2b00      	cmp	r3, #0
 8006064:	d008      	beq.n	8006078 <HAL_UART_IRQHandler+0x1cc>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f8a7 	bl	80061c4 <UART_Transmit_IT>
    return;
 8006076:	e00f      	b.n	8006098 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <HAL_UART_IRQHandler+0x1ec>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f8ef 	bl	8006270 <UART_EndTransmit_IT>
    return;
 8006092:	bf00      	nop
 8006094:	e000      	b.n	8006098 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006096:	bf00      	nop
  }
}
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	0800619d 	.word	0x0800619d

080060a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	4613      	mov	r3, r2
 80060da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060dc:	e02c      	b.n	8006138 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e4:	d028      	beq.n	8006138 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x30>
 80060ec:	f7fb ff40 	bl	8001f70 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d21d      	bcs.n	8006138 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68da      	ldr	r2, [r3, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800610a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	695a      	ldr	r2, [r3, #20]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e00f      	b.n	8006158 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	68ba      	ldr	r2, [r7, #8]
 8006144:	429a      	cmp	r2, r3
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	429a      	cmp	r2, r3
 8006154:	d0c3      	beq.n	80060de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006176:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff ff7e 	bl	80060b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061bc:	bf00      	nop
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b21      	cmp	r3, #33	; 0x21
 80061d6:	d144      	bne.n	8006262 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d11a      	bne.n	8006218 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	461a      	mov	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061f6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	1c9a      	adds	r2, r3, #2
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	621a      	str	r2, [r3, #32]
 800620a:	e00e      	b.n	800622a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]
 8006216:	e008      	b.n	800622a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6211      	str	r1, [r2, #32]
 8006222:	781a      	ldrb	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29b      	uxth	r3, r3
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4619      	mov	r1, r3
 8006238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800624c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68da      	ldr	r2, [r3, #12]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800625c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e000      	b.n	8006264 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006262:	2302      	movs	r3, #2
  }
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006286:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff ff07 	bl	80060a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b22      	cmp	r3, #34	; 0x22
 80062b2:	d171      	bne.n	8006398 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062bc:	d123      	bne.n	8006306 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10e      	bne.n	80062ea <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d8:	b29a      	uxth	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	1c9a      	adds	r2, r3, #2
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	629a      	str	r2, [r3, #40]	; 0x28
 80062e8:	e029      	b.n	800633e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	629a      	str	r2, [r3, #40]	; 0x28
 8006304:	e01b      	b.n	800633e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6858      	ldr	r0, [r3, #4]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	6291      	str	r1, [r2, #40]	; 0x28
 800631e:	b2c2      	uxtb	r2, r0
 8006320:	701a      	strb	r2, [r3, #0]
 8006322:	e00c      	b.n	800633e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	b2da      	uxtb	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	1c58      	adds	r0, r3, #1
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	6288      	str	r0, [r1, #40]	; 0x28
 8006336:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800633a:	b2d2      	uxtb	r2, r2
 800633c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4619      	mov	r1, r3
 800634c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800634e:	2b00      	cmp	r3, #0
 8006350:	d120      	bne.n	8006394 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0220 	bic.w	r2, r2, #32
 8006360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0201 	bic.w	r2, r2, #1
 8006380:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fa fe96 	bl	80010bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	e002      	b.n	800639a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006394:	2300      	movs	r3, #0
 8006396:	e000      	b.n	800639a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006398:	2302      	movs	r3, #2
  }
}
 800639a:	4618      	mov	r0, r3
 800639c:	3710      	adds	r7, #16
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063a4:	b5b0      	push	{r4, r5, r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063e4:	f023 030c 	bic.w	r3, r3, #12
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	68f9      	ldr	r1, [r7, #12]
 80063ee:	430b      	orrs	r3, r1
 80063f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006410:	f040 80e4 	bne.w	80065dc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4aab      	ldr	r2, [pc, #684]	; (80066c8 <UART_SetConfig+0x324>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d004      	beq.n	8006428 <UART_SetConfig+0x84>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4aaa      	ldr	r2, [pc, #680]	; (80066cc <UART_SetConfig+0x328>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d16c      	bne.n	8006502 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006428:	f7fe fdba 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 800642c:	4602      	mov	r2, r0
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009a      	lsls	r2, r3, #2
 8006436:	441a      	add	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006442:	4aa3      	ldr	r2, [pc, #652]	; (80066d0 <UART_SetConfig+0x32c>)
 8006444:	fba2 2303 	umull	r2, r3, r2, r3
 8006448:	095b      	lsrs	r3, r3, #5
 800644a:	011c      	lsls	r4, r3, #4
 800644c:	f7fe fda8 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 8006450:	4602      	mov	r2, r0
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009a      	lsls	r2, r3, #2
 800645a:	441a      	add	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	fbb2 f5f3 	udiv	r5, r2, r3
 8006466:	f7fe fd9b 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 800646a:	4602      	mov	r2, r0
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009a      	lsls	r2, r3, #2
 8006474:	441a      	add	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	4a93      	ldr	r2, [pc, #588]	; (80066d0 <UART_SetConfig+0x32c>)
 8006482:	fba2 2303 	umull	r2, r3, r2, r3
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2264      	movs	r2, #100	; 0x64
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	1aeb      	subs	r3, r5, r3
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	3332      	adds	r3, #50	; 0x32
 8006494:	4a8e      	ldr	r2, [pc, #568]	; (80066d0 <UART_SetConfig+0x32c>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064a2:	441c      	add	r4, r3
 80064a4:	f7fe fd7c 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 80064a8:	4602      	mov	r2, r0
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009a      	lsls	r2, r3, #2
 80064b2:	441a      	add	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80064be:	f7fe fd6f 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 80064c2:	4602      	mov	r2, r0
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	441a      	add	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064d8:	4a7d      	ldr	r2, [pc, #500]	; (80066d0 <UART_SetConfig+0x32c>)
 80064da:	fba2 2303 	umull	r2, r3, r2, r3
 80064de:	095b      	lsrs	r3, r3, #5
 80064e0:	2264      	movs	r2, #100	; 0x64
 80064e2:	fb02 f303 	mul.w	r3, r2, r3
 80064e6:	1aeb      	subs	r3, r5, r3
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	3332      	adds	r3, #50	; 0x32
 80064ec:	4a78      	ldr	r2, [pc, #480]	; (80066d0 <UART_SetConfig+0x32c>)
 80064ee:	fba2 2303 	umull	r2, r3, r2, r3
 80064f2:	095b      	lsrs	r3, r3, #5
 80064f4:	f003 0207 	and.w	r2, r3, #7
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4422      	add	r2, r4
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	e154      	b.n	80067ac <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006502:	f7fe fd39 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006506:	4602      	mov	r2, r0
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009a      	lsls	r2, r3, #2
 8006510:	441a      	add	r2, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	4a6c      	ldr	r2, [pc, #432]	; (80066d0 <UART_SetConfig+0x32c>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	011c      	lsls	r4, r3, #4
 8006526:	f7fe fd27 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800652a:	4602      	mov	r2, r0
 800652c:	4613      	mov	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	4413      	add	r3, r2
 8006532:	009a      	lsls	r2, r3, #2
 8006534:	441a      	add	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	fbb2 f5f3 	udiv	r5, r2, r3
 8006540:	f7fe fd1a 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006544:	4602      	mov	r2, r0
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009a      	lsls	r2, r3, #2
 800654e:	441a      	add	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	fbb2 f3f3 	udiv	r3, r2, r3
 800655a:	4a5d      	ldr	r2, [pc, #372]	; (80066d0 <UART_SetConfig+0x32c>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2264      	movs	r2, #100	; 0x64
 8006564:	fb02 f303 	mul.w	r3, r2, r3
 8006568:	1aeb      	subs	r3, r5, r3
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	3332      	adds	r3, #50	; 0x32
 800656e:	4a58      	ldr	r2, [pc, #352]	; (80066d0 <UART_SetConfig+0x32c>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800657c:	441c      	add	r4, r3
 800657e:	f7fe fcfb 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006582:	4602      	mov	r2, r0
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009a      	lsls	r2, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	fbb2 f5f3 	udiv	r5, r2, r3
 8006598:	f7fe fcee 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800659c:	4602      	mov	r2, r0
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009a      	lsls	r2, r3, #2
 80065a6:	441a      	add	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	4a47      	ldr	r2, [pc, #284]	; (80066d0 <UART_SetConfig+0x32c>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	2264      	movs	r2, #100	; 0x64
 80065bc:	fb02 f303 	mul.w	r3, r2, r3
 80065c0:	1aeb      	subs	r3, r5, r3
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	3332      	adds	r3, #50	; 0x32
 80065c6:	4a42      	ldr	r2, [pc, #264]	; (80066d0 <UART_SetConfig+0x32c>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	095b      	lsrs	r3, r3, #5
 80065ce:	f003 0207 	and.w	r2, r3, #7
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4422      	add	r2, r4
 80065d8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80065da:	e0e7      	b.n	80067ac <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a39      	ldr	r2, [pc, #228]	; (80066c8 <UART_SetConfig+0x324>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <UART_SetConfig+0x24c>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a38      	ldr	r2, [pc, #224]	; (80066cc <UART_SetConfig+0x328>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d171      	bne.n	80066d4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80065f0:	f7fe fcd6 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 80065f4:	4602      	mov	r2, r0
 80065f6:	4613      	mov	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	4413      	add	r3, r2
 80065fc:	009a      	lsls	r2, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	fbb2 f3f3 	udiv	r3, r2, r3
 800660a:	4a31      	ldr	r2, [pc, #196]	; (80066d0 <UART_SetConfig+0x32c>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	011c      	lsls	r4, r3, #4
 8006614:	f7fe fcc4 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 8006618:	4602      	mov	r2, r0
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	009a      	lsls	r2, r3, #2
 8006622:	441a      	add	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	fbb2 f5f3 	udiv	r5, r2, r3
 800662e:	f7fe fcb7 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 8006632:	4602      	mov	r2, r0
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009a      	lsls	r2, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	fbb2 f3f3 	udiv	r3, r2, r3
 8006648:	4a21      	ldr	r2, [pc, #132]	; (80066d0 <UART_SetConfig+0x32c>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	2264      	movs	r2, #100	; 0x64
 8006652:	fb02 f303 	mul.w	r3, r2, r3
 8006656:	1aeb      	subs	r3, r5, r3
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	3332      	adds	r3, #50	; 0x32
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <UART_SetConfig+0x32c>)
 800665e:	fba2 2303 	umull	r2, r3, r2, r3
 8006662:	095b      	lsrs	r3, r3, #5
 8006664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006668:	441c      	add	r4, r3
 800666a:	f7fe fc99 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 800666e:	4602      	mov	r2, r0
 8006670:	4613      	mov	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	009a      	lsls	r2, r3, #2
 8006678:	441a      	add	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	fbb2 f5f3 	udiv	r5, r2, r3
 8006684:	f7fe fc8c 	bl	8004fa0 <HAL_RCC_GetPCLK2Freq>
 8006688:	4602      	mov	r2, r0
 800668a:	4613      	mov	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	4413      	add	r3, r2
 8006690:	009a      	lsls	r2, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	fbb2 f3f3 	udiv	r3, r2, r3
 800669e:	4a0c      	ldr	r2, [pc, #48]	; (80066d0 <UART_SetConfig+0x32c>)
 80066a0:	fba2 2303 	umull	r2, r3, r2, r3
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	2264      	movs	r2, #100	; 0x64
 80066a8:	fb02 f303 	mul.w	r3, r2, r3
 80066ac:	1aeb      	subs	r3, r5, r3
 80066ae:	011b      	lsls	r3, r3, #4
 80066b0:	3332      	adds	r3, #50	; 0x32
 80066b2:	4a07      	ldr	r2, [pc, #28]	; (80066d0 <UART_SetConfig+0x32c>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	f003 020f 	and.w	r2, r3, #15
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4422      	add	r2, r4
 80066c4:	609a      	str	r2, [r3, #8]
 80066c6:	e071      	b.n	80067ac <UART_SetConfig+0x408>
 80066c8:	40011000 	.word	0x40011000
 80066cc:	40011400 	.word	0x40011400
 80066d0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80066d4:	f7fe fc50 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80066d8:	4602      	mov	r2, r0
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009a      	lsls	r2, r3, #2
 80066e2:	441a      	add	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ee:	4a31      	ldr	r2, [pc, #196]	; (80067b4 <UART_SetConfig+0x410>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	011c      	lsls	r4, r3, #4
 80066f8:	f7fe fc3e 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 80066fc:	4602      	mov	r2, r0
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009a      	lsls	r2, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	fbb2 f5f3 	udiv	r5, r2, r3
 8006712:	f7fe fc31 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006716:	4602      	mov	r2, r0
 8006718:	4613      	mov	r3, r2
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	4413      	add	r3, r2
 800671e:	009a      	lsls	r2, r3, #2
 8006720:	441a      	add	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	fbb2 f3f3 	udiv	r3, r2, r3
 800672c:	4a21      	ldr	r2, [pc, #132]	; (80067b4 <UART_SetConfig+0x410>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	2264      	movs	r2, #100	; 0x64
 8006736:	fb02 f303 	mul.w	r3, r2, r3
 800673a:	1aeb      	subs	r3, r5, r3
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	3332      	adds	r3, #50	; 0x32
 8006740:	4a1c      	ldr	r2, [pc, #112]	; (80067b4 <UART_SetConfig+0x410>)
 8006742:	fba2 2303 	umull	r2, r3, r2, r3
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800674c:	441c      	add	r4, r3
 800674e:	f7fe fc13 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 8006752:	4602      	mov	r2, r0
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009a      	lsls	r2, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	fbb2 f5f3 	udiv	r5, r2, r3
 8006768:	f7fe fc06 	bl	8004f78 <HAL_RCC_GetPCLK1Freq>
 800676c:	4602      	mov	r2, r0
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009a      	lsls	r2, r3, #2
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006782:	4a0c      	ldr	r2, [pc, #48]	; (80067b4 <UART_SetConfig+0x410>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	2264      	movs	r2, #100	; 0x64
 800678c:	fb02 f303 	mul.w	r3, r2, r3
 8006790:	1aeb      	subs	r3, r5, r3
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	3332      	adds	r3, #50	; 0x32
 8006796:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <UART_SetConfig+0x410>)
 8006798:	fba2 2303 	umull	r2, r3, r2, r3
 800679c:	095b      	lsrs	r3, r3, #5
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4422      	add	r2, r4
 80067a8:	609a      	str	r2, [r3, #8]
}
 80067aa:	e7ff      	b.n	80067ac <UART_SetConfig+0x408>
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bdb0      	pop	{r4, r5, r7, pc}
 80067b4:	51eb851f 	.word	0x51eb851f

080067b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d029      	beq.n	8006826 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80067de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067e2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80067ec:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80067f2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80067f8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80067fe:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006804:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800680a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006810:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006816:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	e034      	b.n	8006890 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006832:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800683c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006842:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006856:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800685a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006864:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800686a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006870:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006876:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800687c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4313      	orrs	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800689e:	b480      	push	{r7}
 80068a0:	b087      	sub	sp, #28
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80068aa:	2300      	movs	r3, #0
 80068ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d02e      	beq.n	8006916 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80068c4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80068d4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	3b01      	subs	r3, #1
 80068dc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80068de:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	3b01      	subs	r3, #1
 80068e6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80068e8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80068f2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80068fc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	3b01      	subs	r3, #1
 8006904:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006906:	4313      	orrs	r3, r2
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	e03b      	b.n	800698e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006926:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	3b01      	subs	r3, #1
 800692e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	3b01      	subs	r3, #1
 8006936:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006938:	4313      	orrs	r3, r2
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800694c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	3b01      	subs	r3, #1
 800695a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800695c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	3b01      	subs	r3, #1
 8006964:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8006966:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	3b01      	subs	r3, #1
 800696e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8006970:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	3b01      	subs	r3, #1
 8006978:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800697a:	4313      	orrs	r3, r2
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800699c:	b084      	sub	sp, #16
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	f107 001c 	add.w	r0, r7, #28
 80069aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d122      	bne.n	80069fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80069dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d105      	bne.n	80069ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f902 	bl	8006bf8 <USB_CoreReset>
 80069f4:	4603      	mov	r3, r0
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e01a      	b.n	8006a30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f8f6 	bl	8006bf8 <USB_CoreReset>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
 8006a22:	e005      	b.n	8006a30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d10b      	bne.n	8006a4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f043 0206 	orr.w	r2, r3, #6
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a5a:	b004      	add	sp, #16
 8006a5c:	4770      	bx	lr

08006a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a98:	78fb      	ldrb	r3, [r7, #3]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d106      	bne.n	8006aac <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	60da      	str	r2, [r3, #12]
 8006aaa:	e00b      	b.n	8006ac4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006aac:	78fb      	ldrb	r3, [r7, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60da      	str	r2, [r3, #12]
 8006abe:	e001      	b.n	8006ac4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e003      	b.n	8006acc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006ac4:	2032      	movs	r0, #50	; 0x32
 8006ac6:	f7fb fa5f 	bl	8001f88 <HAL_Delay>

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	019b      	lsls	r3, r3, #6
 8006ae6:	f043 0220 	orr.w	r2, r3, #32
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a09      	ldr	r2, [pc, #36]	; (8006b1c <USB_FlushTxFifo+0x48>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d901      	bls.n	8006b00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e006      	b.n	8006b0e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d0f0      	beq.n	8006aee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	00030d40 	.word	0x00030d40

08006b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2210      	movs	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <USB_FlushRxFifo+0x40>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e006      	b.n	8006b52 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0310 	and.w	r3, r3, #16
 8006b4c:	2b10      	cmp	r3, #16
 8006b4e:	d0f0      	beq.n	8006b32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b089      	sub	sp, #36	; 0x24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	4613      	mov	r3, r2
 8006b70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006b7a:	88fb      	ldrh	r3, [r7, #6]
 8006b7c:	3303      	adds	r3, #3
 8006b7e:	089b      	lsrs	r3, r3, #2
 8006b80:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	61bb      	str	r3, [r7, #24]
 8006b86:	e00b      	b.n	8006ba0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	3304      	adds	r3, #4
 8006b98:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d3ef      	bcc.n	8006b88 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006ba8:	69fb      	ldr	r3, [r7, #28]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3724      	adds	r7, #36	; 0x24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b085      	sub	sp, #20
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0301 	and.w	r3, r3, #1
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	3301      	adds	r3, #1
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	4a13      	ldr	r2, [pc, #76]	; (8006c5c <USB_CoreReset+0x64>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e01b      	b.n	8006c4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	daf2      	bge.n	8006c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	f043 0201 	orr.w	r2, r3, #1
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <USB_CoreReset+0x64>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e006      	b.n	8006c4e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d0f0      	beq.n	8006c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	00030d40 	.word	0x00030d40

08006c60 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c60:	b084      	sub	sp, #16
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	f107 001c 	add.w	r0, r7, #28
 8006c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d018      	beq.n	8006ce4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d10a      	bne.n	8006cce <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cc6:	f043 0304 	orr.w	r3, r3, #4
 8006cca:	6013      	str	r3, [r2, #0]
 8006ccc:	e014      	b.n	8006cf8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cdc:	f023 0304 	bic.w	r3, r3, #4
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	e009      	b.n	8006cf8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006cf2:	f023 0304 	bic.w	r3, r3, #4
 8006cf6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006cf8:	2110      	movs	r1, #16
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff feea 	bl	8006ad4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7ff ff0d 	bl	8006b20 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e015      	b.n	8006d38 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	461a      	mov	r2, r3
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3e5      	bcc.n	8006d0c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006d40:	2101      	movs	r1, #1
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f882 	bl	8006e4c <USB_DriveVbus>

  HAL_Delay(200U);
 8006d48:	20c8      	movs	r0, #200	; 0xc8
 8006d4a:	f7fb f91d 	bl	8001f88 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f04f 32ff 	mov.w	r2, #4294967295
 8006d5a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a14      	ldr	r2, [pc, #80]	; (8006dc4 <USB_HostInit+0x164>)
 8006d74:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a13      	ldr	r2, [pc, #76]	; (8006dc8 <USB_HostInit+0x168>)
 8006d7a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006d7e:	e009      	b.n	8006d94 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2280      	movs	r2, #128	; 0x80
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a10      	ldr	r2, [pc, #64]	; (8006dcc <USB_HostInit+0x16c>)
 8006d8a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a10      	ldr	r2, [pc, #64]	; (8006dd0 <USB_HostInit+0x170>)
 8006d90:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	f043 0210 	orr.w	r2, r3, #16
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <USB_HostInit+0x174>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006dbe:	b004      	add	sp, #16
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	01000200 	.word	0x01000200
 8006dc8:	00e00300 	.word	0x00e00300
 8006dcc:	00600080 	.word	0x00600080
 8006dd0:	004000e0 	.word	0x004000e0
 8006dd4:	a3200008 	.word	0xa3200008

08006dd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	68f9      	ldr	r1, [r7, #12]
 8006e0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006e10:	4313      	orrs	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d107      	bne.n	8006e2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e20:	461a      	mov	r2, r3
 8006e22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006e26:	6053      	str	r3, [r2, #4]
 8006e28:	e009      	b.n	8006e3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d106      	bne.n	8006e3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e36:	461a      	mov	r2, r3
 8006e38:	f241 7370 	movw	r3, #6000	; 0x1770
 8006e3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006e70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d109      	bne.n	8006e90 <USB_DriveVbus+0x44>
 8006e7c:	78fb      	ldrb	r3, [r7, #3]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d106      	bne.n	8006e90 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006e8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e8e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	d109      	bne.n	8006eb0 <USB_DriveVbus+0x64>
 8006e9c:	78fb      	ldrb	r3, [r7, #3]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006eae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	b29b      	uxth	r3, r3
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	015a      	lsls	r2, r3, #5
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	0c9b      	lsrs	r3, r3, #18
 8006f08:	f003 0303 	and.w	r3, r3, #3
 8006f0c:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <USB_HC_Halt+0x3a>
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d16c      	bne.n	8006ff4 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	0151      	lsls	r1, r2, #5
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	440a      	add	r2, r1
 8006f30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f38:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d143      	bne.n	8006fce <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f84:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	0151      	lsls	r1, r2, #5
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	440a      	add	r2, r1
 8006f9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fa4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fb2:	d81d      	bhi.n	8006ff0 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fca:	d0ec      	beq.n	8006fa6 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fcc:	e080      	b.n	80070d0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fe8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fec:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fee:	e06f      	b.n	80070d0 <USB_HC_Halt+0x1f0>
          break;
 8006ff0:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006ff2:	e06d      	b.n	80070d0 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	693a      	ldr	r2, [r7, #16]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800700e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007012:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d143      	bne.n	80070ac <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	440a      	add	r2, r1
 800703a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800703e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007042:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4413      	add	r3, r2
 800704c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	0151      	lsls	r1, r2, #5
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	440a      	add	r2, r1
 800705a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800705e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007062:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	015a      	lsls	r2, r3, #5
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4413      	add	r3, r2
 800706c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	0151      	lsls	r1, r2, #5
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	440a      	add	r2, r1
 800707a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800707e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007082:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3301      	adds	r3, #1
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007090:	d81d      	bhi.n	80070ce <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	4413      	add	r3, r2
 800709a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070a8:	d0ec      	beq.n	8007084 <USB_HC_Halt+0x1a4>
 80070aa:	e011      	b.n	80070d0 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	015a      	lsls	r2, r3, #5
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	4413      	add	r3, r2
 80070b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	0151      	lsls	r1, r2, #5
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	440a      	add	r2, r1
 80070c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	e000      	b.n	80070d0 <USB_HC_Halt+0x1f0>
          break;
 80070ce:	bf00      	nop
    }
  }

  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
	...

080070e0 <__errno>:
 80070e0:	4b01      	ldr	r3, [pc, #4]	; (80070e8 <__errno+0x8>)
 80070e2:	6818      	ldr	r0, [r3, #0]
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000008 	.word	0x20000008

080070ec <__libc_init_array>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	4e0d      	ldr	r6, [pc, #52]	; (8007124 <__libc_init_array+0x38>)
 80070f0:	4c0d      	ldr	r4, [pc, #52]	; (8007128 <__libc_init_array+0x3c>)
 80070f2:	1ba4      	subs	r4, r4, r6
 80070f4:	10a4      	asrs	r4, r4, #2
 80070f6:	2500      	movs	r5, #0
 80070f8:	42a5      	cmp	r5, r4
 80070fa:	d109      	bne.n	8007110 <__libc_init_array+0x24>
 80070fc:	4e0b      	ldr	r6, [pc, #44]	; (800712c <__libc_init_array+0x40>)
 80070fe:	4c0c      	ldr	r4, [pc, #48]	; (8007130 <__libc_init_array+0x44>)
 8007100:	f001 f94a 	bl	8008398 <_init>
 8007104:	1ba4      	subs	r4, r4, r6
 8007106:	10a4      	asrs	r4, r4, #2
 8007108:	2500      	movs	r5, #0
 800710a:	42a5      	cmp	r5, r4
 800710c:	d105      	bne.n	800711a <__libc_init_array+0x2e>
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007114:	4798      	blx	r3
 8007116:	3501      	adds	r5, #1
 8007118:	e7ee      	b.n	80070f8 <__libc_init_array+0xc>
 800711a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800711e:	4798      	blx	r3
 8007120:	3501      	adds	r5, #1
 8007122:	e7f2      	b.n	800710a <__libc_init_array+0x1e>
 8007124:	0800879c 	.word	0x0800879c
 8007128:	0800879c 	.word	0x0800879c
 800712c:	0800879c 	.word	0x0800879c
 8007130:	080087a0 	.word	0x080087a0

08007134 <malloc>:
 8007134:	4b02      	ldr	r3, [pc, #8]	; (8007140 <malloc+0xc>)
 8007136:	4601      	mov	r1, r0
 8007138:	6818      	ldr	r0, [r3, #0]
 800713a:	f000 b859 	b.w	80071f0 <_malloc_r>
 800713e:	bf00      	nop
 8007140:	20000008 	.word	0x20000008

08007144 <memset>:
 8007144:	4402      	add	r2, r0
 8007146:	4603      	mov	r3, r0
 8007148:	4293      	cmp	r3, r2
 800714a:	d100      	bne.n	800714e <memset+0xa>
 800714c:	4770      	bx	lr
 800714e:	f803 1b01 	strb.w	r1, [r3], #1
 8007152:	e7f9      	b.n	8007148 <memset+0x4>

08007154 <_free_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4605      	mov	r5, r0
 8007158:	2900      	cmp	r1, #0
 800715a:	d045      	beq.n	80071e8 <_free_r+0x94>
 800715c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007160:	1f0c      	subs	r4, r1, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfb8      	it	lt
 8007166:	18e4      	addlt	r4, r4, r3
 8007168:	f000 fbfc 	bl	8007964 <__malloc_lock>
 800716c:	4a1f      	ldr	r2, [pc, #124]	; (80071ec <_free_r+0x98>)
 800716e:	6813      	ldr	r3, [r2, #0]
 8007170:	4610      	mov	r0, r2
 8007172:	b933      	cbnz	r3, 8007182 <_free_r+0x2e>
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	6014      	str	r4, [r2, #0]
 8007178:	4628      	mov	r0, r5
 800717a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800717e:	f000 bbf2 	b.w	8007966 <__malloc_unlock>
 8007182:	42a3      	cmp	r3, r4
 8007184:	d90c      	bls.n	80071a0 <_free_r+0x4c>
 8007186:	6821      	ldr	r1, [r4, #0]
 8007188:	1862      	adds	r2, r4, r1
 800718a:	4293      	cmp	r3, r2
 800718c:	bf04      	itt	eq
 800718e:	681a      	ldreq	r2, [r3, #0]
 8007190:	685b      	ldreq	r3, [r3, #4]
 8007192:	6063      	str	r3, [r4, #4]
 8007194:	bf04      	itt	eq
 8007196:	1852      	addeq	r2, r2, r1
 8007198:	6022      	streq	r2, [r4, #0]
 800719a:	6004      	str	r4, [r0, #0]
 800719c:	e7ec      	b.n	8007178 <_free_r+0x24>
 800719e:	4613      	mov	r3, r2
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	b10a      	cbz	r2, 80071a8 <_free_r+0x54>
 80071a4:	42a2      	cmp	r2, r4
 80071a6:	d9fa      	bls.n	800719e <_free_r+0x4a>
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	1858      	adds	r0, r3, r1
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d10b      	bne.n	80071c8 <_free_r+0x74>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	4401      	add	r1, r0
 80071b4:	1858      	adds	r0, r3, r1
 80071b6:	4282      	cmp	r2, r0
 80071b8:	6019      	str	r1, [r3, #0]
 80071ba:	d1dd      	bne.n	8007178 <_free_r+0x24>
 80071bc:	6810      	ldr	r0, [r2, #0]
 80071be:	6852      	ldr	r2, [r2, #4]
 80071c0:	605a      	str	r2, [r3, #4]
 80071c2:	4401      	add	r1, r0
 80071c4:	6019      	str	r1, [r3, #0]
 80071c6:	e7d7      	b.n	8007178 <_free_r+0x24>
 80071c8:	d902      	bls.n	80071d0 <_free_r+0x7c>
 80071ca:	230c      	movs	r3, #12
 80071cc:	602b      	str	r3, [r5, #0]
 80071ce:	e7d3      	b.n	8007178 <_free_r+0x24>
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	1821      	adds	r1, r4, r0
 80071d4:	428a      	cmp	r2, r1
 80071d6:	bf04      	itt	eq
 80071d8:	6811      	ldreq	r1, [r2, #0]
 80071da:	6852      	ldreq	r2, [r2, #4]
 80071dc:	6062      	str	r2, [r4, #4]
 80071de:	bf04      	itt	eq
 80071e0:	1809      	addeq	r1, r1, r0
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	605c      	str	r4, [r3, #4]
 80071e6:	e7c7      	b.n	8007178 <_free_r+0x24>
 80071e8:	bd38      	pop	{r3, r4, r5, pc}
 80071ea:	bf00      	nop
 80071ec:	20000090 	.word	0x20000090

080071f0 <_malloc_r>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	1ccd      	adds	r5, r1, #3
 80071f4:	f025 0503 	bic.w	r5, r5, #3
 80071f8:	3508      	adds	r5, #8
 80071fa:	2d0c      	cmp	r5, #12
 80071fc:	bf38      	it	cc
 80071fe:	250c      	movcc	r5, #12
 8007200:	2d00      	cmp	r5, #0
 8007202:	4606      	mov	r6, r0
 8007204:	db01      	blt.n	800720a <_malloc_r+0x1a>
 8007206:	42a9      	cmp	r1, r5
 8007208:	d903      	bls.n	8007212 <_malloc_r+0x22>
 800720a:	230c      	movs	r3, #12
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	2000      	movs	r0, #0
 8007210:	bd70      	pop	{r4, r5, r6, pc}
 8007212:	f000 fba7 	bl	8007964 <__malloc_lock>
 8007216:	4a21      	ldr	r2, [pc, #132]	; (800729c <_malloc_r+0xac>)
 8007218:	6814      	ldr	r4, [r2, #0]
 800721a:	4621      	mov	r1, r4
 800721c:	b991      	cbnz	r1, 8007244 <_malloc_r+0x54>
 800721e:	4c20      	ldr	r4, [pc, #128]	; (80072a0 <_malloc_r+0xb0>)
 8007220:	6823      	ldr	r3, [r4, #0]
 8007222:	b91b      	cbnz	r3, 800722c <_malloc_r+0x3c>
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f8b9 	bl	800739c <_sbrk_r>
 800722a:	6020      	str	r0, [r4, #0]
 800722c:	4629      	mov	r1, r5
 800722e:	4630      	mov	r0, r6
 8007230:	f000 f8b4 	bl	800739c <_sbrk_r>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d124      	bne.n	8007282 <_malloc_r+0x92>
 8007238:	230c      	movs	r3, #12
 800723a:	6033      	str	r3, [r6, #0]
 800723c:	4630      	mov	r0, r6
 800723e:	f000 fb92 	bl	8007966 <__malloc_unlock>
 8007242:	e7e4      	b.n	800720e <_malloc_r+0x1e>
 8007244:	680b      	ldr	r3, [r1, #0]
 8007246:	1b5b      	subs	r3, r3, r5
 8007248:	d418      	bmi.n	800727c <_malloc_r+0x8c>
 800724a:	2b0b      	cmp	r3, #11
 800724c:	d90f      	bls.n	800726e <_malloc_r+0x7e>
 800724e:	600b      	str	r3, [r1, #0]
 8007250:	50cd      	str	r5, [r1, r3]
 8007252:	18cc      	adds	r4, r1, r3
 8007254:	4630      	mov	r0, r6
 8007256:	f000 fb86 	bl	8007966 <__malloc_unlock>
 800725a:	f104 000b 	add.w	r0, r4, #11
 800725e:	1d23      	adds	r3, r4, #4
 8007260:	f020 0007 	bic.w	r0, r0, #7
 8007264:	1ac3      	subs	r3, r0, r3
 8007266:	d0d3      	beq.n	8007210 <_malloc_r+0x20>
 8007268:	425a      	negs	r2, r3
 800726a:	50e2      	str	r2, [r4, r3]
 800726c:	e7d0      	b.n	8007210 <_malloc_r+0x20>
 800726e:	428c      	cmp	r4, r1
 8007270:	684b      	ldr	r3, [r1, #4]
 8007272:	bf16      	itet	ne
 8007274:	6063      	strne	r3, [r4, #4]
 8007276:	6013      	streq	r3, [r2, #0]
 8007278:	460c      	movne	r4, r1
 800727a:	e7eb      	b.n	8007254 <_malloc_r+0x64>
 800727c:	460c      	mov	r4, r1
 800727e:	6849      	ldr	r1, [r1, #4]
 8007280:	e7cc      	b.n	800721c <_malloc_r+0x2c>
 8007282:	1cc4      	adds	r4, r0, #3
 8007284:	f024 0403 	bic.w	r4, r4, #3
 8007288:	42a0      	cmp	r0, r4
 800728a:	d005      	beq.n	8007298 <_malloc_r+0xa8>
 800728c:	1a21      	subs	r1, r4, r0
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f884 	bl	800739c <_sbrk_r>
 8007294:	3001      	adds	r0, #1
 8007296:	d0cf      	beq.n	8007238 <_malloc_r+0x48>
 8007298:	6025      	str	r5, [r4, #0]
 800729a:	e7db      	b.n	8007254 <_malloc_r+0x64>
 800729c:	20000090 	.word	0x20000090
 80072a0:	20000094 	.word	0x20000094

080072a4 <iprintf>:
 80072a4:	b40f      	push	{r0, r1, r2, r3}
 80072a6:	4b0a      	ldr	r3, [pc, #40]	; (80072d0 <iprintf+0x2c>)
 80072a8:	b513      	push	{r0, r1, r4, lr}
 80072aa:	681c      	ldr	r4, [r3, #0]
 80072ac:	b124      	cbz	r4, 80072b8 <iprintf+0x14>
 80072ae:	69a3      	ldr	r3, [r4, #24]
 80072b0:	b913      	cbnz	r3, 80072b8 <iprintf+0x14>
 80072b2:	4620      	mov	r0, r4
 80072b4:	f000 fa68 	bl	8007788 <__sinit>
 80072b8:	ab05      	add	r3, sp, #20
 80072ba:	9a04      	ldr	r2, [sp, #16]
 80072bc:	68a1      	ldr	r1, [r4, #8]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	4620      	mov	r0, r4
 80072c2:	f000 fccd 	bl	8007c60 <_vfiprintf_r>
 80072c6:	b002      	add	sp, #8
 80072c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072cc:	b004      	add	sp, #16
 80072ce:	4770      	bx	lr
 80072d0:	20000008 	.word	0x20000008

080072d4 <_puts_r>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	460e      	mov	r6, r1
 80072d8:	4605      	mov	r5, r0
 80072da:	b118      	cbz	r0, 80072e4 <_puts_r+0x10>
 80072dc:	6983      	ldr	r3, [r0, #24]
 80072de:	b90b      	cbnz	r3, 80072e4 <_puts_r+0x10>
 80072e0:	f000 fa52 	bl	8007788 <__sinit>
 80072e4:	69ab      	ldr	r3, [r5, #24]
 80072e6:	68ac      	ldr	r4, [r5, #8]
 80072e8:	b913      	cbnz	r3, 80072f0 <_puts_r+0x1c>
 80072ea:	4628      	mov	r0, r5
 80072ec:	f000 fa4c 	bl	8007788 <__sinit>
 80072f0:	4b23      	ldr	r3, [pc, #140]	; (8007380 <_puts_r+0xac>)
 80072f2:	429c      	cmp	r4, r3
 80072f4:	d117      	bne.n	8007326 <_puts_r+0x52>
 80072f6:	686c      	ldr	r4, [r5, #4]
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	071b      	lsls	r3, r3, #28
 80072fc:	d51d      	bpl.n	800733a <_puts_r+0x66>
 80072fe:	6923      	ldr	r3, [r4, #16]
 8007300:	b1db      	cbz	r3, 800733a <_puts_r+0x66>
 8007302:	3e01      	subs	r6, #1
 8007304:	68a3      	ldr	r3, [r4, #8]
 8007306:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800730a:	3b01      	subs	r3, #1
 800730c:	60a3      	str	r3, [r4, #8]
 800730e:	b9e9      	cbnz	r1, 800734c <_puts_r+0x78>
 8007310:	2b00      	cmp	r3, #0
 8007312:	da2e      	bge.n	8007372 <_puts_r+0x9e>
 8007314:	4622      	mov	r2, r4
 8007316:	210a      	movs	r1, #10
 8007318:	4628      	mov	r0, r5
 800731a:	f000 f885 	bl	8007428 <__swbuf_r>
 800731e:	3001      	adds	r0, #1
 8007320:	d011      	beq.n	8007346 <_puts_r+0x72>
 8007322:	200a      	movs	r0, #10
 8007324:	e011      	b.n	800734a <_puts_r+0x76>
 8007326:	4b17      	ldr	r3, [pc, #92]	; (8007384 <_puts_r+0xb0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	d101      	bne.n	8007330 <_puts_r+0x5c>
 800732c:	68ac      	ldr	r4, [r5, #8]
 800732e:	e7e3      	b.n	80072f8 <_puts_r+0x24>
 8007330:	4b15      	ldr	r3, [pc, #84]	; (8007388 <_puts_r+0xb4>)
 8007332:	429c      	cmp	r4, r3
 8007334:	bf08      	it	eq
 8007336:	68ec      	ldreq	r4, [r5, #12]
 8007338:	e7de      	b.n	80072f8 <_puts_r+0x24>
 800733a:	4621      	mov	r1, r4
 800733c:	4628      	mov	r0, r5
 800733e:	f000 f8c5 	bl	80074cc <__swsetup_r>
 8007342:	2800      	cmp	r0, #0
 8007344:	d0dd      	beq.n	8007302 <_puts_r+0x2e>
 8007346:	f04f 30ff 	mov.w	r0, #4294967295
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	2b00      	cmp	r3, #0
 800734e:	da04      	bge.n	800735a <_puts_r+0x86>
 8007350:	69a2      	ldr	r2, [r4, #24]
 8007352:	429a      	cmp	r2, r3
 8007354:	dc06      	bgt.n	8007364 <_puts_r+0x90>
 8007356:	290a      	cmp	r1, #10
 8007358:	d004      	beq.n	8007364 <_puts_r+0x90>
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	1c5a      	adds	r2, r3, #1
 800735e:	6022      	str	r2, [r4, #0]
 8007360:	7019      	strb	r1, [r3, #0]
 8007362:	e7cf      	b.n	8007304 <_puts_r+0x30>
 8007364:	4622      	mov	r2, r4
 8007366:	4628      	mov	r0, r5
 8007368:	f000 f85e 	bl	8007428 <__swbuf_r>
 800736c:	3001      	adds	r0, #1
 800736e:	d1c9      	bne.n	8007304 <_puts_r+0x30>
 8007370:	e7e9      	b.n	8007346 <_puts_r+0x72>
 8007372:	6823      	ldr	r3, [r4, #0]
 8007374:	200a      	movs	r0, #10
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	6022      	str	r2, [r4, #0]
 800737a:	7018      	strb	r0, [r3, #0]
 800737c:	e7e5      	b.n	800734a <_puts_r+0x76>
 800737e:	bf00      	nop
 8007380:	08008720 	.word	0x08008720
 8007384:	08008740 	.word	0x08008740
 8007388:	08008700 	.word	0x08008700

0800738c <puts>:
 800738c:	4b02      	ldr	r3, [pc, #8]	; (8007398 <puts+0xc>)
 800738e:	4601      	mov	r1, r0
 8007390:	6818      	ldr	r0, [r3, #0]
 8007392:	f7ff bf9f 	b.w	80072d4 <_puts_r>
 8007396:	bf00      	nop
 8007398:	20000008 	.word	0x20000008

0800739c <_sbrk_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4c06      	ldr	r4, [pc, #24]	; (80073b8 <_sbrk_r+0x1c>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4605      	mov	r5, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	6023      	str	r3, [r4, #0]
 80073a8:	f7fa f88a 	bl	80014c0 <_sbrk>
 80073ac:	1c43      	adds	r3, r0, #1
 80073ae:	d102      	bne.n	80073b6 <_sbrk_r+0x1a>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	b103      	cbz	r3, 80073b6 <_sbrk_r+0x1a>
 80073b4:	602b      	str	r3, [r5, #0]
 80073b6:	bd38      	pop	{r3, r4, r5, pc}
 80073b8:	20000638 	.word	0x20000638

080073bc <siprintf>:
 80073bc:	b40e      	push	{r1, r2, r3}
 80073be:	b500      	push	{lr}
 80073c0:	b09c      	sub	sp, #112	; 0x70
 80073c2:	ab1d      	add	r3, sp, #116	; 0x74
 80073c4:	9002      	str	r0, [sp, #8]
 80073c6:	9006      	str	r0, [sp, #24]
 80073c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073cc:	4809      	ldr	r0, [pc, #36]	; (80073f4 <siprintf+0x38>)
 80073ce:	9107      	str	r1, [sp, #28]
 80073d0:	9104      	str	r1, [sp, #16]
 80073d2:	4909      	ldr	r1, [pc, #36]	; (80073f8 <siprintf+0x3c>)
 80073d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073d8:	9105      	str	r1, [sp, #20]
 80073da:	6800      	ldr	r0, [r0, #0]
 80073dc:	9301      	str	r3, [sp, #4]
 80073de:	a902      	add	r1, sp, #8
 80073e0:	f000 fb1c 	bl	8007a1c <_svfiprintf_r>
 80073e4:	9b02      	ldr	r3, [sp, #8]
 80073e6:	2200      	movs	r2, #0
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	b01c      	add	sp, #112	; 0x70
 80073ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f0:	b003      	add	sp, #12
 80073f2:	4770      	bx	lr
 80073f4:	20000008 	.word	0x20000008
 80073f8:	ffff0208 	.word	0xffff0208

080073fc <strlcpy>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	460b      	mov	r3, r1
 8007400:	b162      	cbz	r2, 800741c <strlcpy+0x20>
 8007402:	3a01      	subs	r2, #1
 8007404:	d008      	beq.n	8007418 <strlcpy+0x1c>
 8007406:	f813 4b01 	ldrb.w	r4, [r3], #1
 800740a:	f800 4b01 	strb.w	r4, [r0], #1
 800740e:	2c00      	cmp	r4, #0
 8007410:	d1f7      	bne.n	8007402 <strlcpy+0x6>
 8007412:	1a58      	subs	r0, r3, r1
 8007414:	3801      	subs	r0, #1
 8007416:	bd10      	pop	{r4, pc}
 8007418:	2200      	movs	r2, #0
 800741a:	7002      	strb	r2, [r0, #0]
 800741c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007420:	2a00      	cmp	r2, #0
 8007422:	d1fb      	bne.n	800741c <strlcpy+0x20>
 8007424:	e7f5      	b.n	8007412 <strlcpy+0x16>
	...

08007428 <__swbuf_r>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	460e      	mov	r6, r1
 800742c:	4614      	mov	r4, r2
 800742e:	4605      	mov	r5, r0
 8007430:	b118      	cbz	r0, 800743a <__swbuf_r+0x12>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <__swbuf_r+0x12>
 8007436:	f000 f9a7 	bl	8007788 <__sinit>
 800743a:	4b21      	ldr	r3, [pc, #132]	; (80074c0 <__swbuf_r+0x98>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d12a      	bne.n	8007496 <__swbuf_r+0x6e>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	69a3      	ldr	r3, [r4, #24]
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	071a      	lsls	r2, r3, #28
 800744a:	d52e      	bpl.n	80074aa <__swbuf_r+0x82>
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	b363      	cbz	r3, 80074aa <__swbuf_r+0x82>
 8007450:	6923      	ldr	r3, [r4, #16]
 8007452:	6820      	ldr	r0, [r4, #0]
 8007454:	1ac0      	subs	r0, r0, r3
 8007456:	6963      	ldr	r3, [r4, #20]
 8007458:	b2f6      	uxtb	r6, r6
 800745a:	4283      	cmp	r3, r0
 800745c:	4637      	mov	r7, r6
 800745e:	dc04      	bgt.n	800746a <__swbuf_r+0x42>
 8007460:	4621      	mov	r1, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f000 f926 	bl	80076b4 <_fflush_r>
 8007468:	bb28      	cbnz	r0, 80074b6 <__swbuf_r+0x8e>
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	3b01      	subs	r3, #1
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	6022      	str	r2, [r4, #0]
 8007476:	701e      	strb	r6, [r3, #0]
 8007478:	6963      	ldr	r3, [r4, #20]
 800747a:	3001      	adds	r0, #1
 800747c:	4283      	cmp	r3, r0
 800747e:	d004      	beq.n	800748a <__swbuf_r+0x62>
 8007480:	89a3      	ldrh	r3, [r4, #12]
 8007482:	07db      	lsls	r3, r3, #31
 8007484:	d519      	bpl.n	80074ba <__swbuf_r+0x92>
 8007486:	2e0a      	cmp	r6, #10
 8007488:	d117      	bne.n	80074ba <__swbuf_r+0x92>
 800748a:	4621      	mov	r1, r4
 800748c:	4628      	mov	r0, r5
 800748e:	f000 f911 	bl	80076b4 <_fflush_r>
 8007492:	b190      	cbz	r0, 80074ba <__swbuf_r+0x92>
 8007494:	e00f      	b.n	80074b6 <__swbuf_r+0x8e>
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <__swbuf_r+0x9c>)
 8007498:	429c      	cmp	r4, r3
 800749a:	d101      	bne.n	80074a0 <__swbuf_r+0x78>
 800749c:	68ac      	ldr	r4, [r5, #8]
 800749e:	e7d0      	b.n	8007442 <__swbuf_r+0x1a>
 80074a0:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <__swbuf_r+0xa0>)
 80074a2:	429c      	cmp	r4, r3
 80074a4:	bf08      	it	eq
 80074a6:	68ec      	ldreq	r4, [r5, #12]
 80074a8:	e7cb      	b.n	8007442 <__swbuf_r+0x1a>
 80074aa:	4621      	mov	r1, r4
 80074ac:	4628      	mov	r0, r5
 80074ae:	f000 f80d 	bl	80074cc <__swsetup_r>
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d0cc      	beq.n	8007450 <__swbuf_r+0x28>
 80074b6:	f04f 37ff 	mov.w	r7, #4294967295
 80074ba:	4638      	mov	r0, r7
 80074bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074be:	bf00      	nop
 80074c0:	08008720 	.word	0x08008720
 80074c4:	08008740 	.word	0x08008740
 80074c8:	08008700 	.word	0x08008700

080074cc <__swsetup_r>:
 80074cc:	4b32      	ldr	r3, [pc, #200]	; (8007598 <__swsetup_r+0xcc>)
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	4606      	mov	r6, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	b125      	cbz	r5, 80074e2 <__swsetup_r+0x16>
 80074d8:	69ab      	ldr	r3, [r5, #24]
 80074da:	b913      	cbnz	r3, 80074e2 <__swsetup_r+0x16>
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f953 	bl	8007788 <__sinit>
 80074e2:	4b2e      	ldr	r3, [pc, #184]	; (800759c <__swsetup_r+0xd0>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d10f      	bne.n	8007508 <__swsetup_r+0x3c>
 80074e8:	686c      	ldr	r4, [r5, #4]
 80074ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	0715      	lsls	r5, r2, #28
 80074f2:	d42c      	bmi.n	800754e <__swsetup_r+0x82>
 80074f4:	06d0      	lsls	r0, r2, #27
 80074f6:	d411      	bmi.n	800751c <__swsetup_r+0x50>
 80074f8:	2209      	movs	r2, #9
 80074fa:	6032      	str	r2, [r6, #0]
 80074fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	e03e      	b.n	8007586 <__swsetup_r+0xba>
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <__swsetup_r+0xd4>)
 800750a:	429c      	cmp	r4, r3
 800750c:	d101      	bne.n	8007512 <__swsetup_r+0x46>
 800750e:	68ac      	ldr	r4, [r5, #8]
 8007510:	e7eb      	b.n	80074ea <__swsetup_r+0x1e>
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <__swsetup_r+0xd8>)
 8007514:	429c      	cmp	r4, r3
 8007516:	bf08      	it	eq
 8007518:	68ec      	ldreq	r4, [r5, #12]
 800751a:	e7e6      	b.n	80074ea <__swsetup_r+0x1e>
 800751c:	0751      	lsls	r1, r2, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x7a>
 8007520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x6a>
 8007524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x66>
 800752c:	4630      	mov	r0, r6
 800752e:	f7ff fe11 	bl	8007154 <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	; 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x9a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x9a>
 800755e:	4621      	mov	r1, r4
 8007560:	4630      	mov	r0, r6
 8007562:	f000 f9bf 	bl	80078e4 <__smakebuf_r>
 8007566:	89a2      	ldrh	r2, [r4, #12]
 8007568:	f012 0301 	ands.w	r3, r2, #1
 800756c:	d00c      	beq.n	8007588 <__swsetup_r+0xbc>
 800756e:	2300      	movs	r3, #0
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6963      	ldr	r3, [r4, #20]
 8007574:	425b      	negs	r3, r3
 8007576:	61a3      	str	r3, [r4, #24]
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	b953      	cbnz	r3, 8007592 <__swsetup_r+0xc6>
 800757c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007580:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007584:	d1ba      	bne.n	80074fc <__swsetup_r+0x30>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	0792      	lsls	r2, r2, #30
 800758a:	bf58      	it	pl
 800758c:	6963      	ldrpl	r3, [r4, #20]
 800758e:	60a3      	str	r3, [r4, #8]
 8007590:	e7f2      	b.n	8007578 <__swsetup_r+0xac>
 8007592:	2000      	movs	r0, #0
 8007594:	e7f7      	b.n	8007586 <__swsetup_r+0xba>
 8007596:	bf00      	nop
 8007598:	20000008 	.word	0x20000008
 800759c:	08008720 	.word	0x08008720
 80075a0:	08008740 	.word	0x08008740
 80075a4:	08008700 	.word	0x08008700

080075a8 <__sflush_r>:
 80075a8:	898a      	ldrh	r2, [r1, #12]
 80075aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ae:	4605      	mov	r5, r0
 80075b0:	0710      	lsls	r0, r2, #28
 80075b2:	460c      	mov	r4, r1
 80075b4:	d458      	bmi.n	8007668 <__sflush_r+0xc0>
 80075b6:	684b      	ldr	r3, [r1, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dc05      	bgt.n	80075c8 <__sflush_r+0x20>
 80075bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075be:	2b00      	cmp	r3, #0
 80075c0:	dc02      	bgt.n	80075c8 <__sflush_r+0x20>
 80075c2:	2000      	movs	r0, #0
 80075c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	d0f9      	beq.n	80075c2 <__sflush_r+0x1a>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075d4:	682f      	ldr	r7, [r5, #0]
 80075d6:	6a21      	ldr	r1, [r4, #32]
 80075d8:	602b      	str	r3, [r5, #0]
 80075da:	d032      	beq.n	8007642 <__sflush_r+0x9a>
 80075dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	075a      	lsls	r2, r3, #29
 80075e2:	d505      	bpl.n	80075f0 <__sflush_r+0x48>
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	1ac0      	subs	r0, r0, r3
 80075e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075ea:	b10b      	cbz	r3, 80075f0 <__sflush_r+0x48>
 80075ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075ee:	1ac0      	subs	r0, r0, r3
 80075f0:	2300      	movs	r3, #0
 80075f2:	4602      	mov	r2, r0
 80075f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075f6:	6a21      	ldr	r1, [r4, #32]
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b0      	blx	r6
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	89a3      	ldrh	r3, [r4, #12]
 8007600:	d106      	bne.n	8007610 <__sflush_r+0x68>
 8007602:	6829      	ldr	r1, [r5, #0]
 8007604:	291d      	cmp	r1, #29
 8007606:	d848      	bhi.n	800769a <__sflush_r+0xf2>
 8007608:	4a29      	ldr	r2, [pc, #164]	; (80076b0 <__sflush_r+0x108>)
 800760a:	40ca      	lsrs	r2, r1
 800760c:	07d6      	lsls	r6, r2, #31
 800760e:	d544      	bpl.n	800769a <__sflush_r+0xf2>
 8007610:	2200      	movs	r2, #0
 8007612:	6062      	str	r2, [r4, #4]
 8007614:	04d9      	lsls	r1, r3, #19
 8007616:	6922      	ldr	r2, [r4, #16]
 8007618:	6022      	str	r2, [r4, #0]
 800761a:	d504      	bpl.n	8007626 <__sflush_r+0x7e>
 800761c:	1c42      	adds	r2, r0, #1
 800761e:	d101      	bne.n	8007624 <__sflush_r+0x7c>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b903      	cbnz	r3, 8007626 <__sflush_r+0x7e>
 8007624:	6560      	str	r0, [r4, #84]	; 0x54
 8007626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007628:	602f      	str	r7, [r5, #0]
 800762a:	2900      	cmp	r1, #0
 800762c:	d0c9      	beq.n	80075c2 <__sflush_r+0x1a>
 800762e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007632:	4299      	cmp	r1, r3
 8007634:	d002      	beq.n	800763c <__sflush_r+0x94>
 8007636:	4628      	mov	r0, r5
 8007638:	f7ff fd8c 	bl	8007154 <_free_r>
 800763c:	2000      	movs	r0, #0
 800763e:	6360      	str	r0, [r4, #52]	; 0x34
 8007640:	e7c0      	b.n	80075c4 <__sflush_r+0x1c>
 8007642:	2301      	movs	r3, #1
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	1c41      	adds	r1, r0, #1
 800764a:	d1c8      	bne.n	80075de <__sflush_r+0x36>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0c5      	beq.n	80075de <__sflush_r+0x36>
 8007652:	2b1d      	cmp	r3, #29
 8007654:	d001      	beq.n	800765a <__sflush_r+0xb2>
 8007656:	2b16      	cmp	r3, #22
 8007658:	d101      	bne.n	800765e <__sflush_r+0xb6>
 800765a:	602f      	str	r7, [r5, #0]
 800765c:	e7b1      	b.n	80075c2 <__sflush_r+0x1a>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	e7ad      	b.n	80075c4 <__sflush_r+0x1c>
 8007668:	690f      	ldr	r7, [r1, #16]
 800766a:	2f00      	cmp	r7, #0
 800766c:	d0a9      	beq.n	80075c2 <__sflush_r+0x1a>
 800766e:	0793      	lsls	r3, r2, #30
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	bf08      	it	eq
 8007674:	694b      	ldreq	r3, [r1, #20]
 8007676:	600f      	str	r7, [r1, #0]
 8007678:	bf18      	it	ne
 800767a:	2300      	movne	r3, #0
 800767c:	eba6 0807 	sub.w	r8, r6, r7
 8007680:	608b      	str	r3, [r1, #8]
 8007682:	f1b8 0f00 	cmp.w	r8, #0
 8007686:	dd9c      	ble.n	80075c2 <__sflush_r+0x1a>
 8007688:	4643      	mov	r3, r8
 800768a:	463a      	mov	r2, r7
 800768c:	6a21      	ldr	r1, [r4, #32]
 800768e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	2800      	cmp	r0, #0
 8007696:	dc06      	bgt.n	80076a6 <__sflush_r+0xfe>
 8007698:	89a3      	ldrh	r3, [r4, #12]
 800769a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769e:	81a3      	strh	r3, [r4, #12]
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	e78e      	b.n	80075c4 <__sflush_r+0x1c>
 80076a6:	4407      	add	r7, r0
 80076a8:	eba8 0800 	sub.w	r8, r8, r0
 80076ac:	e7e9      	b.n	8007682 <__sflush_r+0xda>
 80076ae:	bf00      	nop
 80076b0:	20400001 	.word	0x20400001

080076b4 <_fflush_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	690b      	ldr	r3, [r1, #16]
 80076b8:	4605      	mov	r5, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	b1db      	cbz	r3, 80076f6 <_fflush_r+0x42>
 80076be:	b118      	cbz	r0, 80076c8 <_fflush_r+0x14>
 80076c0:	6983      	ldr	r3, [r0, #24]
 80076c2:	b90b      	cbnz	r3, 80076c8 <_fflush_r+0x14>
 80076c4:	f000 f860 	bl	8007788 <__sinit>
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <_fflush_r+0x48>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d109      	bne.n	80076e2 <_fflush_r+0x2e>
 80076ce:	686c      	ldr	r4, [r5, #4]
 80076d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076d4:	b17b      	cbz	r3, 80076f6 <_fflush_r+0x42>
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076de:	f7ff bf63 	b.w	80075a8 <__sflush_r>
 80076e2:	4b07      	ldr	r3, [pc, #28]	; (8007700 <_fflush_r+0x4c>)
 80076e4:	429c      	cmp	r4, r3
 80076e6:	d101      	bne.n	80076ec <_fflush_r+0x38>
 80076e8:	68ac      	ldr	r4, [r5, #8]
 80076ea:	e7f1      	b.n	80076d0 <_fflush_r+0x1c>
 80076ec:	4b05      	ldr	r3, [pc, #20]	; (8007704 <_fflush_r+0x50>)
 80076ee:	429c      	cmp	r4, r3
 80076f0:	bf08      	it	eq
 80076f2:	68ec      	ldreq	r4, [r5, #12]
 80076f4:	e7ec      	b.n	80076d0 <_fflush_r+0x1c>
 80076f6:	2000      	movs	r0, #0
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	08008720 	.word	0x08008720
 8007700:	08008740 	.word	0x08008740
 8007704:	08008700 	.word	0x08008700

08007708 <std>:
 8007708:	2300      	movs	r3, #0
 800770a:	b510      	push	{r4, lr}
 800770c:	4604      	mov	r4, r0
 800770e:	e9c0 3300 	strd	r3, r3, [r0]
 8007712:	6083      	str	r3, [r0, #8]
 8007714:	8181      	strh	r1, [r0, #12]
 8007716:	6643      	str	r3, [r0, #100]	; 0x64
 8007718:	81c2      	strh	r2, [r0, #14]
 800771a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800771e:	6183      	str	r3, [r0, #24]
 8007720:	4619      	mov	r1, r3
 8007722:	2208      	movs	r2, #8
 8007724:	305c      	adds	r0, #92	; 0x5c
 8007726:	f7ff fd0d 	bl	8007144 <memset>
 800772a:	4b05      	ldr	r3, [pc, #20]	; (8007740 <std+0x38>)
 800772c:	6263      	str	r3, [r4, #36]	; 0x24
 800772e:	4b05      	ldr	r3, [pc, #20]	; (8007744 <std+0x3c>)
 8007730:	62a3      	str	r3, [r4, #40]	; 0x28
 8007732:	4b05      	ldr	r3, [pc, #20]	; (8007748 <std+0x40>)
 8007734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <std+0x44>)
 8007738:	6224      	str	r4, [r4, #32]
 800773a:	6323      	str	r3, [r4, #48]	; 0x30
 800773c:	bd10      	pop	{r4, pc}
 800773e:	bf00      	nop
 8007740:	0800819d 	.word	0x0800819d
 8007744:	080081bf 	.word	0x080081bf
 8007748:	080081f7 	.word	0x080081f7
 800774c:	0800821b 	.word	0x0800821b

08007750 <_cleanup_r>:
 8007750:	4901      	ldr	r1, [pc, #4]	; (8007758 <_cleanup_r+0x8>)
 8007752:	f000 b885 	b.w	8007860 <_fwalk_reent>
 8007756:	bf00      	nop
 8007758:	080076b5 	.word	0x080076b5

0800775c <__sfmoreglue>:
 800775c:	b570      	push	{r4, r5, r6, lr}
 800775e:	1e4a      	subs	r2, r1, #1
 8007760:	2568      	movs	r5, #104	; 0x68
 8007762:	4355      	muls	r5, r2
 8007764:	460e      	mov	r6, r1
 8007766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800776a:	f7ff fd41 	bl	80071f0 <_malloc_r>
 800776e:	4604      	mov	r4, r0
 8007770:	b140      	cbz	r0, 8007784 <__sfmoreglue+0x28>
 8007772:	2100      	movs	r1, #0
 8007774:	e9c0 1600 	strd	r1, r6, [r0]
 8007778:	300c      	adds	r0, #12
 800777a:	60a0      	str	r0, [r4, #8]
 800777c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007780:	f7ff fce0 	bl	8007144 <memset>
 8007784:	4620      	mov	r0, r4
 8007786:	bd70      	pop	{r4, r5, r6, pc}

08007788 <__sinit>:
 8007788:	6983      	ldr	r3, [r0, #24]
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	bb33      	cbnz	r3, 80077de <__sinit+0x56>
 8007790:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007794:	6503      	str	r3, [r0, #80]	; 0x50
 8007796:	4b12      	ldr	r3, [pc, #72]	; (80077e0 <__sinit+0x58>)
 8007798:	4a12      	ldr	r2, [pc, #72]	; (80077e4 <__sinit+0x5c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6282      	str	r2, [r0, #40]	; 0x28
 800779e:	4298      	cmp	r0, r3
 80077a0:	bf04      	itt	eq
 80077a2:	2301      	moveq	r3, #1
 80077a4:	6183      	streq	r3, [r0, #24]
 80077a6:	f000 f81f 	bl	80077e8 <__sfp>
 80077aa:	6060      	str	r0, [r4, #4]
 80077ac:	4620      	mov	r0, r4
 80077ae:	f000 f81b 	bl	80077e8 <__sfp>
 80077b2:	60a0      	str	r0, [r4, #8]
 80077b4:	4620      	mov	r0, r4
 80077b6:	f000 f817 	bl	80077e8 <__sfp>
 80077ba:	2200      	movs	r2, #0
 80077bc:	60e0      	str	r0, [r4, #12]
 80077be:	2104      	movs	r1, #4
 80077c0:	6860      	ldr	r0, [r4, #4]
 80077c2:	f7ff ffa1 	bl	8007708 <std>
 80077c6:	2201      	movs	r2, #1
 80077c8:	2109      	movs	r1, #9
 80077ca:	68a0      	ldr	r0, [r4, #8]
 80077cc:	f7ff ff9c 	bl	8007708 <std>
 80077d0:	2202      	movs	r2, #2
 80077d2:	2112      	movs	r1, #18
 80077d4:	68e0      	ldr	r0, [r4, #12]
 80077d6:	f7ff ff97 	bl	8007708 <std>
 80077da:	2301      	movs	r3, #1
 80077dc:	61a3      	str	r3, [r4, #24]
 80077de:	bd10      	pop	{r4, pc}
 80077e0:	080086fc 	.word	0x080086fc
 80077e4:	08007751 	.word	0x08007751

080077e8 <__sfp>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <__sfp+0x70>)
 80077ec:	681e      	ldr	r6, [r3, #0]
 80077ee:	69b3      	ldr	r3, [r6, #24]
 80077f0:	4607      	mov	r7, r0
 80077f2:	b913      	cbnz	r3, 80077fa <__sfp+0x12>
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff ffc7 	bl	8007788 <__sinit>
 80077fa:	3648      	adds	r6, #72	; 0x48
 80077fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007800:	3b01      	subs	r3, #1
 8007802:	d503      	bpl.n	800780c <__sfp+0x24>
 8007804:	6833      	ldr	r3, [r6, #0]
 8007806:	b133      	cbz	r3, 8007816 <__sfp+0x2e>
 8007808:	6836      	ldr	r6, [r6, #0]
 800780a:	e7f7      	b.n	80077fc <__sfp+0x14>
 800780c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007810:	b16d      	cbz	r5, 800782e <__sfp+0x46>
 8007812:	3468      	adds	r4, #104	; 0x68
 8007814:	e7f4      	b.n	8007800 <__sfp+0x18>
 8007816:	2104      	movs	r1, #4
 8007818:	4638      	mov	r0, r7
 800781a:	f7ff ff9f 	bl	800775c <__sfmoreglue>
 800781e:	6030      	str	r0, [r6, #0]
 8007820:	2800      	cmp	r0, #0
 8007822:	d1f1      	bne.n	8007808 <__sfp+0x20>
 8007824:	230c      	movs	r3, #12
 8007826:	603b      	str	r3, [r7, #0]
 8007828:	4604      	mov	r4, r0
 800782a:	4620      	mov	r0, r4
 800782c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782e:	4b0b      	ldr	r3, [pc, #44]	; (800785c <__sfp+0x74>)
 8007830:	6665      	str	r5, [r4, #100]	; 0x64
 8007832:	e9c4 5500 	strd	r5, r5, [r4]
 8007836:	60a5      	str	r5, [r4, #8]
 8007838:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800783c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007840:	2208      	movs	r2, #8
 8007842:	4629      	mov	r1, r5
 8007844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007848:	f7ff fc7c 	bl	8007144 <memset>
 800784c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007854:	e7e9      	b.n	800782a <__sfp+0x42>
 8007856:	bf00      	nop
 8007858:	080086fc 	.word	0x080086fc
 800785c:	ffff0001 	.word	0xffff0001

08007860 <_fwalk_reent>:
 8007860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007864:	4680      	mov	r8, r0
 8007866:	4689      	mov	r9, r1
 8007868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800786c:	2600      	movs	r6, #0
 800786e:	b914      	cbnz	r4, 8007876 <_fwalk_reent+0x16>
 8007870:	4630      	mov	r0, r6
 8007872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007876:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800787a:	3f01      	subs	r7, #1
 800787c:	d501      	bpl.n	8007882 <_fwalk_reent+0x22>
 800787e:	6824      	ldr	r4, [r4, #0]
 8007880:	e7f5      	b.n	800786e <_fwalk_reent+0xe>
 8007882:	89ab      	ldrh	r3, [r5, #12]
 8007884:	2b01      	cmp	r3, #1
 8007886:	d907      	bls.n	8007898 <_fwalk_reent+0x38>
 8007888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800788c:	3301      	adds	r3, #1
 800788e:	d003      	beq.n	8007898 <_fwalk_reent+0x38>
 8007890:	4629      	mov	r1, r5
 8007892:	4640      	mov	r0, r8
 8007894:	47c8      	blx	r9
 8007896:	4306      	orrs	r6, r0
 8007898:	3568      	adds	r5, #104	; 0x68
 800789a:	e7ee      	b.n	800787a <_fwalk_reent+0x1a>

0800789c <__swhatbuf_r>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	460e      	mov	r6, r1
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	2900      	cmp	r1, #0
 80078a6:	b096      	sub	sp, #88	; 0x58
 80078a8:	4614      	mov	r4, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	da07      	bge.n	80078be <__swhatbuf_r+0x22>
 80078ae:	2300      	movs	r3, #0
 80078b0:	602b      	str	r3, [r5, #0]
 80078b2:	89b3      	ldrh	r3, [r6, #12]
 80078b4:	061a      	lsls	r2, r3, #24
 80078b6:	d410      	bmi.n	80078da <__swhatbuf_r+0x3e>
 80078b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078bc:	e00e      	b.n	80078dc <__swhatbuf_r+0x40>
 80078be:	466a      	mov	r2, sp
 80078c0:	f000 fcd2 	bl	8008268 <_fstat_r>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	dbf2      	blt.n	80078ae <__swhatbuf_r+0x12>
 80078c8:	9a01      	ldr	r2, [sp, #4]
 80078ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078d2:	425a      	negs	r2, r3
 80078d4:	415a      	adcs	r2, r3
 80078d6:	602a      	str	r2, [r5, #0]
 80078d8:	e7ee      	b.n	80078b8 <__swhatbuf_r+0x1c>
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	2000      	movs	r0, #0
 80078de:	6023      	str	r3, [r4, #0]
 80078e0:	b016      	add	sp, #88	; 0x58
 80078e2:	bd70      	pop	{r4, r5, r6, pc}

080078e4 <__smakebuf_r>:
 80078e4:	898b      	ldrh	r3, [r1, #12]
 80078e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078e8:	079d      	lsls	r5, r3, #30
 80078ea:	4606      	mov	r6, r0
 80078ec:	460c      	mov	r4, r1
 80078ee:	d507      	bpl.n	8007900 <__smakebuf_r+0x1c>
 80078f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	6123      	str	r3, [r4, #16]
 80078f8:	2301      	movs	r3, #1
 80078fa:	6163      	str	r3, [r4, #20]
 80078fc:	b002      	add	sp, #8
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	ab01      	add	r3, sp, #4
 8007902:	466a      	mov	r2, sp
 8007904:	f7ff ffca 	bl	800789c <__swhatbuf_r>
 8007908:	9900      	ldr	r1, [sp, #0]
 800790a:	4605      	mov	r5, r0
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff fc6f 	bl	80071f0 <_malloc_r>
 8007912:	b948      	cbnz	r0, 8007928 <__smakebuf_r+0x44>
 8007914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007918:	059a      	lsls	r2, r3, #22
 800791a:	d4ef      	bmi.n	80078fc <__smakebuf_r+0x18>
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	f043 0302 	orr.w	r3, r3, #2
 8007924:	81a3      	strh	r3, [r4, #12]
 8007926:	e7e3      	b.n	80078f0 <__smakebuf_r+0xc>
 8007928:	4b0d      	ldr	r3, [pc, #52]	; (8007960 <__smakebuf_r+0x7c>)
 800792a:	62b3      	str	r3, [r6, #40]	; 0x28
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	6020      	str	r0, [r4, #0]
 8007930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007934:	81a3      	strh	r3, [r4, #12]
 8007936:	9b00      	ldr	r3, [sp, #0]
 8007938:	6163      	str	r3, [r4, #20]
 800793a:	9b01      	ldr	r3, [sp, #4]
 800793c:	6120      	str	r0, [r4, #16]
 800793e:	b15b      	cbz	r3, 8007958 <__smakebuf_r+0x74>
 8007940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007944:	4630      	mov	r0, r6
 8007946:	f000 fca1 	bl	800828c <_isatty_r>
 800794a:	b128      	cbz	r0, 8007958 <__smakebuf_r+0x74>
 800794c:	89a3      	ldrh	r3, [r4, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	81a3      	strh	r3, [r4, #12]
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	431d      	orrs	r5, r3
 800795c:	81a5      	strh	r5, [r4, #12]
 800795e:	e7cd      	b.n	80078fc <__smakebuf_r+0x18>
 8007960:	08007751 	.word	0x08007751

08007964 <__malloc_lock>:
 8007964:	4770      	bx	lr

08007966 <__malloc_unlock>:
 8007966:	4770      	bx	lr

08007968 <__ssputs_r>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	688e      	ldr	r6, [r1, #8]
 800796e:	429e      	cmp	r6, r3
 8007970:	4682      	mov	sl, r0
 8007972:	460c      	mov	r4, r1
 8007974:	4690      	mov	r8, r2
 8007976:	4699      	mov	r9, r3
 8007978:	d837      	bhi.n	80079ea <__ssputs_r+0x82>
 800797a:	898a      	ldrh	r2, [r1, #12]
 800797c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007980:	d031      	beq.n	80079e6 <__ssputs_r+0x7e>
 8007982:	6825      	ldr	r5, [r4, #0]
 8007984:	6909      	ldr	r1, [r1, #16]
 8007986:	1a6f      	subs	r7, r5, r1
 8007988:	6965      	ldr	r5, [r4, #20]
 800798a:	2302      	movs	r3, #2
 800798c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007990:	fb95 f5f3 	sdiv	r5, r5, r3
 8007994:	f109 0301 	add.w	r3, r9, #1
 8007998:	443b      	add	r3, r7
 800799a:	429d      	cmp	r5, r3
 800799c:	bf38      	it	cc
 800799e:	461d      	movcc	r5, r3
 80079a0:	0553      	lsls	r3, r2, #21
 80079a2:	d530      	bpl.n	8007a06 <__ssputs_r+0x9e>
 80079a4:	4629      	mov	r1, r5
 80079a6:	f7ff fc23 	bl	80071f0 <_malloc_r>
 80079aa:	4606      	mov	r6, r0
 80079ac:	b950      	cbnz	r0, 80079c4 <__ssputs_r+0x5c>
 80079ae:	230c      	movs	r3, #12
 80079b0:	f8ca 3000 	str.w	r3, [sl]
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	f04f 30ff 	mov.w	r0, #4294967295
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	463a      	mov	r2, r7
 80079c6:	6921      	ldr	r1, [r4, #16]
 80079c8:	f000 fc82 	bl	80082d0 <memcpy>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80079d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	6126      	str	r6, [r4, #16]
 80079da:	6165      	str	r5, [r4, #20]
 80079dc:	443e      	add	r6, r7
 80079de:	1bed      	subs	r5, r5, r7
 80079e0:	6026      	str	r6, [r4, #0]
 80079e2:	60a5      	str	r5, [r4, #8]
 80079e4:	464e      	mov	r6, r9
 80079e6:	454e      	cmp	r6, r9
 80079e8:	d900      	bls.n	80079ec <__ssputs_r+0x84>
 80079ea:	464e      	mov	r6, r9
 80079ec:	4632      	mov	r2, r6
 80079ee:	4641      	mov	r1, r8
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	f000 fc78 	bl	80082e6 <memmove>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	1b9b      	subs	r3, r3, r6
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	441e      	add	r6, r3
 8007a00:	6026      	str	r6, [r4, #0]
 8007a02:	2000      	movs	r0, #0
 8007a04:	e7dc      	b.n	80079c0 <__ssputs_r+0x58>
 8007a06:	462a      	mov	r2, r5
 8007a08:	f000 fc86 	bl	8008318 <_realloc_r>
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d1e2      	bne.n	80079d8 <__ssputs_r+0x70>
 8007a12:	6921      	ldr	r1, [r4, #16]
 8007a14:	4650      	mov	r0, sl
 8007a16:	f7ff fb9d 	bl	8007154 <_free_r>
 8007a1a:	e7c8      	b.n	80079ae <__ssputs_r+0x46>

08007a1c <_svfiprintf_r>:
 8007a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a20:	461d      	mov	r5, r3
 8007a22:	898b      	ldrh	r3, [r1, #12]
 8007a24:	061f      	lsls	r7, r3, #24
 8007a26:	b09d      	sub	sp, #116	; 0x74
 8007a28:	4680      	mov	r8, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	d50f      	bpl.n	8007a50 <_svfiprintf_r+0x34>
 8007a30:	690b      	ldr	r3, [r1, #16]
 8007a32:	b96b      	cbnz	r3, 8007a50 <_svfiprintf_r+0x34>
 8007a34:	2140      	movs	r1, #64	; 0x40
 8007a36:	f7ff fbdb 	bl	80071f0 <_malloc_r>
 8007a3a:	6020      	str	r0, [r4, #0]
 8007a3c:	6120      	str	r0, [r4, #16]
 8007a3e:	b928      	cbnz	r0, 8007a4c <_svfiprintf_r+0x30>
 8007a40:	230c      	movs	r3, #12
 8007a42:	f8c8 3000 	str.w	r3, [r8]
 8007a46:	f04f 30ff 	mov.w	r0, #4294967295
 8007a4a:	e0c8      	b.n	8007bde <_svfiprintf_r+0x1c2>
 8007a4c:	2340      	movs	r3, #64	; 0x40
 8007a4e:	6163      	str	r3, [r4, #20]
 8007a50:	2300      	movs	r3, #0
 8007a52:	9309      	str	r3, [sp, #36]	; 0x24
 8007a54:	2320      	movs	r3, #32
 8007a56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a5a:	2330      	movs	r3, #48	; 0x30
 8007a5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a60:	9503      	str	r5, [sp, #12]
 8007a62:	f04f 0b01 	mov.w	fp, #1
 8007a66:	4637      	mov	r7, r6
 8007a68:	463d      	mov	r5, r7
 8007a6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007a6e:	b10b      	cbz	r3, 8007a74 <_svfiprintf_r+0x58>
 8007a70:	2b25      	cmp	r3, #37	; 0x25
 8007a72:	d13e      	bne.n	8007af2 <_svfiprintf_r+0xd6>
 8007a74:	ebb7 0a06 	subs.w	sl, r7, r6
 8007a78:	d00b      	beq.n	8007a92 <_svfiprintf_r+0x76>
 8007a7a:	4653      	mov	r3, sl
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4640      	mov	r0, r8
 8007a82:	f7ff ff71 	bl	8007968 <__ssputs_r>
 8007a86:	3001      	adds	r0, #1
 8007a88:	f000 80a4 	beq.w	8007bd4 <_svfiprintf_r+0x1b8>
 8007a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a8e:	4453      	add	r3, sl
 8007a90:	9309      	str	r3, [sp, #36]	; 0x24
 8007a92:	783b      	ldrb	r3, [r7, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 809d 	beq.w	8007bd4 <_svfiprintf_r+0x1b8>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	9307      	str	r3, [sp, #28]
 8007aa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007aac:	931a      	str	r3, [sp, #104]	; 0x68
 8007aae:	462f      	mov	r7, r5
 8007ab0:	2205      	movs	r2, #5
 8007ab2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007ab6:	4850      	ldr	r0, [pc, #320]	; (8007bf8 <_svfiprintf_r+0x1dc>)
 8007ab8:	f7f8 fbaa 	bl	8000210 <memchr>
 8007abc:	9b04      	ldr	r3, [sp, #16]
 8007abe:	b9d0      	cbnz	r0, 8007af6 <_svfiprintf_r+0xda>
 8007ac0:	06d9      	lsls	r1, r3, #27
 8007ac2:	bf44      	itt	mi
 8007ac4:	2220      	movmi	r2, #32
 8007ac6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007aca:	071a      	lsls	r2, r3, #28
 8007acc:	bf44      	itt	mi
 8007ace:	222b      	movmi	r2, #43	; 0x2b
 8007ad0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ad4:	782a      	ldrb	r2, [r5, #0]
 8007ad6:	2a2a      	cmp	r2, #42	; 0x2a
 8007ad8:	d015      	beq.n	8007b06 <_svfiprintf_r+0xea>
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	462f      	mov	r7, r5
 8007ade:	2000      	movs	r0, #0
 8007ae0:	250a      	movs	r5, #10
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae8:	3b30      	subs	r3, #48	; 0x30
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d94d      	bls.n	8007b8a <_svfiprintf_r+0x16e>
 8007aee:	b1b8      	cbz	r0, 8007b20 <_svfiprintf_r+0x104>
 8007af0:	e00f      	b.n	8007b12 <_svfiprintf_r+0xf6>
 8007af2:	462f      	mov	r7, r5
 8007af4:	e7b8      	b.n	8007a68 <_svfiprintf_r+0x4c>
 8007af6:	4a40      	ldr	r2, [pc, #256]	; (8007bf8 <_svfiprintf_r+0x1dc>)
 8007af8:	1a80      	subs	r0, r0, r2
 8007afa:	fa0b f000 	lsl.w	r0, fp, r0
 8007afe:	4318      	orrs	r0, r3
 8007b00:	9004      	str	r0, [sp, #16]
 8007b02:	463d      	mov	r5, r7
 8007b04:	e7d3      	b.n	8007aae <_svfiprintf_r+0x92>
 8007b06:	9a03      	ldr	r2, [sp, #12]
 8007b08:	1d11      	adds	r1, r2, #4
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	9103      	str	r1, [sp, #12]
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	db01      	blt.n	8007b16 <_svfiprintf_r+0xfa>
 8007b12:	9207      	str	r2, [sp, #28]
 8007b14:	e004      	b.n	8007b20 <_svfiprintf_r+0x104>
 8007b16:	4252      	negs	r2, r2
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	9207      	str	r2, [sp, #28]
 8007b1e:	9304      	str	r3, [sp, #16]
 8007b20:	783b      	ldrb	r3, [r7, #0]
 8007b22:	2b2e      	cmp	r3, #46	; 0x2e
 8007b24:	d10c      	bne.n	8007b40 <_svfiprintf_r+0x124>
 8007b26:	787b      	ldrb	r3, [r7, #1]
 8007b28:	2b2a      	cmp	r3, #42	; 0x2a
 8007b2a:	d133      	bne.n	8007b94 <_svfiprintf_r+0x178>
 8007b2c:	9b03      	ldr	r3, [sp, #12]
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	9203      	str	r2, [sp, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb8      	it	lt
 8007b38:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b3c:	3702      	adds	r7, #2
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	4d2e      	ldr	r5, [pc, #184]	; (8007bfc <_svfiprintf_r+0x1e0>)
 8007b42:	7839      	ldrb	r1, [r7, #0]
 8007b44:	2203      	movs	r2, #3
 8007b46:	4628      	mov	r0, r5
 8007b48:	f7f8 fb62 	bl	8000210 <memchr>
 8007b4c:	b138      	cbz	r0, 8007b5e <_svfiprintf_r+0x142>
 8007b4e:	2340      	movs	r3, #64	; 0x40
 8007b50:	1b40      	subs	r0, r0, r5
 8007b52:	fa03 f000 	lsl.w	r0, r3, r0
 8007b56:	9b04      	ldr	r3, [sp, #16]
 8007b58:	4303      	orrs	r3, r0
 8007b5a:	3701      	adds	r7, #1
 8007b5c:	9304      	str	r3, [sp, #16]
 8007b5e:	7839      	ldrb	r1, [r7, #0]
 8007b60:	4827      	ldr	r0, [pc, #156]	; (8007c00 <_svfiprintf_r+0x1e4>)
 8007b62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b66:	2206      	movs	r2, #6
 8007b68:	1c7e      	adds	r6, r7, #1
 8007b6a:	f7f8 fb51 	bl	8000210 <memchr>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d038      	beq.n	8007be4 <_svfiprintf_r+0x1c8>
 8007b72:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <_svfiprintf_r+0x1e8>)
 8007b74:	bb13      	cbnz	r3, 8007bbc <_svfiprintf_r+0x1a0>
 8007b76:	9b03      	ldr	r3, [sp, #12]
 8007b78:	3307      	adds	r3, #7
 8007b7a:	f023 0307 	bic.w	r3, r3, #7
 8007b7e:	3308      	adds	r3, #8
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b84:	444b      	add	r3, r9
 8007b86:	9309      	str	r3, [sp, #36]	; 0x24
 8007b88:	e76d      	b.n	8007a66 <_svfiprintf_r+0x4a>
 8007b8a:	fb05 3202 	mla	r2, r5, r2, r3
 8007b8e:	2001      	movs	r0, #1
 8007b90:	460f      	mov	r7, r1
 8007b92:	e7a6      	b.n	8007ae2 <_svfiprintf_r+0xc6>
 8007b94:	2300      	movs	r3, #0
 8007b96:	3701      	adds	r7, #1
 8007b98:	9305      	str	r3, [sp, #20]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	250a      	movs	r5, #10
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ba4:	3a30      	subs	r2, #48	; 0x30
 8007ba6:	2a09      	cmp	r2, #9
 8007ba8:	d903      	bls.n	8007bb2 <_svfiprintf_r+0x196>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0c8      	beq.n	8007b40 <_svfiprintf_r+0x124>
 8007bae:	9105      	str	r1, [sp, #20]
 8007bb0:	e7c6      	b.n	8007b40 <_svfiprintf_r+0x124>
 8007bb2:	fb05 2101 	mla	r1, r5, r1, r2
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4607      	mov	r7, r0
 8007bba:	e7f0      	b.n	8007b9e <_svfiprintf_r+0x182>
 8007bbc:	ab03      	add	r3, sp, #12
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4b11      	ldr	r3, [pc, #68]	; (8007c08 <_svfiprintf_r+0x1ec>)
 8007bc4:	a904      	add	r1, sp, #16
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	f3af 8000 	nop.w
 8007bcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007bd0:	4681      	mov	r9, r0
 8007bd2:	d1d6      	bne.n	8007b82 <_svfiprintf_r+0x166>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	065b      	lsls	r3, r3, #25
 8007bd8:	f53f af35 	bmi.w	8007a46 <_svfiprintf_r+0x2a>
 8007bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bde:	b01d      	add	sp, #116	; 0x74
 8007be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be4:	ab03      	add	r3, sp, #12
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	4622      	mov	r2, r4
 8007bea:	4b07      	ldr	r3, [pc, #28]	; (8007c08 <_svfiprintf_r+0x1ec>)
 8007bec:	a904      	add	r1, sp, #16
 8007bee:	4640      	mov	r0, r8
 8007bf0:	f000 f9c2 	bl	8007f78 <_printf_i>
 8007bf4:	e7ea      	b.n	8007bcc <_svfiprintf_r+0x1b0>
 8007bf6:	bf00      	nop
 8007bf8:	08008760 	.word	0x08008760
 8007bfc:	08008766 	.word	0x08008766
 8007c00:	0800876a 	.word	0x0800876a
 8007c04:	00000000 	.word	0x00000000
 8007c08:	08007969 	.word	0x08007969

08007c0c <__sfputc_r>:
 8007c0c:	6893      	ldr	r3, [r2, #8]
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	b410      	push	{r4}
 8007c14:	6093      	str	r3, [r2, #8]
 8007c16:	da08      	bge.n	8007c2a <__sfputc_r+0x1e>
 8007c18:	6994      	ldr	r4, [r2, #24]
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	db01      	blt.n	8007c22 <__sfputc_r+0x16>
 8007c1e:	290a      	cmp	r1, #10
 8007c20:	d103      	bne.n	8007c2a <__sfputc_r+0x1e>
 8007c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c26:	f7ff bbff 	b.w	8007428 <__swbuf_r>
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	1c58      	adds	r0, r3, #1
 8007c2e:	6010      	str	r0, [r2, #0]
 8007c30:	7019      	strb	r1, [r3, #0]
 8007c32:	4608      	mov	r0, r1
 8007c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c38:	4770      	bx	lr

08007c3a <__sfputs_r>:
 8007c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	460f      	mov	r7, r1
 8007c40:	4614      	mov	r4, r2
 8007c42:	18d5      	adds	r5, r2, r3
 8007c44:	42ac      	cmp	r4, r5
 8007c46:	d101      	bne.n	8007c4c <__sfputs_r+0x12>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e007      	b.n	8007c5c <__sfputs_r+0x22>
 8007c4c:	463a      	mov	r2, r7
 8007c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff ffda 	bl	8007c0c <__sfputc_r>
 8007c58:	1c43      	adds	r3, r0, #1
 8007c5a:	d1f3      	bne.n	8007c44 <__sfputs_r+0xa>
 8007c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c60 <_vfiprintf_r>:
 8007c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c64:	460c      	mov	r4, r1
 8007c66:	b09d      	sub	sp, #116	; 0x74
 8007c68:	4617      	mov	r7, r2
 8007c6a:	461d      	mov	r5, r3
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	b118      	cbz	r0, 8007c78 <_vfiprintf_r+0x18>
 8007c70:	6983      	ldr	r3, [r0, #24]
 8007c72:	b90b      	cbnz	r3, 8007c78 <_vfiprintf_r+0x18>
 8007c74:	f7ff fd88 	bl	8007788 <__sinit>
 8007c78:	4b7c      	ldr	r3, [pc, #496]	; (8007e6c <_vfiprintf_r+0x20c>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d158      	bne.n	8007d30 <_vfiprintf_r+0xd0>
 8007c7e:	6874      	ldr	r4, [r6, #4]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	0718      	lsls	r0, r3, #28
 8007c84:	d55e      	bpl.n	8007d44 <_vfiprintf_r+0xe4>
 8007c86:	6923      	ldr	r3, [r4, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d05b      	beq.n	8007d44 <_vfiprintf_r+0xe4>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	2320      	movs	r3, #32
 8007c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c96:	2330      	movs	r3, #48	; 0x30
 8007c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c9c:	9503      	str	r5, [sp, #12]
 8007c9e:	f04f 0b01 	mov.w	fp, #1
 8007ca2:	46b8      	mov	r8, r7
 8007ca4:	4645      	mov	r5, r8
 8007ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007caa:	b10b      	cbz	r3, 8007cb0 <_vfiprintf_r+0x50>
 8007cac:	2b25      	cmp	r3, #37	; 0x25
 8007cae:	d154      	bne.n	8007d5a <_vfiprintf_r+0xfa>
 8007cb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8007cb4:	d00b      	beq.n	8007cce <_vfiprintf_r+0x6e>
 8007cb6:	4653      	mov	r3, sl
 8007cb8:	463a      	mov	r2, r7
 8007cba:	4621      	mov	r1, r4
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ffbc 	bl	8007c3a <__sfputs_r>
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	f000 80c2 	beq.w	8007e4c <_vfiprintf_r+0x1ec>
 8007cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cca:	4453      	add	r3, sl
 8007ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cce:	f898 3000 	ldrb.w	r3, [r8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f000 80ba 	beq.w	8007e4c <_vfiprintf_r+0x1ec>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f04f 32ff 	mov.w	r2, #4294967295
 8007cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ce2:	9304      	str	r3, [sp, #16]
 8007ce4:	9307      	str	r3, [sp, #28]
 8007ce6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cea:	931a      	str	r3, [sp, #104]	; 0x68
 8007cec:	46a8      	mov	r8, r5
 8007cee:	2205      	movs	r2, #5
 8007cf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007cf4:	485e      	ldr	r0, [pc, #376]	; (8007e70 <_vfiprintf_r+0x210>)
 8007cf6:	f7f8 fa8b 	bl	8000210 <memchr>
 8007cfa:	9b04      	ldr	r3, [sp, #16]
 8007cfc:	bb78      	cbnz	r0, 8007d5e <_vfiprintf_r+0xfe>
 8007cfe:	06d9      	lsls	r1, r3, #27
 8007d00:	bf44      	itt	mi
 8007d02:	2220      	movmi	r2, #32
 8007d04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d08:	071a      	lsls	r2, r3, #28
 8007d0a:	bf44      	itt	mi
 8007d0c:	222b      	movmi	r2, #43	; 0x2b
 8007d0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d12:	782a      	ldrb	r2, [r5, #0]
 8007d14:	2a2a      	cmp	r2, #42	; 0x2a
 8007d16:	d02a      	beq.n	8007d6e <_vfiprintf_r+0x10e>
 8007d18:	9a07      	ldr	r2, [sp, #28]
 8007d1a:	46a8      	mov	r8, r5
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	250a      	movs	r5, #10
 8007d20:	4641      	mov	r1, r8
 8007d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d26:	3b30      	subs	r3, #48	; 0x30
 8007d28:	2b09      	cmp	r3, #9
 8007d2a:	d969      	bls.n	8007e00 <_vfiprintf_r+0x1a0>
 8007d2c:	b360      	cbz	r0, 8007d88 <_vfiprintf_r+0x128>
 8007d2e:	e024      	b.n	8007d7a <_vfiprintf_r+0x11a>
 8007d30:	4b50      	ldr	r3, [pc, #320]	; (8007e74 <_vfiprintf_r+0x214>)
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d101      	bne.n	8007d3a <_vfiprintf_r+0xda>
 8007d36:	68b4      	ldr	r4, [r6, #8]
 8007d38:	e7a2      	b.n	8007c80 <_vfiprintf_r+0x20>
 8007d3a:	4b4f      	ldr	r3, [pc, #316]	; (8007e78 <_vfiprintf_r+0x218>)
 8007d3c:	429c      	cmp	r4, r3
 8007d3e:	bf08      	it	eq
 8007d40:	68f4      	ldreq	r4, [r6, #12]
 8007d42:	e79d      	b.n	8007c80 <_vfiprintf_r+0x20>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4630      	mov	r0, r6
 8007d48:	f7ff fbc0 	bl	80074cc <__swsetup_r>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d09d      	beq.n	8007c8c <_vfiprintf_r+0x2c>
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	b01d      	add	sp, #116	; 0x74
 8007d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5a:	46a8      	mov	r8, r5
 8007d5c:	e7a2      	b.n	8007ca4 <_vfiprintf_r+0x44>
 8007d5e:	4a44      	ldr	r2, [pc, #272]	; (8007e70 <_vfiprintf_r+0x210>)
 8007d60:	1a80      	subs	r0, r0, r2
 8007d62:	fa0b f000 	lsl.w	r0, fp, r0
 8007d66:	4318      	orrs	r0, r3
 8007d68:	9004      	str	r0, [sp, #16]
 8007d6a:	4645      	mov	r5, r8
 8007d6c:	e7be      	b.n	8007cec <_vfiprintf_r+0x8c>
 8007d6e:	9a03      	ldr	r2, [sp, #12]
 8007d70:	1d11      	adds	r1, r2, #4
 8007d72:	6812      	ldr	r2, [r2, #0]
 8007d74:	9103      	str	r1, [sp, #12]
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	db01      	blt.n	8007d7e <_vfiprintf_r+0x11e>
 8007d7a:	9207      	str	r2, [sp, #28]
 8007d7c:	e004      	b.n	8007d88 <_vfiprintf_r+0x128>
 8007d7e:	4252      	negs	r2, r2
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	9207      	str	r2, [sp, #28]
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	f898 3000 	ldrb.w	r3, [r8]
 8007d8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d8e:	d10e      	bne.n	8007dae <_vfiprintf_r+0x14e>
 8007d90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d94:	2b2a      	cmp	r3, #42	; 0x2a
 8007d96:	d138      	bne.n	8007e0a <_vfiprintf_r+0x1aa>
 8007d98:	9b03      	ldr	r3, [sp, #12]
 8007d9a:	1d1a      	adds	r2, r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	9203      	str	r2, [sp, #12]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	bfb8      	it	lt
 8007da4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007da8:	f108 0802 	add.w	r8, r8, #2
 8007dac:	9305      	str	r3, [sp, #20]
 8007dae:	4d33      	ldr	r5, [pc, #204]	; (8007e7c <_vfiprintf_r+0x21c>)
 8007db0:	f898 1000 	ldrb.w	r1, [r8]
 8007db4:	2203      	movs	r2, #3
 8007db6:	4628      	mov	r0, r5
 8007db8:	f7f8 fa2a 	bl	8000210 <memchr>
 8007dbc:	b140      	cbz	r0, 8007dd0 <_vfiprintf_r+0x170>
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	1b40      	subs	r0, r0, r5
 8007dc2:	fa03 f000 	lsl.w	r0, r3, r0
 8007dc6:	9b04      	ldr	r3, [sp, #16]
 8007dc8:	4303      	orrs	r3, r0
 8007dca:	f108 0801 	add.w	r8, r8, #1
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	f898 1000 	ldrb.w	r1, [r8]
 8007dd4:	482a      	ldr	r0, [pc, #168]	; (8007e80 <_vfiprintf_r+0x220>)
 8007dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dda:	2206      	movs	r2, #6
 8007ddc:	f108 0701 	add.w	r7, r8, #1
 8007de0:	f7f8 fa16 	bl	8000210 <memchr>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	d037      	beq.n	8007e58 <_vfiprintf_r+0x1f8>
 8007de8:	4b26      	ldr	r3, [pc, #152]	; (8007e84 <_vfiprintf_r+0x224>)
 8007dea:	bb1b      	cbnz	r3, 8007e34 <_vfiprintf_r+0x1d4>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	3307      	adds	r3, #7
 8007df0:	f023 0307 	bic.w	r3, r3, #7
 8007df4:	3308      	adds	r3, #8
 8007df6:	9303      	str	r3, [sp, #12]
 8007df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfa:	444b      	add	r3, r9
 8007dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfe:	e750      	b.n	8007ca2 <_vfiprintf_r+0x42>
 8007e00:	fb05 3202 	mla	r2, r5, r2, r3
 8007e04:	2001      	movs	r0, #1
 8007e06:	4688      	mov	r8, r1
 8007e08:	e78a      	b.n	8007d20 <_vfiprintf_r+0xc0>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f108 0801 	add.w	r8, r8, #1
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	4619      	mov	r1, r3
 8007e14:	250a      	movs	r5, #10
 8007e16:	4640      	mov	r0, r8
 8007e18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e1c:	3a30      	subs	r2, #48	; 0x30
 8007e1e:	2a09      	cmp	r2, #9
 8007e20:	d903      	bls.n	8007e2a <_vfiprintf_r+0x1ca>
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d0c3      	beq.n	8007dae <_vfiprintf_r+0x14e>
 8007e26:	9105      	str	r1, [sp, #20]
 8007e28:	e7c1      	b.n	8007dae <_vfiprintf_r+0x14e>
 8007e2a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4680      	mov	r8, r0
 8007e32:	e7f0      	b.n	8007e16 <_vfiprintf_r+0x1b6>
 8007e34:	ab03      	add	r3, sp, #12
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	4622      	mov	r2, r4
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <_vfiprintf_r+0x228>)
 8007e3c:	a904      	add	r1, sp, #16
 8007e3e:	4630      	mov	r0, r6
 8007e40:	f3af 8000 	nop.w
 8007e44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007e48:	4681      	mov	r9, r0
 8007e4a:	d1d5      	bne.n	8007df8 <_vfiprintf_r+0x198>
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	065b      	lsls	r3, r3, #25
 8007e50:	f53f af7e 	bmi.w	8007d50 <_vfiprintf_r+0xf0>
 8007e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e56:	e77d      	b.n	8007d54 <_vfiprintf_r+0xf4>
 8007e58:	ab03      	add	r3, sp, #12
 8007e5a:	9300      	str	r3, [sp, #0]
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4b0a      	ldr	r3, [pc, #40]	; (8007e88 <_vfiprintf_r+0x228>)
 8007e60:	a904      	add	r1, sp, #16
 8007e62:	4630      	mov	r0, r6
 8007e64:	f000 f888 	bl	8007f78 <_printf_i>
 8007e68:	e7ec      	b.n	8007e44 <_vfiprintf_r+0x1e4>
 8007e6a:	bf00      	nop
 8007e6c:	08008720 	.word	0x08008720
 8007e70:	08008760 	.word	0x08008760
 8007e74:	08008740 	.word	0x08008740
 8007e78:	08008700 	.word	0x08008700
 8007e7c:	08008766 	.word	0x08008766
 8007e80:	0800876a 	.word	0x0800876a
 8007e84:	00000000 	.word	0x00000000
 8007e88:	08007c3b 	.word	0x08007c3b

08007e8c <_printf_common>:
 8007e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	4691      	mov	r9, r2
 8007e92:	461f      	mov	r7, r3
 8007e94:	688a      	ldr	r2, [r1, #8]
 8007e96:	690b      	ldr	r3, [r1, #16]
 8007e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	bfb8      	it	lt
 8007ea0:	4613      	movlt	r3, r2
 8007ea2:	f8c9 3000 	str.w	r3, [r9]
 8007ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460c      	mov	r4, r1
 8007eae:	b112      	cbz	r2, 8007eb6 <_printf_common+0x2a>
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	f8c9 3000 	str.w	r3, [r9]
 8007eb6:	6823      	ldr	r3, [r4, #0]
 8007eb8:	0699      	lsls	r1, r3, #26
 8007eba:	bf42      	ittt	mi
 8007ebc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007ec0:	3302      	addmi	r3, #2
 8007ec2:	f8c9 3000 	strmi.w	r3, [r9]
 8007ec6:	6825      	ldr	r5, [r4, #0]
 8007ec8:	f015 0506 	ands.w	r5, r5, #6
 8007ecc:	d107      	bne.n	8007ede <_printf_common+0x52>
 8007ece:	f104 0a19 	add.w	sl, r4, #25
 8007ed2:	68e3      	ldr	r3, [r4, #12]
 8007ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8007ed8:	1a9b      	subs	r3, r3, r2
 8007eda:	42ab      	cmp	r3, r5
 8007edc:	dc28      	bgt.n	8007f30 <_printf_common+0xa4>
 8007ede:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007ee2:	6822      	ldr	r2, [r4, #0]
 8007ee4:	3300      	adds	r3, #0
 8007ee6:	bf18      	it	ne
 8007ee8:	2301      	movne	r3, #1
 8007eea:	0692      	lsls	r2, r2, #26
 8007eec:	d42d      	bmi.n	8007f4a <_printf_common+0xbe>
 8007eee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	47c0      	blx	r8
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d020      	beq.n	8007f3e <_printf_common+0xb2>
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	68e5      	ldr	r5, [r4, #12]
 8007f00:	f8d9 2000 	ldr.w	r2, [r9]
 8007f04:	f003 0306 	and.w	r3, r3, #6
 8007f08:	2b04      	cmp	r3, #4
 8007f0a:	bf08      	it	eq
 8007f0c:	1aad      	subeq	r5, r5, r2
 8007f0e:	68a3      	ldr	r3, [r4, #8]
 8007f10:	6922      	ldr	r2, [r4, #16]
 8007f12:	bf0c      	ite	eq
 8007f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f18:	2500      	movne	r5, #0
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	bfc4      	itt	gt
 8007f1e:	1a9b      	subgt	r3, r3, r2
 8007f20:	18ed      	addgt	r5, r5, r3
 8007f22:	f04f 0900 	mov.w	r9, #0
 8007f26:	341a      	adds	r4, #26
 8007f28:	454d      	cmp	r5, r9
 8007f2a:	d11a      	bne.n	8007f62 <_printf_common+0xd6>
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e008      	b.n	8007f42 <_printf_common+0xb6>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4652      	mov	r2, sl
 8007f34:	4639      	mov	r1, r7
 8007f36:	4630      	mov	r0, r6
 8007f38:	47c0      	blx	r8
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	d103      	bne.n	8007f46 <_printf_common+0xba>
 8007f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	3501      	adds	r5, #1
 8007f48:	e7c3      	b.n	8007ed2 <_printf_common+0x46>
 8007f4a:	18e1      	adds	r1, r4, r3
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	2030      	movs	r0, #48	; 0x30
 8007f50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f54:	4422      	add	r2, r4
 8007f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f5e:	3302      	adds	r3, #2
 8007f60:	e7c5      	b.n	8007eee <_printf_common+0x62>
 8007f62:	2301      	movs	r3, #1
 8007f64:	4622      	mov	r2, r4
 8007f66:	4639      	mov	r1, r7
 8007f68:	4630      	mov	r0, r6
 8007f6a:	47c0      	blx	r8
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	d0e6      	beq.n	8007f3e <_printf_common+0xb2>
 8007f70:	f109 0901 	add.w	r9, r9, #1
 8007f74:	e7d8      	b.n	8007f28 <_printf_common+0x9c>
	...

08007f78 <_printf_i>:
 8007f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007f80:	460c      	mov	r4, r1
 8007f82:	7e09      	ldrb	r1, [r1, #24]
 8007f84:	b085      	sub	sp, #20
 8007f86:	296e      	cmp	r1, #110	; 0x6e
 8007f88:	4617      	mov	r7, r2
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	4698      	mov	r8, r3
 8007f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f90:	f000 80b3 	beq.w	80080fa <_printf_i+0x182>
 8007f94:	d822      	bhi.n	8007fdc <_printf_i+0x64>
 8007f96:	2963      	cmp	r1, #99	; 0x63
 8007f98:	d036      	beq.n	8008008 <_printf_i+0x90>
 8007f9a:	d80a      	bhi.n	8007fb2 <_printf_i+0x3a>
 8007f9c:	2900      	cmp	r1, #0
 8007f9e:	f000 80b9 	beq.w	8008114 <_printf_i+0x19c>
 8007fa2:	2958      	cmp	r1, #88	; 0x58
 8007fa4:	f000 8083 	beq.w	80080ae <_printf_i+0x136>
 8007fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007fb0:	e032      	b.n	8008018 <_printf_i+0xa0>
 8007fb2:	2964      	cmp	r1, #100	; 0x64
 8007fb4:	d001      	beq.n	8007fba <_printf_i+0x42>
 8007fb6:	2969      	cmp	r1, #105	; 0x69
 8007fb8:	d1f6      	bne.n	8007fa8 <_printf_i+0x30>
 8007fba:	6820      	ldr	r0, [r4, #0]
 8007fbc:	6813      	ldr	r3, [r2, #0]
 8007fbe:	0605      	lsls	r5, r0, #24
 8007fc0:	f103 0104 	add.w	r1, r3, #4
 8007fc4:	d52a      	bpl.n	800801c <_printf_i+0xa4>
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6011      	str	r1, [r2, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	da03      	bge.n	8007fd6 <_printf_i+0x5e>
 8007fce:	222d      	movs	r2, #45	; 0x2d
 8007fd0:	425b      	negs	r3, r3
 8007fd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007fd6:	486f      	ldr	r0, [pc, #444]	; (8008194 <_printf_i+0x21c>)
 8007fd8:	220a      	movs	r2, #10
 8007fda:	e039      	b.n	8008050 <_printf_i+0xd8>
 8007fdc:	2973      	cmp	r1, #115	; 0x73
 8007fde:	f000 809d 	beq.w	800811c <_printf_i+0x1a4>
 8007fe2:	d808      	bhi.n	8007ff6 <_printf_i+0x7e>
 8007fe4:	296f      	cmp	r1, #111	; 0x6f
 8007fe6:	d020      	beq.n	800802a <_printf_i+0xb2>
 8007fe8:	2970      	cmp	r1, #112	; 0x70
 8007fea:	d1dd      	bne.n	8007fa8 <_printf_i+0x30>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	f043 0320 	orr.w	r3, r3, #32
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	e003      	b.n	8007ffe <_printf_i+0x86>
 8007ff6:	2975      	cmp	r1, #117	; 0x75
 8007ff8:	d017      	beq.n	800802a <_printf_i+0xb2>
 8007ffa:	2978      	cmp	r1, #120	; 0x78
 8007ffc:	d1d4      	bne.n	8007fa8 <_printf_i+0x30>
 8007ffe:	2378      	movs	r3, #120	; 0x78
 8008000:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008004:	4864      	ldr	r0, [pc, #400]	; (8008198 <_printf_i+0x220>)
 8008006:	e055      	b.n	80080b4 <_printf_i+0x13c>
 8008008:	6813      	ldr	r3, [r2, #0]
 800800a:	1d19      	adds	r1, r3, #4
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6011      	str	r1, [r2, #0]
 8008010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008018:	2301      	movs	r3, #1
 800801a:	e08c      	b.n	8008136 <_printf_i+0x1be>
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6011      	str	r1, [r2, #0]
 8008020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008024:	bf18      	it	ne
 8008026:	b21b      	sxthne	r3, r3
 8008028:	e7cf      	b.n	8007fca <_printf_i+0x52>
 800802a:	6813      	ldr	r3, [r2, #0]
 800802c:	6825      	ldr	r5, [r4, #0]
 800802e:	1d18      	adds	r0, r3, #4
 8008030:	6010      	str	r0, [r2, #0]
 8008032:	0628      	lsls	r0, r5, #24
 8008034:	d501      	bpl.n	800803a <_printf_i+0xc2>
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	e002      	b.n	8008040 <_printf_i+0xc8>
 800803a:	0668      	lsls	r0, r5, #25
 800803c:	d5fb      	bpl.n	8008036 <_printf_i+0xbe>
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	4854      	ldr	r0, [pc, #336]	; (8008194 <_printf_i+0x21c>)
 8008042:	296f      	cmp	r1, #111	; 0x6f
 8008044:	bf14      	ite	ne
 8008046:	220a      	movne	r2, #10
 8008048:	2208      	moveq	r2, #8
 800804a:	2100      	movs	r1, #0
 800804c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008050:	6865      	ldr	r5, [r4, #4]
 8008052:	60a5      	str	r5, [r4, #8]
 8008054:	2d00      	cmp	r5, #0
 8008056:	f2c0 8095 	blt.w	8008184 <_printf_i+0x20c>
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	f021 0104 	bic.w	r1, r1, #4
 8008060:	6021      	str	r1, [r4, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d13d      	bne.n	80080e2 <_printf_i+0x16a>
 8008066:	2d00      	cmp	r5, #0
 8008068:	f040 808e 	bne.w	8008188 <_printf_i+0x210>
 800806c:	4665      	mov	r5, ip
 800806e:	2a08      	cmp	r2, #8
 8008070:	d10b      	bne.n	800808a <_printf_i+0x112>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	07db      	lsls	r3, r3, #31
 8008076:	d508      	bpl.n	800808a <_printf_i+0x112>
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	6862      	ldr	r2, [r4, #4]
 800807c:	429a      	cmp	r2, r3
 800807e:	bfde      	ittt	le
 8008080:	2330      	movle	r3, #48	; 0x30
 8008082:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008086:	f105 35ff 	addle.w	r5, r5, #4294967295
 800808a:	ebac 0305 	sub.w	r3, ip, r5
 800808e:	6123      	str	r3, [r4, #16]
 8008090:	f8cd 8000 	str.w	r8, [sp]
 8008094:	463b      	mov	r3, r7
 8008096:	aa03      	add	r2, sp, #12
 8008098:	4621      	mov	r1, r4
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff fef6 	bl	8007e8c <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d14d      	bne.n	8008140 <_printf_i+0x1c8>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b005      	add	sp, #20
 80080aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080ae:	4839      	ldr	r0, [pc, #228]	; (8008194 <_printf_i+0x21c>)
 80080b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80080b4:	6813      	ldr	r3, [r2, #0]
 80080b6:	6821      	ldr	r1, [r4, #0]
 80080b8:	1d1d      	adds	r5, r3, #4
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6015      	str	r5, [r2, #0]
 80080be:	060a      	lsls	r2, r1, #24
 80080c0:	d50b      	bpl.n	80080da <_printf_i+0x162>
 80080c2:	07ca      	lsls	r2, r1, #31
 80080c4:	bf44      	itt	mi
 80080c6:	f041 0120 	orrmi.w	r1, r1, #32
 80080ca:	6021      	strmi	r1, [r4, #0]
 80080cc:	b91b      	cbnz	r3, 80080d6 <_printf_i+0x15e>
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	f022 0220 	bic.w	r2, r2, #32
 80080d4:	6022      	str	r2, [r4, #0]
 80080d6:	2210      	movs	r2, #16
 80080d8:	e7b7      	b.n	800804a <_printf_i+0xd2>
 80080da:	064d      	lsls	r5, r1, #25
 80080dc:	bf48      	it	mi
 80080de:	b29b      	uxthmi	r3, r3
 80080e0:	e7ef      	b.n	80080c2 <_printf_i+0x14a>
 80080e2:	4665      	mov	r5, ip
 80080e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80080e8:	fb02 3311 	mls	r3, r2, r1, r3
 80080ec:	5cc3      	ldrb	r3, [r0, r3]
 80080ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80080f2:	460b      	mov	r3, r1
 80080f4:	2900      	cmp	r1, #0
 80080f6:	d1f5      	bne.n	80080e4 <_printf_i+0x16c>
 80080f8:	e7b9      	b.n	800806e <_printf_i+0xf6>
 80080fa:	6813      	ldr	r3, [r2, #0]
 80080fc:	6825      	ldr	r5, [r4, #0]
 80080fe:	6961      	ldr	r1, [r4, #20]
 8008100:	1d18      	adds	r0, r3, #4
 8008102:	6010      	str	r0, [r2, #0]
 8008104:	0628      	lsls	r0, r5, #24
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	d501      	bpl.n	800810e <_printf_i+0x196>
 800810a:	6019      	str	r1, [r3, #0]
 800810c:	e002      	b.n	8008114 <_printf_i+0x19c>
 800810e:	066a      	lsls	r2, r5, #25
 8008110:	d5fb      	bpl.n	800810a <_printf_i+0x192>
 8008112:	8019      	strh	r1, [r3, #0]
 8008114:	2300      	movs	r3, #0
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	4665      	mov	r5, ip
 800811a:	e7b9      	b.n	8008090 <_printf_i+0x118>
 800811c:	6813      	ldr	r3, [r2, #0]
 800811e:	1d19      	adds	r1, r3, #4
 8008120:	6011      	str	r1, [r2, #0]
 8008122:	681d      	ldr	r5, [r3, #0]
 8008124:	6862      	ldr	r2, [r4, #4]
 8008126:	2100      	movs	r1, #0
 8008128:	4628      	mov	r0, r5
 800812a:	f7f8 f871 	bl	8000210 <memchr>
 800812e:	b108      	cbz	r0, 8008134 <_printf_i+0x1bc>
 8008130:	1b40      	subs	r0, r0, r5
 8008132:	6060      	str	r0, [r4, #4]
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	6123      	str	r3, [r4, #16]
 8008138:	2300      	movs	r3, #0
 800813a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813e:	e7a7      	b.n	8008090 <_printf_i+0x118>
 8008140:	6923      	ldr	r3, [r4, #16]
 8008142:	462a      	mov	r2, r5
 8008144:	4639      	mov	r1, r7
 8008146:	4630      	mov	r0, r6
 8008148:	47c0      	blx	r8
 800814a:	3001      	adds	r0, #1
 800814c:	d0aa      	beq.n	80080a4 <_printf_i+0x12c>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	079b      	lsls	r3, r3, #30
 8008152:	d413      	bmi.n	800817c <_printf_i+0x204>
 8008154:	68e0      	ldr	r0, [r4, #12]
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	4298      	cmp	r0, r3
 800815a:	bfb8      	it	lt
 800815c:	4618      	movlt	r0, r3
 800815e:	e7a3      	b.n	80080a8 <_printf_i+0x130>
 8008160:	2301      	movs	r3, #1
 8008162:	464a      	mov	r2, r9
 8008164:	4639      	mov	r1, r7
 8008166:	4630      	mov	r0, r6
 8008168:	47c0      	blx	r8
 800816a:	3001      	adds	r0, #1
 800816c:	d09a      	beq.n	80080a4 <_printf_i+0x12c>
 800816e:	3501      	adds	r5, #1
 8008170:	68e3      	ldr	r3, [r4, #12]
 8008172:	9a03      	ldr	r2, [sp, #12]
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	42ab      	cmp	r3, r5
 8008178:	dcf2      	bgt.n	8008160 <_printf_i+0x1e8>
 800817a:	e7eb      	b.n	8008154 <_printf_i+0x1dc>
 800817c:	2500      	movs	r5, #0
 800817e:	f104 0919 	add.w	r9, r4, #25
 8008182:	e7f5      	b.n	8008170 <_printf_i+0x1f8>
 8008184:	2b00      	cmp	r3, #0
 8008186:	d1ac      	bne.n	80080e2 <_printf_i+0x16a>
 8008188:	7803      	ldrb	r3, [r0, #0]
 800818a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800818e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008192:	e76c      	b.n	800806e <_printf_i+0xf6>
 8008194:	08008771 	.word	0x08008771
 8008198:	08008782 	.word	0x08008782

0800819c <__sread>:
 800819c:	b510      	push	{r4, lr}
 800819e:	460c      	mov	r4, r1
 80081a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a4:	f000 f8de 	bl	8008364 <_read_r>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	bfab      	itete	ge
 80081ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081ae:	89a3      	ldrhlt	r3, [r4, #12]
 80081b0:	181b      	addge	r3, r3, r0
 80081b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081b6:	bfac      	ite	ge
 80081b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ba:	81a3      	strhlt	r3, [r4, #12]
 80081bc:	bd10      	pop	{r4, pc}

080081be <__swrite>:
 80081be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c2:	461f      	mov	r7, r3
 80081c4:	898b      	ldrh	r3, [r1, #12]
 80081c6:	05db      	lsls	r3, r3, #23
 80081c8:	4605      	mov	r5, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	4616      	mov	r6, r2
 80081ce:	d505      	bpl.n	80081dc <__swrite+0x1e>
 80081d0:	2302      	movs	r3, #2
 80081d2:	2200      	movs	r2, #0
 80081d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081d8:	f000 f868 	bl	80082ac <_lseek_r>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081e6:	81a3      	strh	r3, [r4, #12]
 80081e8:	4632      	mov	r2, r6
 80081ea:	463b      	mov	r3, r7
 80081ec:	4628      	mov	r0, r5
 80081ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081f2:	f000 b817 	b.w	8008224 <_write_r>

080081f6 <__sseek>:
 80081f6:	b510      	push	{r4, lr}
 80081f8:	460c      	mov	r4, r1
 80081fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fe:	f000 f855 	bl	80082ac <_lseek_r>
 8008202:	1c43      	adds	r3, r0, #1
 8008204:	89a3      	ldrh	r3, [r4, #12]
 8008206:	bf15      	itete	ne
 8008208:	6560      	strne	r0, [r4, #84]	; 0x54
 800820a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800820e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008212:	81a3      	strheq	r3, [r4, #12]
 8008214:	bf18      	it	ne
 8008216:	81a3      	strhne	r3, [r4, #12]
 8008218:	bd10      	pop	{r4, pc}

0800821a <__sclose>:
 800821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821e:	f000 b813 	b.w	8008248 <_close_r>
	...

08008224 <_write_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	4c07      	ldr	r4, [pc, #28]	; (8008244 <_write_r+0x20>)
 8008228:	4605      	mov	r5, r0
 800822a:	4608      	mov	r0, r1
 800822c:	4611      	mov	r1, r2
 800822e:	2200      	movs	r2, #0
 8008230:	6022      	str	r2, [r4, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	f7f9 f8f3 	bl	800141e <_write>
 8008238:	1c43      	adds	r3, r0, #1
 800823a:	d102      	bne.n	8008242 <_write_r+0x1e>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	b103      	cbz	r3, 8008242 <_write_r+0x1e>
 8008240:	602b      	str	r3, [r5, #0]
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	20000638 	.word	0x20000638

08008248 <_close_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4c06      	ldr	r4, [pc, #24]	; (8008264 <_close_r+0x1c>)
 800824c:	2300      	movs	r3, #0
 800824e:	4605      	mov	r5, r0
 8008250:	4608      	mov	r0, r1
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	f7f9 f8ff 	bl	8001456 <_close>
 8008258:	1c43      	adds	r3, r0, #1
 800825a:	d102      	bne.n	8008262 <_close_r+0x1a>
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	b103      	cbz	r3, 8008262 <_close_r+0x1a>
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	bd38      	pop	{r3, r4, r5, pc}
 8008264:	20000638 	.word	0x20000638

08008268 <_fstat_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4c07      	ldr	r4, [pc, #28]	; (8008288 <_fstat_r+0x20>)
 800826c:	2300      	movs	r3, #0
 800826e:	4605      	mov	r5, r0
 8008270:	4608      	mov	r0, r1
 8008272:	4611      	mov	r1, r2
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	f7f9 f8fa 	bl	800146e <_fstat>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	d102      	bne.n	8008284 <_fstat_r+0x1c>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	b103      	cbz	r3, 8008284 <_fstat_r+0x1c>
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	bd38      	pop	{r3, r4, r5, pc}
 8008286:	bf00      	nop
 8008288:	20000638 	.word	0x20000638

0800828c <_isatty_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4c06      	ldr	r4, [pc, #24]	; (80082a8 <_isatty_r+0x1c>)
 8008290:	2300      	movs	r3, #0
 8008292:	4605      	mov	r5, r0
 8008294:	4608      	mov	r0, r1
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	f7f9 f8f9 	bl	800148e <_isatty>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_isatty_r+0x1a>
 80082a0:	6823      	ldr	r3, [r4, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_isatty_r+0x1a>
 80082a4:	602b      	str	r3, [r5, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20000638 	.word	0x20000638

080082ac <_lseek_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4c07      	ldr	r4, [pc, #28]	; (80082cc <_lseek_r+0x20>)
 80082b0:	4605      	mov	r5, r0
 80082b2:	4608      	mov	r0, r1
 80082b4:	4611      	mov	r1, r2
 80082b6:	2200      	movs	r2, #0
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	461a      	mov	r2, r3
 80082bc:	f7f9 f8f2 	bl	80014a4 <_lseek>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_lseek_r+0x1e>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_lseek_r+0x1e>
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000638 	.word	0x20000638

080082d0 <memcpy>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	1e43      	subs	r3, r0, #1
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	d100      	bne.n	80082dc <memcpy+0xc>
 80082da:	bd10      	pop	{r4, pc}
 80082dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082e4:	e7f7      	b.n	80082d6 <memcpy+0x6>

080082e6 <memmove>:
 80082e6:	4288      	cmp	r0, r1
 80082e8:	b510      	push	{r4, lr}
 80082ea:	eb01 0302 	add.w	r3, r1, r2
 80082ee:	d807      	bhi.n	8008300 <memmove+0x1a>
 80082f0:	1e42      	subs	r2, r0, #1
 80082f2:	4299      	cmp	r1, r3
 80082f4:	d00a      	beq.n	800830c <memmove+0x26>
 80082f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80082fe:	e7f8      	b.n	80082f2 <memmove+0xc>
 8008300:	4283      	cmp	r3, r0
 8008302:	d9f5      	bls.n	80082f0 <memmove+0xa>
 8008304:	1881      	adds	r1, r0, r2
 8008306:	1ad2      	subs	r2, r2, r3
 8008308:	42d3      	cmn	r3, r2
 800830a:	d100      	bne.n	800830e <memmove+0x28>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008312:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008316:	e7f7      	b.n	8008308 <memmove+0x22>

08008318 <_realloc_r>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	4607      	mov	r7, r0
 800831c:	4614      	mov	r4, r2
 800831e:	460e      	mov	r6, r1
 8008320:	b921      	cbnz	r1, 800832c <_realloc_r+0x14>
 8008322:	4611      	mov	r1, r2
 8008324:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008328:	f7fe bf62 	b.w	80071f0 <_malloc_r>
 800832c:	b922      	cbnz	r2, 8008338 <_realloc_r+0x20>
 800832e:	f7fe ff11 	bl	8007154 <_free_r>
 8008332:	4625      	mov	r5, r4
 8008334:	4628      	mov	r0, r5
 8008336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008338:	f000 f826 	bl	8008388 <_malloc_usable_size_r>
 800833c:	42a0      	cmp	r0, r4
 800833e:	d20f      	bcs.n	8008360 <_realloc_r+0x48>
 8008340:	4621      	mov	r1, r4
 8008342:	4638      	mov	r0, r7
 8008344:	f7fe ff54 	bl	80071f0 <_malloc_r>
 8008348:	4605      	mov	r5, r0
 800834a:	2800      	cmp	r0, #0
 800834c:	d0f2      	beq.n	8008334 <_realloc_r+0x1c>
 800834e:	4631      	mov	r1, r6
 8008350:	4622      	mov	r2, r4
 8008352:	f7ff ffbd 	bl	80082d0 <memcpy>
 8008356:	4631      	mov	r1, r6
 8008358:	4638      	mov	r0, r7
 800835a:	f7fe fefb 	bl	8007154 <_free_r>
 800835e:	e7e9      	b.n	8008334 <_realloc_r+0x1c>
 8008360:	4635      	mov	r5, r6
 8008362:	e7e7      	b.n	8008334 <_realloc_r+0x1c>

08008364 <_read_r>:
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	4c07      	ldr	r4, [pc, #28]	; (8008384 <_read_r+0x20>)
 8008368:	4605      	mov	r5, r0
 800836a:	4608      	mov	r0, r1
 800836c:	4611      	mov	r1, r2
 800836e:	2200      	movs	r2, #0
 8008370:	6022      	str	r2, [r4, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	f7f9 f836 	bl	80013e4 <_read>
 8008378:	1c43      	adds	r3, r0, #1
 800837a:	d102      	bne.n	8008382 <_read_r+0x1e>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	b103      	cbz	r3, 8008382 <_read_r+0x1e>
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	bd38      	pop	{r3, r4, r5, pc}
 8008384:	20000638 	.word	0x20000638

08008388 <_malloc_usable_size_r>:
 8008388:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800838c:	1f18      	subs	r0, r3, #4
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfbc      	itt	lt
 8008392:	580b      	ldrlt	r3, [r1, r0]
 8008394:	18c0      	addlt	r0, r0, r3
 8008396:	4770      	bx	lr

08008398 <_init>:
 8008398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800839a:	bf00      	nop
 800839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800839e:	bc08      	pop	{r3}
 80083a0:	469e      	mov	lr, r3
 80083a2:	4770      	bx	lr

080083a4 <_fini>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr
